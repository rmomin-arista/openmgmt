{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome This site is a collection of notes, examples, and documentation regarding the use of various network management protocols with Arista EOS devices. This is not a replacement for the official Arista EOS documentation but should be considered something of a cookbook for getting started with the management technologies available in EOS. The source for this site is on github . If you see something amiss or you're interested in a particular topic that isn't being covered, please feel free to open an issue or submit a pull request . N.B.: This is a continuous work in progress. Arista Resources Arista Product Documentation - EOS and Hardware documentation (Arista login required) Arista Software Downloads - EOS downloads (Arista login required) Arista TOIs - Transfer of Information documents. Release specific new feature documentation. (Arista login required)","title":"Home"},{"location":"#welcome","text":"This site is a collection of notes, examples, and documentation regarding the use of various network management protocols with Arista EOS devices. This is not a replacement for the official Arista EOS documentation but should be considered something of a cookbook for getting started with the management technologies available in EOS. The source for this site is on github . If you see something amiss or you're interested in a particular topic that isn't being covered, please feel free to open an issue or submit a pull request . N.B.: This is a continuous work in progress.","title":"Welcome"},{"location":"#arista-resources","text":"Arista Product Documentation - EOS and Hardware documentation (Arista login required) Arista Software Downloads - EOS downloads (Arista login required) Arista TOIs - Transfer of Information documents. Release specific new feature documentation. (Arista login required)","title":"Arista Resources"},{"location":"configuration/mtls/","text":"EOS mTLS Configuration Overview EOS supports the use of mutual TLS (mTLS) for gRPC, RESTCONF and eAPI services. This allows the use of certificates, signed by a recognized and trusted CA, for authentication to gNMI and other gRPC based services. By default only certificates signed with Arista's CA are trusted. In order to generate and sign certificates for mTLS authentication, an operator will need to install and configure a certifying authority (CA) that is used for signing certificates that are generated on network elements as well as the servers that will be interacting with the gRPC services. The necessary certificates for establishing the chain of trust will need to be imported into the switches and tools interacting with the switches. This document outlines the necessary steps to generate certificate signing requests (CSR) on arista devices, sign the certificates and import these into the switches. Process Overview Setup a private certificate authority (CA). This document uses easy-rsa Generate CSRs from the switch as well as for the host that will be initiating connections to the switch using mTLS as the authentication mechanism. Sign the CSRs using the CA tools. Copy the relevant elements to the switch (signed server certificate and CA certificate). Configure the switch to use the certificates and the associated CA certificate to perform mTLS authentication. Initiate connections from the clients to the switch to execute gNMI RPCs. Easy-RSA Setup The simple installation of Easy-RSA is well documented in the Easy RSA quick start guide . For a more durable installation you're encouraged to review the Easy-RSA documentation and customize the settings to your environment. Easy-RSA CA parameters easy RSA version: 3.0.8 As of this writing EOS only supports RSA certificates, this differs from the default configuration of Easy-RSA. The following variable in the vars file will need to be set in order to generate the appropriate certificate type. set_var EASYRSA_ALGO \"rsa\" Use the easyrsa build-ca command to create the necessary certificate signing infrastructure within easyrsa. This will generate a ca.crt certificate which can be imported into the PKI validation chain of the switches and other hosts in your PKI domain. This can also be used in a standalone manner with most gnmi clients. In our case, this CA certificate resides in: ${HOME}/easy-rsa/pki/ca.crt This will need to be imported into the network elements where you're using mTLS for authentication. Generate a Local Client Certificate This will be used by local clients (gnmi, gnoi, gribi, etc.) connecting to the switches in order to authenticate. Note the gnmi-client.cnf configuration file provided in the following openssl command is used to create the Subject Alternate Name IP address entry associated with the client certificate. This is optional and is not required for certificates. mkdir ~/gnmi-client-cert cd ~/gnmi-client-cert openssl req -out gnmi-client.csr -newkey rsa:2048 -nodes -keyout gnmi-client.key -config gnmi-client.cnf The above commands will generate a private key as well as the Certificate Signing Request (CSR) Sign the Local Client Certificate with Easy-RSA Note, that this is going to be a client certificate. As our gnmi client will be talking to the gnmi server on the switch. cd ~/easy-rsa ./easyrsa import-req ../gnmi-client-cert gnmi-client.csr gnmi-client ./easyrsa sign-req client gnmi-client The sign-req command generates the following output. Using SSL: openssl OpenSSL 1.1.1f 31 Mar 2020 ... snipped ... subject= countryName = us stateOrProvinceName = mn localityName = minneapolis organizationName = arista-lab commonName = sulrich@arista.com X509v3 Subject Alternative Name: IP:192.168.1.11 Type the word 'yes' to continue, or any other input to abort. Confirm request details: yes Using configuration from /home/sulrich/easy-rsa/pki/easy-rsa-3625384.5yQThV/tmp.kaJhk0 Check that the request matches the signature Signature ok The Subject's Distinguished Name is as follows countryName :PRINTABLE:'us' stateOrProvinceName :ASN.1 12:'mn' localityName :ASN.1 12:'minneapolis' organizationName :ASN.1 12:'arista-lab' commonName :ASN.1 12:'sulrich@arista.com' Certificate is to be certified until Oct 10 19:45:42 2023 GMT (825 days) Write out database with 1 new entries Data Base Updated Certificate created at: /home/sulrich/easy-rsa/pki/issued/gnmi-client.crt Switch Side Actions Generate a key pair on the switch the key will be named v1.key security pki key generate rsa 4096 v1.key Generate the CSR security pki certificate generate signing-request key v1.key Capture the CSR text into a file and copy this to the CA server. Sign the Switch CSR with Easy-RSA Note that in this case we're generating a server certificate. cd ~/easy-rsa ./easyrsa import-req ../v1.csr v1 ./easyrsa sign-req server v1 This will generate the signed certificate and place it into the easy-rsa local store. ${HOME}/easy-rsa/pki/issued/v1.crt Copy this to the switch and import it into the switch's certificate store. copy file:/mnt/flash/v1.crt certificate:v1.crt Copy the Private CA Certificate to the Switch You will need to copy the CA.crt (commonly in <easyrsa_root>/pki/ca.crt ) to the switch and add it to the list of certificates. In the following example the file has been copied to the switch as demo-ca.crt . copy flash:demo-ca.crt certificate: SSL Profile Configuration Configure the necessary ssl profile and include the demo-ca.crt in the list of trusted CAs. management security ssl profile test-arista certificate v1.crt key v1.key trust certificate demo-ca.crt ! gNMI Configuration The following configuration associates the gnmi service withthe associated ssl profile and enables it for use with mTLS for authentication. management api gnmi transport grpc default ssl profile test-arista provider eos-native ! At this point the switch is configured to accept connections from clients with valid, signed certificates. Useful Troubleshooting Commands show management api gnmi This command enables you to determine the operational state of the gnmi process as well as whether or not the ssl profile is considered valid. show management security ssl profile This command enables you to see the state of the ssl profiles and whether there are issues with the validation chain. Clocks and Certificate Lifetime Certificates should be created with a finite lifetime and rotated within that lifetime. However, if the clocks on the switch are grossly off this may impact certificate operation. Make sure that the clock on the switch is set correctly and synchronized to a reliable time source. Client Examples gnmi (Arista Client) gnmi -addr 192.168.1.21:6030 \\ -username admin -password arista \\ -cafile easy-rsa/pki/ca.crt \\ -certfile easy-rsa/pki/issued/gnmi-client.crt \\ -keyfile gnmi-client/gnmi-client.key capabilities gnmic gnmic -a 192.168.1.21:6030 -u admin -p arista \\ --tls-ca easy-rsa/pki/ca.crt \\ --tls-cert easy-rsa/pki/issued/gnmi-client.crt \\ --tls-key gnmi-client/gnmi-client.key capabilities Additional References EOS central: Working with Certificates","title":"Certificate Authentication"},{"location":"configuration/mtls/#eos-mtls-configuration","text":"","title":"EOS mTLS Configuration"},{"location":"configuration/mtls/#overview","text":"EOS supports the use of mutual TLS (mTLS) for gRPC, RESTCONF and eAPI services. This allows the use of certificates, signed by a recognized and trusted CA, for authentication to gNMI and other gRPC based services. By default only certificates signed with Arista's CA are trusted. In order to generate and sign certificates for mTLS authentication, an operator will need to install and configure a certifying authority (CA) that is used for signing certificates that are generated on network elements as well as the servers that will be interacting with the gRPC services. The necessary certificates for establishing the chain of trust will need to be imported into the switches and tools interacting with the switches. This document outlines the necessary steps to generate certificate signing requests (CSR) on arista devices, sign the certificates and import these into the switches.","title":"Overview"},{"location":"configuration/mtls/#process-overview","text":"Setup a private certificate authority (CA). This document uses easy-rsa Generate CSRs from the switch as well as for the host that will be initiating connections to the switch using mTLS as the authentication mechanism. Sign the CSRs using the CA tools. Copy the relevant elements to the switch (signed server certificate and CA certificate). Configure the switch to use the certificates and the associated CA certificate to perform mTLS authentication. Initiate connections from the clients to the switch to execute gNMI RPCs.","title":"Process Overview"},{"location":"configuration/mtls/#easy-rsa-setup","text":"The simple installation of Easy-RSA is well documented in the Easy RSA quick start guide . For a more durable installation you're encouraged to review the Easy-RSA documentation and customize the settings to your environment.","title":"Easy-RSA Setup"},{"location":"configuration/mtls/#easy-rsa-ca-parameters","text":"easy RSA version: 3.0.8 As of this writing EOS only supports RSA certificates, this differs from the default configuration of Easy-RSA. The following variable in the vars file will need to be set in order to generate the appropriate certificate type. set_var EASYRSA_ALGO \"rsa\" Use the easyrsa build-ca command to create the necessary certificate signing infrastructure within easyrsa. This will generate a ca.crt certificate which can be imported into the PKI validation chain of the switches and other hosts in your PKI domain. This can also be used in a standalone manner with most gnmi clients. In our case, this CA certificate resides in: ${HOME}/easy-rsa/pki/ca.crt This will need to be imported into the network elements where you're using mTLS for authentication.","title":"Easy-RSA CA parameters"},{"location":"configuration/mtls/#generate-a-local-client-certificate","text":"This will be used by local clients (gnmi, gnoi, gribi, etc.) connecting to the switches in order to authenticate. Note the gnmi-client.cnf configuration file provided in the following openssl command is used to create the Subject Alternate Name IP address entry associated with the client certificate. This is optional and is not required for certificates. mkdir ~/gnmi-client-cert cd ~/gnmi-client-cert openssl req -out gnmi-client.csr -newkey rsa:2048 -nodes -keyout gnmi-client.key -config gnmi-client.cnf The above commands will generate a private key as well as the Certificate Signing Request (CSR)","title":"Generate a Local Client Certificate"},{"location":"configuration/mtls/#sign-the-local-client-certificate-with-easy-rsa","text":"Note, that this is going to be a client certificate. As our gnmi client will be talking to the gnmi server on the switch. cd ~/easy-rsa ./easyrsa import-req ../gnmi-client-cert gnmi-client.csr gnmi-client ./easyrsa sign-req client gnmi-client The sign-req command generates the following output. Using SSL: openssl OpenSSL 1.1.1f 31 Mar 2020 ... snipped ... subject= countryName = us stateOrProvinceName = mn localityName = minneapolis organizationName = arista-lab commonName = sulrich@arista.com X509v3 Subject Alternative Name: IP:192.168.1.11 Type the word 'yes' to continue, or any other input to abort. Confirm request details: yes Using configuration from /home/sulrich/easy-rsa/pki/easy-rsa-3625384.5yQThV/tmp.kaJhk0 Check that the request matches the signature Signature ok The Subject's Distinguished Name is as follows countryName :PRINTABLE:'us' stateOrProvinceName :ASN.1 12:'mn' localityName :ASN.1 12:'minneapolis' organizationName :ASN.1 12:'arista-lab' commonName :ASN.1 12:'sulrich@arista.com' Certificate is to be certified until Oct 10 19:45:42 2023 GMT (825 days) Write out database with 1 new entries Data Base Updated Certificate created at: /home/sulrich/easy-rsa/pki/issued/gnmi-client.crt","title":"Sign the Local Client Certificate with Easy-RSA"},{"location":"configuration/mtls/#switch-side-actions","text":"Generate a key pair on the switch the key will be named v1.key security pki key generate rsa 4096 v1.key Generate the CSR security pki certificate generate signing-request key v1.key Capture the CSR text into a file and copy this to the CA server.","title":"Switch Side Actions"},{"location":"configuration/mtls/#sign-the-switch-csr-with-easy-rsa","text":"Note that in this case we're generating a server certificate. cd ~/easy-rsa ./easyrsa import-req ../v1.csr v1 ./easyrsa sign-req server v1 This will generate the signed certificate and place it into the easy-rsa local store. ${HOME}/easy-rsa/pki/issued/v1.crt Copy this to the switch and import it into the switch's certificate store. copy file:/mnt/flash/v1.crt certificate:v1.crt","title":"Sign the Switch CSR with Easy-RSA"},{"location":"configuration/mtls/#copy-the-private-ca-certificate-to-the-switch","text":"You will need to copy the CA.crt (commonly in <easyrsa_root>/pki/ca.crt ) to the switch and add it to the list of certificates. In the following example the file has been copied to the switch as demo-ca.crt . copy flash:demo-ca.crt certificate:","title":"Copy the Private CA Certificate to the Switch"},{"location":"configuration/mtls/#ssl-profile-configuration","text":"Configure the necessary ssl profile and include the demo-ca.crt in the list of trusted CAs. management security ssl profile test-arista certificate v1.crt key v1.key trust certificate demo-ca.crt !","title":"SSL Profile Configuration"},{"location":"configuration/mtls/#gnmi-configuration","text":"The following configuration associates the gnmi service withthe associated ssl profile and enables it for use with mTLS for authentication. management api gnmi transport grpc default ssl profile test-arista provider eos-native ! At this point the switch is configured to accept connections from clients with valid, signed certificates.","title":"gNMI Configuration"},{"location":"configuration/mtls/#useful-troubleshooting-commands","text":"show management api gnmi This command enables you to determine the operational state of the gnmi process as well as whether or not the ssl profile is considered valid. show management security ssl profile This command enables you to see the state of the ssl profiles and whether there are issues with the validation chain.","title":"Useful Troubleshooting Commands"},{"location":"configuration/mtls/#clocks-and-certificate-lifetime","text":"Certificates should be created with a finite lifetime and rotated within that lifetime. However, if the clocks on the switch are grossly off this may impact certificate operation. Make sure that the clock on the switch is set correctly and synchronized to a reliable time source.","title":"Clocks and Certificate Lifetime"},{"location":"configuration/mtls/#client-examples","text":"","title":"Client Examples"},{"location":"configuration/mtls/#gnmi-arista-client","text":"gnmi -addr 192.168.1.21:6030 \\ -username admin -password arista \\ -cafile easy-rsa/pki/ca.crt \\ -certfile easy-rsa/pki/issued/gnmi-client.crt \\ -keyfile gnmi-client/gnmi-client.key capabilities","title":"gnmi (Arista Client)"},{"location":"configuration/mtls/#gnmic","text":"gnmic -a 192.168.1.21:6030 -u admin -p arista \\ --tls-ca easy-rsa/pki/ca.crt \\ --tls-cert easy-rsa/pki/issued/gnmi-client.crt \\ --tls-key gnmi-client/gnmi-client.key capabilities","title":"gnmic"},{"location":"configuration/mtls/#additional-references","text":"EOS central: Working with Certificates","title":"Additional References"},{"location":"configuration/netconf/","text":"Overview EOS provides support for managing the switch via NETCONF. NETCONF Currently supported NETCONF operations: get, get-config, get-schema, edit-config, lock, unlock, close-session, kill-session. To configure NETCONF in default VRF we can enable the ssh transport under management api netconf : Default VRF management api netconf transport ssh test Non-default VRF management api netconf transport ssh test vrf management Changing the port: management api netconf transport ssh test port 830 Apply ACL management api netconf transport ssh test ip access-group ACCESS_GROUP Note The ACL should be a standard ACL allowing hosts or subnets. Status check: #show management api netconf Enabled: Yes Server: running on port 830, in management VRF","title":"NETCONF"},{"location":"configuration/netconf/#overview","text":"EOS provides support for managing the switch via NETCONF.","title":"Overview"},{"location":"configuration/netconf/#netconf","text":"Currently supported NETCONF operations: get, get-config, get-schema, edit-config, lock, unlock, close-session, kill-session. To configure NETCONF in default VRF we can enable the ssh transport under management api netconf : Default VRF management api netconf transport ssh test Non-default VRF management api netconf transport ssh test vrf management Changing the port: management api netconf transport ssh test port 830 Apply ACL management api netconf transport ssh test ip access-group ACCESS_GROUP Note The ACL should be a standard ACL allowing hosts or subnets. Status check: #show management api netconf Enabled: Yes Server: running on port 830, in management VRF","title":"NETCONF"},{"location":"configuration/openconfig/","text":"Overview EOS supports the OpenConfig gNMI interface for device management. Platform compatibility All EOS flavors support OpenConfig (phyiscal, virtual, containerized, cloud). gNMI To start the gNMI server, which listens by default on TCP/6030 configure the gRPC transport under management api gnmi in the global config mode: Default VRF management api gnmi transport grpc openmgmt Non-default VRF management api gnmi transport grpc openmgmt vrf management Changing the port: management api gnmi transport grpc openmgmt port 5900 Apply ACL management api gnmi transport grpc openmgmt ip access-group ACCESS_GROUP Note, the ACL should be a standard ACL allowing hosts or subnets. Authenticate the connection with TLS management api gnmi transport grpc openmgmt ssl profile PROFILE Enable authorization of incoming requests management api gnmi transport grpc openmgmt authorization requests Status check #show management api gnmi Octa: No Enabled: Yes Server: running on port 6030, in default VRF SSL Profile: none QoS DSCP: none OCTA The OpenConfig agent (gNMI API) can leverage the EOS state streaming agent's (TerminAttr) libraries, thus exposing EOS native paths. If Octa (OpenConfig + TerminAttr) is enabled then OpenConfig, in addition to accepting OpenConfig paths in gNMI get/subscribe requests, will also support EOS native paths (e.g. Sysdb/Smash paths). This feature was introduced in 4.22.1F . gNMI requests received by Octa are interpreted as either OpenConfig or TerminAttr requests, as follows. gNMI requests containing an origin of eos_native are processed as as native path requests. Requests lacking an origin of eos_native are treated as OpenConfig requests. A gNMI client that supports specification of an origin as part of the associated RPC is a requirement. Note support for sending GET/SUBSCRIBE requests to both an openconfig and an eos-native path in the same call is not yet supported. How to enable Octa Octa can be enable by adding provider eos-native under management api gnmi SW(config-mgmt-api-gnmi)#provider eos-native Status check #show management api gnmi Octa: enabled Enabled: Yes Server: running on port 6030, in default VRF SSL Profile: none QoS DSCP: none API models Starting in EOS 4.24.0F it is possible to configure the Smash paths that Octa has access to. Under the management api models mode, the provider smash sub-mode allows for enabling or disabling a Smash path with the [no] path smash_path_here [disabled] command. management api models provider smash path forwarding/status path routing/status disabled path routing/isis/lsdb Note that every time a new path is added the Octa agent has to be restarted. EOS CLI: management api gnmi transport grpc <NAME> shutdown no shutdown Bash: $ sudo killall Octa Alternatively agent Octa terminate can be used from EOS CLI as well. show management api models will list the Smash paths enabled/disabled e.g.: #show management api models provider smash path /Smash/bridging path /Smash/forwarding/status path /Smash/routing/isis/lsdb path /Smash/routing path /Smash/routing/status disabled provider sysdb gNMI per-RPC role authorizations Starting in EOS 4.24.1F it is possible to perform authorization of each RPC (i.e. GET, SET, SUBSCRIBE), if authorization requests is supplied as described above. During authorization, the OpenConfig agent will communicate with the AAA agent, allowing authorization policies or roles to permit or deny the new tokens OpenConfig.Get and OpenConfig.Set. For example, a role may be defined such as: role oc-read 10 permit command OpenConfig.Get A user which is assigned to this role would be allowed to issue a gNMI GET or SUBSCRIBE request, but not a SET request. Note that this is only available for gNMI. Enable AFT mapping By default, mapping of the FIB (forwarding information base) to the OpenConfig AFT (abstract forwarding table) model is disabled, as the volume of data can be large. Starting in EOS 4.25.1F it is possible to enable these mappings, for IPV4, IPV6, or both, as described below: management api models provider aft ipv4-unicast ipv6-unicast Note that prior to EOS 4.27 a restart of the gNMI agent is required, e.g.: agent Octa terminate or agent OpenConfig terminate (in case the eos-native provider is not enabled). Telemetry Timestamps Per the GNMI specification, the default timestamp field of a notification message is set to be the time at which the value of the underlying data source changes or when the reported event takes place. In order to facilitate integration in legacy environments oriented around polling style operations, an option to support overriding the timestamp field to the send-time is available. (as of 4.27.0F) Overriding the timestamp to send-time is applicable to all STREAM and POLL subscriptions. Configuration is outlined below. management api gnmi transport grpc <NAME> notification timestamp send-time If there's a need to return to the standards-oriented operation, the following mechanisms can be used to reset the behavior. no notification timestamp send-time default notification timestamp notification timestamp last-change-time Validation #show management api gnmi Octa: enabled Set persistence: enabled Transport: default Enabled: yes Server: running on port 6030, in default VRF SSL profile: none QoS DSCP: none Authorization required: no Accounting requests: no Certificate username authentication: no Notification timestamp: send time !! note: timestamp mode Listen addresses: :: Configuration Persistence By default, within EOS, the application of gNMI Set RPCs are not persisted to the startup-config . A copy running-config startup-config is required in order to save configuration updates imposed via gNMI. As of EOS 4.28.0F, if the operator desires to be able to save gNMI-driven configuration automatically, persistence can be enabled by adding the following configuration. With this option, all gnmi Set operations will be saved to the startup-config . Note, the configuration is saved using Arista's EOS configuration syntax and there is no corresponding presentation of the OpenConfig syntax. management api gnmi transport grpc <NAME> operation set persistence If there is a need to return to the default mode of gNMI configuration non-persistence, this can be disabled using the following commands. no operation set persistence default operation set persistence Validation #show management api gnmi Octa: enabled Set persistence: enabled !! note: persistence state Transport: default Enabled: yes Server: running on port 6030, in default VRF SSL profile: none QoS DSCP: none Authorization required: no Accounting requests: no Certificate username authentication: no Notification timestamp: last change time Listen addresses: :: Troubleshooting The OpenConfig agent handles all transports described above: gNMI, RESTCONF, and NETCONF. The agent log file is present at /var/log/agents/OpenConfig-{PID} . Lines that begin with E are errors. Debug logging can be enabled with a regular trace command. Here are a couple of examples: (config)#trace OpenConfig setting server/9 - For server (gNMI) traces (config)#trace OpenConfig setting */9 - For all traces with verbose setting similarly if Octa is enabled: (config)#trace Octa setting server/9 - For server (gNMI) traces (config)#trace Octa setting */9 - For all traces with verbose setting Limitations In EOS versions prior to 4.24.0F , not all Smash paths were accessible via Octa. Starting in EOS 4.24.0F configuring the Smash paths that Octa has access to will also affect OpenConfig. Enabling a Smash path for Octa can result in extra YANG paths being populated in OpenConfig. Disabling a Smash path can result in having some YANG paths missing in OpenConfig. The %<zone-id> optional suffix in YANG ietf:ipv4-address , and ietf:ipv6-address types are not supported. An OpenConfig client update/merge/replace request can erase config that is not modified by the incoming request. This happens if a config that is part of a certain mount point but not supported by OpenConfig is configured via CLI prior to the OpenConfig client update/merge/replace request is processed. Supported OpenConfig paths Please refer to the EOS Central TOIs to see the new list of paths supported per release. For convenience, supported paths may be found at: https://eos.arista.com/path-report . References / Resources The OpenConfig working group: http://openconfig.net/ Repository of gNMI specifications: https://github.com/openconfig/reference/","title":"OpenConfig"},{"location":"configuration/openconfig/#overview","text":"EOS supports the OpenConfig gNMI interface for device management.","title":"Overview"},{"location":"configuration/openconfig/#platform-compatibility","text":"All EOS flavors support OpenConfig (phyiscal, virtual, containerized, cloud).","title":"Platform compatibility"},{"location":"configuration/openconfig/#gnmi","text":"To start the gNMI server, which listens by default on TCP/6030 configure the gRPC transport under management api gnmi in the global config mode: Default VRF management api gnmi transport grpc openmgmt Non-default VRF management api gnmi transport grpc openmgmt vrf management Changing the port: management api gnmi transport grpc openmgmt port 5900 Apply ACL management api gnmi transport grpc openmgmt ip access-group ACCESS_GROUP Note, the ACL should be a standard ACL allowing hosts or subnets. Authenticate the connection with TLS management api gnmi transport grpc openmgmt ssl profile PROFILE Enable authorization of incoming requests management api gnmi transport grpc openmgmt authorization requests Status check #show management api gnmi Octa: No Enabled: Yes Server: running on port 6030, in default VRF SSL Profile: none QoS DSCP: none","title":"gNMI"},{"location":"configuration/openconfig/#octa","text":"The OpenConfig agent (gNMI API) can leverage the EOS state streaming agent's (TerminAttr) libraries, thus exposing EOS native paths. If Octa (OpenConfig + TerminAttr) is enabled then OpenConfig, in addition to accepting OpenConfig paths in gNMI get/subscribe requests, will also support EOS native paths (e.g. Sysdb/Smash paths). This feature was introduced in 4.22.1F . gNMI requests received by Octa are interpreted as either OpenConfig or TerminAttr requests, as follows. gNMI requests containing an origin of eos_native are processed as as native path requests. Requests lacking an origin of eos_native are treated as OpenConfig requests. A gNMI client that supports specification of an origin as part of the associated RPC is a requirement. Note support for sending GET/SUBSCRIBE requests to both an openconfig and an eos-native path in the same call is not yet supported.","title":"OCTA"},{"location":"configuration/openconfig/#how-to-enable-octa","text":"Octa can be enable by adding provider eos-native under management api gnmi SW(config-mgmt-api-gnmi)#provider eos-native Status check #show management api gnmi Octa: enabled Enabled: Yes Server: running on port 6030, in default VRF SSL Profile: none QoS DSCP: none","title":"How to enable Octa"},{"location":"configuration/openconfig/#api-models","text":"Starting in EOS 4.24.0F it is possible to configure the Smash paths that Octa has access to. Under the management api models mode, the provider smash sub-mode allows for enabling or disabling a Smash path with the [no] path smash_path_here [disabled] command. management api models provider smash path forwarding/status path routing/status disabled path routing/isis/lsdb Note that every time a new path is added the Octa agent has to be restarted. EOS CLI: management api gnmi transport grpc <NAME> shutdown no shutdown Bash: $ sudo killall Octa Alternatively agent Octa terminate can be used from EOS CLI as well. show management api models will list the Smash paths enabled/disabled e.g.: #show management api models provider smash path /Smash/bridging path /Smash/forwarding/status path /Smash/routing/isis/lsdb path /Smash/routing path /Smash/routing/status disabled provider sysdb","title":"API models"},{"location":"configuration/openconfig/#gnmi-per-rpc-role-authorizations","text":"Starting in EOS 4.24.1F it is possible to perform authorization of each RPC (i.e. GET, SET, SUBSCRIBE), if authorization requests is supplied as described above. During authorization, the OpenConfig agent will communicate with the AAA agent, allowing authorization policies or roles to permit or deny the new tokens OpenConfig.Get and OpenConfig.Set. For example, a role may be defined such as: role oc-read 10 permit command OpenConfig.Get A user which is assigned to this role would be allowed to issue a gNMI GET or SUBSCRIBE request, but not a SET request. Note that this is only available for gNMI.","title":"gNMI per-RPC role authorizations"},{"location":"configuration/openconfig/#enable-aft-mapping","text":"By default, mapping of the FIB (forwarding information base) to the OpenConfig AFT (abstract forwarding table) model is disabled, as the volume of data can be large. Starting in EOS 4.25.1F it is possible to enable these mappings, for IPV4, IPV6, or both, as described below: management api models provider aft ipv4-unicast ipv6-unicast Note that prior to EOS 4.27 a restart of the gNMI agent is required, e.g.: agent Octa terminate or agent OpenConfig terminate (in case the eos-native provider is not enabled).","title":"Enable AFT mapping"},{"location":"configuration/openconfig/#telemetry-timestamps","text":"Per the GNMI specification, the default timestamp field of a notification message is set to be the time at which the value of the underlying data source changes or when the reported event takes place. In order to facilitate integration in legacy environments oriented around polling style operations, an option to support overriding the timestamp field to the send-time is available. (as of 4.27.0F) Overriding the timestamp to send-time is applicable to all STREAM and POLL subscriptions. Configuration is outlined below. management api gnmi transport grpc <NAME> notification timestamp send-time If there's a need to return to the standards-oriented operation, the following mechanisms can be used to reset the behavior. no notification timestamp send-time default notification timestamp notification timestamp last-change-time Validation #show management api gnmi Octa: enabled Set persistence: enabled Transport: default Enabled: yes Server: running on port 6030, in default VRF SSL profile: none QoS DSCP: none Authorization required: no Accounting requests: no Certificate username authentication: no Notification timestamp: send time !! note: timestamp mode Listen addresses: ::","title":"Telemetry Timestamps"},{"location":"configuration/openconfig/#configuration-persistence","text":"By default, within EOS, the application of gNMI Set RPCs are not persisted to the startup-config . A copy running-config startup-config is required in order to save configuration updates imposed via gNMI. As of EOS 4.28.0F, if the operator desires to be able to save gNMI-driven configuration automatically, persistence can be enabled by adding the following configuration. With this option, all gnmi Set operations will be saved to the startup-config . Note, the configuration is saved using Arista's EOS configuration syntax and there is no corresponding presentation of the OpenConfig syntax. management api gnmi transport grpc <NAME> operation set persistence If there is a need to return to the default mode of gNMI configuration non-persistence, this can be disabled using the following commands. no operation set persistence default operation set persistence Validation #show management api gnmi Octa: enabled Set persistence: enabled !! note: persistence state Transport: default Enabled: yes Server: running on port 6030, in default VRF SSL profile: none QoS DSCP: none Authorization required: no Accounting requests: no Certificate username authentication: no Notification timestamp: last change time Listen addresses: ::","title":"Configuration Persistence"},{"location":"configuration/openconfig/#troubleshooting","text":"The OpenConfig agent handles all transports described above: gNMI, RESTCONF, and NETCONF. The agent log file is present at /var/log/agents/OpenConfig-{PID} . Lines that begin with E are errors. Debug logging can be enabled with a regular trace command. Here are a couple of examples: (config)#trace OpenConfig setting server/9 - For server (gNMI) traces (config)#trace OpenConfig setting */9 - For all traces with verbose setting similarly if Octa is enabled: (config)#trace Octa setting server/9 - For server (gNMI) traces (config)#trace Octa setting */9 - For all traces with verbose setting","title":"Troubleshooting"},{"location":"configuration/openconfig/#limitations","text":"In EOS versions prior to 4.24.0F , not all Smash paths were accessible via Octa. Starting in EOS 4.24.0F configuring the Smash paths that Octa has access to will also affect OpenConfig. Enabling a Smash path for Octa can result in extra YANG paths being populated in OpenConfig. Disabling a Smash path can result in having some YANG paths missing in OpenConfig. The %<zone-id> optional suffix in YANG ietf:ipv4-address , and ietf:ipv6-address types are not supported. An OpenConfig client update/merge/replace request can erase config that is not modified by the incoming request. This happens if a config that is part of a certain mount point but not supported by OpenConfig is configured via CLI prior to the OpenConfig client update/merge/replace request is processed.","title":"Limitations"},{"location":"configuration/openconfig/#supported-openconfig-paths","text":"Please refer to the EOS Central TOIs to see the new list of paths supported per release. For convenience, supported paths may be found at: https://eos.arista.com/path-report .","title":"Supported OpenConfig paths"},{"location":"configuration/openconfig/#references-resources","text":"The OpenConfig working group: http://openconfig.net/ Repository of gNMI specifications: https://github.com/openconfig/reference/","title":"References / Resources"},{"location":"configuration/restconf/","text":"Overview EOS provides support for RESTCONF and the necessary transport services to support it. The RESTCONF server is in the EOS device. RESTCONF configuration on EOS Certificate Certificate-based authentication is required for RESTCONF to operate. You should follow the instructions in the Certificate Authentication section in order to generate and install a certificate to support RESTCONF in your environment. Alternately, a self-signed certificate may be generated on the switch and certificate validation can be handled appropriately by remote RESTCONF clients. The following Cli command generates a self-signed cert: security pki certificate generate self-signed restconf.crt key restconf.key generate rsa 2048 parameters common-name restconf Create ssl profile: management security ssl profile restconf certificate restconf.crt key restconf.key RESTCONF API Configure RESTCONF: Default VRF: management api restconf transport https test ssl profile restconf Non-default VRF management api restconf transport https test ssl profile restconf vrf management Changing the port: management api restconf transport https test port 5900 Apply ACL management api restconf transport https test ip access-group ACCESS_GROUP Note The ACL should be a standard ACL allowing hosts or subnets. Control-plane ACL The default RESTCONF port on Arista devices is TCP 6020. We need to change the default control-plane ACL on EOS in order to allow TCP 6020 (or to allow the configured RESTCONF port). Please refer to this link Status check #show management api restconf Enabled: Yes Server: running on port 6020, in management VRF SSL Profile: restconf QoS DSCP: none","title":"RESTCONF"},{"location":"configuration/restconf/#overview","text":"EOS provides support for RESTCONF and the necessary transport services to support it. The RESTCONF server is in the EOS device.","title":"Overview"},{"location":"configuration/restconf/#restconf-configuration-on-eos","text":"","title":"RESTCONF configuration on EOS"},{"location":"configuration/restconf/#certificate","text":"Certificate-based authentication is required for RESTCONF to operate. You should follow the instructions in the Certificate Authentication section in order to generate and install a certificate to support RESTCONF in your environment. Alternately, a self-signed certificate may be generated on the switch and certificate validation can be handled appropriately by remote RESTCONF clients. The following Cli command generates a self-signed cert: security pki certificate generate self-signed restconf.crt key restconf.key generate rsa 2048 parameters common-name restconf Create ssl profile: management security ssl profile restconf certificate restconf.crt key restconf.key","title":"Certificate"},{"location":"configuration/restconf/#restconf-api","text":"Configure RESTCONF: Default VRF: management api restconf transport https test ssl profile restconf Non-default VRF management api restconf transport https test ssl profile restconf vrf management Changing the port: management api restconf transport https test port 5900 Apply ACL management api restconf transport https test ip access-group ACCESS_GROUP Note The ACL should be a standard ACL allowing hosts or subnets.","title":"RESTCONF API"},{"location":"configuration/restconf/#control-plane-acl","text":"The default RESTCONF port on Arista devices is TCP 6020. We need to change the default control-plane ACL on EOS in order to allow TCP 6020 (or to allow the configured RESTCONF port). Please refer to this link","title":"Control-plane ACL"},{"location":"configuration/restconf/#status-check","text":"#show management api restconf Enabled: Yes Server: running on port 6020, in management VRF SSL Profile: restconf QoS DSCP: none","title":"Status check"},{"location":"configuration/security/","text":"Changing Default Service Ports When changing the default ports one has to make sure they are also allowed in the control-plane ACL. The default control-plane ACL cannot be modified, so a new one has to be created and applied under system control-plane (EOS 4.23+ ) or control-plane (pre-EOS 4.23 ). The fastest way to do this is to clone the existing control-plane and add new permit rules. Example 1. Reading the default CP ACL can be done with show ip access-lists default-control-plane-acl #show ip access-lists default-control-plane-acl IP Access List default-control-plane-acl [readonly] counters per-entry 10 permit icmp any any [match 7172 packets, 1 day, 20:46:09 ago] 20 permit ip any any tracked [match 98544013 packets, 0:00:36 ago] 30 permit udp any any eq bfd ttl eq 255 40 permit udp any any eq bfd-echo ttl eq 254 50 permit udp any any eq multihop-bfd 60 permit udp any any eq micro-bfd 70 permit udp any any eq sbfd 80 permit udp any eq sbfd any eq sbfd-initiator 90 permit ospf any any 100 permit tcp any any eq ssh telnet www snmp bgp https msdp ldp netconf-ssh gnmi [match 873 packets, 1 day, 20:43:39 ago] 110 permit udp any any eq bootps bootpc snmp rip ntp ldp [match 970 packets, 1:43:38 ago] 120 permit tcp any any eq mlag ttl eq 255 130 permit udp any any eq mlag ttl eq 255 140 permit vrrp any any 150 permit ahp any any 160 permit pim any any 170 permit igmp any any 180 permit tcp any any range 5900 5910 190 permit tcp any any range 50000 50100 [match 1480505 packets, 1 day, 20:43:16 ago] 200 permit udp any any range 51000 51100 210 permit tcp any any eq 3333 220 permit tcp any any eq nat ttl eq 255 230 permit tcp any eq bgp any 240 permit rsvp any any 250 permit tcp any any eq 6040 260 permit tcp any any eq 5541 ttl eq 255 270 permit tcp any any eq 5542 ttl eq 255 2. There are multiple ways to quickly edit and remove the unnecessary match outputs, in this example we'll use sed on EOS. Save the file to /mnt/flash : show ip access-lists default-control-plane-acl | redirect flash:cpacl.txt 3. Enter bash: #bash 4. Go to /mnt/flash and remove the match outputs cd /mnt/flash sudo sed -i \"s/\\[.*//g\" cpacl.txt 5. Reading the file now should be clean without all the match counter outputs like below: IP Access List default-control-plane-acl counters per-entry 10 permit icmp any any 20 permit ip any any tracked 30 permit udp any any eq bfd ttl eq 255 40 permit udp any any eq bfd-echo ttl eq 254 50 permit udp any any eq multihop-bfd 60 permit udp any any eq micro-bfd 70 permit udp any any eq sbfd 80 permit udp any eq sbfd any eq sbfd-initiator 90 permit ospf any any 100 permit tcp any any eq ssh telnet www snmp bgp https msdp ldp netconf-ssh gnmi 110 permit udp any any eq bootps bootpc snmp rip ntp ldp 120 permit tcp any any eq mlag ttl eq 255 130 permit udp any any eq mlag ttl eq 255 140 permit vrrp any any 150 permit ahp any any 160 permit pim any any 170 permit igmp any any 180 permit tcp any any range 5900 5910 190 permit tcp any any range 50000 50100 200 permit udp any any range 51000 51100 210 permit tcp any any eq 3333 220 permit tcp any any eq nat ttl eq 255 230 permit tcp any eq bgp any 240 permit rsvp any any 250 permit tcp any any eq 6040 260 permit tcp any any eq 5541 ttl eq 255 270 permit tcp any any eq 5542 ttl eq 255 6. Now we can just copy that ACLs content into a new ACL, add our new rules and apply it on the control-plane. From config mode: ip access-list custom-cp <paste the content of the default CP from the file created> 280 permit tcp any any eq 5900 7. Apply the new ACL Default VRF system control-plane ip access-group custom-cp in Non-default VRF system control-plane ip access-group custom-cp vrf management in","title":"Security Configuration"},{"location":"configuration/security/#changing-default-service-ports","text":"When changing the default ports one has to make sure they are also allowed in the control-plane ACL. The default control-plane ACL cannot be modified, so a new one has to be created and applied under system control-plane (EOS 4.23+ ) or control-plane (pre-EOS 4.23 ). The fastest way to do this is to clone the existing control-plane and add new permit rules.","title":"Changing Default Service Ports"},{"location":"configuration/security/#example","text":"1. Reading the default CP ACL can be done with show ip access-lists default-control-plane-acl #show ip access-lists default-control-plane-acl IP Access List default-control-plane-acl [readonly] counters per-entry 10 permit icmp any any [match 7172 packets, 1 day, 20:46:09 ago] 20 permit ip any any tracked [match 98544013 packets, 0:00:36 ago] 30 permit udp any any eq bfd ttl eq 255 40 permit udp any any eq bfd-echo ttl eq 254 50 permit udp any any eq multihop-bfd 60 permit udp any any eq micro-bfd 70 permit udp any any eq sbfd 80 permit udp any eq sbfd any eq sbfd-initiator 90 permit ospf any any 100 permit tcp any any eq ssh telnet www snmp bgp https msdp ldp netconf-ssh gnmi [match 873 packets, 1 day, 20:43:39 ago] 110 permit udp any any eq bootps bootpc snmp rip ntp ldp [match 970 packets, 1:43:38 ago] 120 permit tcp any any eq mlag ttl eq 255 130 permit udp any any eq mlag ttl eq 255 140 permit vrrp any any 150 permit ahp any any 160 permit pim any any 170 permit igmp any any 180 permit tcp any any range 5900 5910 190 permit tcp any any range 50000 50100 [match 1480505 packets, 1 day, 20:43:16 ago] 200 permit udp any any range 51000 51100 210 permit tcp any any eq 3333 220 permit tcp any any eq nat ttl eq 255 230 permit tcp any eq bgp any 240 permit rsvp any any 250 permit tcp any any eq 6040 260 permit tcp any any eq 5541 ttl eq 255 270 permit tcp any any eq 5542 ttl eq 255 2. There are multiple ways to quickly edit and remove the unnecessary match outputs, in this example we'll use sed on EOS. Save the file to /mnt/flash : show ip access-lists default-control-plane-acl | redirect flash:cpacl.txt 3. Enter bash: #bash 4. Go to /mnt/flash and remove the match outputs cd /mnt/flash sudo sed -i \"s/\\[.*//g\" cpacl.txt 5. Reading the file now should be clean without all the match counter outputs like below: IP Access List default-control-plane-acl counters per-entry 10 permit icmp any any 20 permit ip any any tracked 30 permit udp any any eq bfd ttl eq 255 40 permit udp any any eq bfd-echo ttl eq 254 50 permit udp any any eq multihop-bfd 60 permit udp any any eq micro-bfd 70 permit udp any any eq sbfd 80 permit udp any eq sbfd any eq sbfd-initiator 90 permit ospf any any 100 permit tcp any any eq ssh telnet www snmp bgp https msdp ldp netconf-ssh gnmi 110 permit udp any any eq bootps bootpc snmp rip ntp ldp 120 permit tcp any any eq mlag ttl eq 255 130 permit udp any any eq mlag ttl eq 255 140 permit vrrp any any 150 permit ahp any any 160 permit pim any any 170 permit igmp any any 180 permit tcp any any range 5900 5910 190 permit tcp any any range 50000 50100 200 permit udp any any range 51000 51100 210 permit tcp any any eq 3333 220 permit tcp any any eq nat ttl eq 255 230 permit tcp any eq bgp any 240 permit rsvp any any 250 permit tcp any any eq 6040 260 permit tcp any any eq 5541 ttl eq 255 270 permit tcp any any eq 5542 ttl eq 255 6. Now we can just copy that ACLs content into a new ACL, add our new rules and apply it on the control-plane. From config mode: ip access-list custom-cp <paste the content of the default CP from the file created> 280 permit tcp any any eq 5900 7. Apply the new ACL Default VRF system control-plane ip access-group custom-cp in Non-default VRF system control-plane ip access-group custom-cp vrf management in","title":"Example"},{"location":"examples/","text":"Overview In the examples folder we provide a variety of examples that will show how to use some of the many third party tools to interact with one of the GRPC interfaces(gNMI,gNOI and gRIBI) within Arista EOS. Tools arista gnmi client gnmic gnmi-gateway gnoic grpcurl golang pygnmi pyang pyangbind WiFi","title":"examples"},{"location":"examples/#overview","text":"In the examples folder we provide a variety of examples that will show how to use some of the many third party tools to interact with one of the GRPC interfaces(gNMI,gNOI and gRIBI) within Arista EOS.","title":"Overview"},{"location":"examples/#tools","text":"arista gnmi client gnmic gnmi-gateway gnoic grpcurl golang pygnmi pyang pyangbind WiFi","title":"Tools"},{"location":"examples/WiFi/","text":"Overview Arista APs include an agent module (ocagent) that implements the OpenConfig interfaces. The agent module interacts with the rest of the AP modules for applying changes, fetching data, etc. For mor information on OpenConfig implementation in Arista WiFi, see OpenConfig for Arista WiFi. This page lists a few examples of the AP using gNMI. For more information on gNxI, refer to gNxI Tools. Get AP python py_gnmicli.py -m get -t <AP-IP> -x /provision-aps -user <username> -pass <password> -p <port> -g -o openconfig.mojonetworks.com Reveal output { \"openconfig-ap-manager:provision-ap\": [ { \"mac\": \"30:86:2D:B0:0F:EF\", \"config\": { \"country-code\": \"IN\", \"hostname\": \"arista\" }, \"state\": { \"country-code\": \"IN\", \"hostname\": \"arista\" } } ] } Get operating frequencies (bands) of SSID python py_gnmicli.py -m get -t <AP-IP> -user <username> -pass <password> -p <port> -g -o openconfig.mojonetworks.com -x access-points/access-point[hostname=<host>]/ssids/ssid[name=<ssid-name>]/state/operating-frequency Reveal output FREQ_2_5_GHZ Get SSID Configuration python py_gnmicli.py -m get -t <AP-IP> -user <username> -pass <password> -p <port> -g -o openconfig.mojonetworks.com -x access-points/access-point[hostname=<host>]/ssids/ssid[name=<ssid-name>]/config Reveal output { \"openconfig-access-points:dva\": true, \"openconfig-access-points:supported-data-rates-5g\": [ \"openconfig-wifi-types:RATE_11MB\", \"openconfig-wifi-types:RATE_12MB\", \"openconfig-wifi-types:RATE_18MB\", \"openconfig-wifi-types:RATE_24MB\", \"openconfig-wifi-types:RATE_36MB\", \"openconfig-wifi-types:RATE_48MB\", \"openconfig-wifi-types:RATE_54MB\" ], \"openconfig-access-points:opmode\": \"WPA2_PERSONAL\", \"openconfig-access-points:okc\": true, \"openconfig-access-points:supported-data-rates-2g\": [ \"openconfig-wifi-types:RATE_11MB\", \"openconfig-wifi-types:RATE_12MB\", \"openconfig-wifi-types:RATE_18MB\", \"openconfig-wifi-types:RATE_24MB\", \"openconfig-wifi-types:RATE_36MB\", \"openconfig-wifi-types:RATE_48MB\", \"openconfig-wifi-types:RATE_54MB\" ], \"openconfig-access-points:name\": \"OCWiFi1\", \"openconfig-access-points:basic-data-rates-2g\": [ \"openconfig-wifi-types:RATE_11MB\", \"openconfig-wifi-types:RATE_12MB\", \"openconfig-wifi-types:RATE_18MB\", \"openconfig-wifi-types:RATE_24MB\", \"openconfig-wifi-types:RATE_36MB\", \"openconfig-wifi-types:RATE_48MB\", \"openconfig-wifi-types:RATE_54MB\" ], \"openconfig-access-points:wpa2-psk\": \"0123456789\", \"openconfig-access-points:basic-data-rates-5g\": [ \"openconfig-wifi-types:RATE_11MB\", \"openconfig-wifi-types:RATE_12MB\", \"openconfig-wifi-types:RATE_18MB\", \"openconfig-wifi-types:RATE_24MB\", \"openconfig-wifi-types:RATE_36MB\", \"openconfig-wifi-types:RATE_48MB\", \"openconfig-wifi-types:RATE_54MB\" ] } Get clients for SSID python py_gnmicli.py -m get -t <AP-IP> -user <username> -pass <password> -p <port> -g -o openconfig.mojonetworks.com -x access-points/access-point[hostname=<host>]/ssids/ssid[name=<ssid-name>]/clients Reveal output { \"openconfig-access-points:client\": [ { \"mac\": \"C2:2F:42:79:CB:BA\", \"client-rf\": { \"state\": { \"phy-rate\": 0, \"rssi\": -52, \"frequency\": 0, \"snr\": 42, \"ss\": 0 } }, \"state\": { \"mac\": \"C2:2F:42:79:CB:BA\", \"counters\": { \"tx-bytes\": \"34707\", \"tx-retries\": \"0\", \"rx-bytes\": \"19705\", \"rx-retries\": \"18\" } }, \"client-connection\": { \"state\": { \"username\": \"\", \"client-state\": \"openconfig-wifi-types:AUTHENTICATED\", \"hostname\": \"\", \"operating-system\": \"\", \"ipv6-addresses\": [ \"fe80::c02f:42ff:fe79:cbba\" ], \"ipv4-address\": [ \"192.168.29.250\" ], \"connection-time\": \"1628849487411018113\" } } } ] } Get operating channel of radio python py_gnmicli.py -m get -t <AP-IP> -user <username> -pass <password> -p <port> -g -o openconfig.mojonetworks.com -x access-points/access-point[hostname=<host>]/radios/radio[id=1][operating-frequency=FREQ_5GHZ]/state/channel Reveal output { timestamp: 1628855017049472718 update { path { elem { name: \"access-points\" } elem { name: \"access-point\" key { key: \"hostname\" value: \"arista\" } } elem { name: \"radios\" } elem { name: \"radio\" key { key: \"id\" value: \"1\" } key { key: \"operating-frequency\" value: \"FREQ_5GHZ\" } } elem { name: \"state\" } elem { name: \"channel\" } } val { uint_val: 36 } } } Get operating EIRP of radio python py_gnmicli.py -m get -t <AP-IP> -user <username> -pass <password> -p <port> -g -o openconfig.mojonetworks.com -x access-points/access-point[hostname=<host>]/radios/radio[id=1][operating-frequency=FREQ_5GHZ]/state/transmit-eirp Reveal output { timestamp: 1628855017049472718 update { path { elem { name: \"access-points\" } elem { name: \"access-point\" key { key: \"hostname\" value: \"arista\" } } elem { name: \"radios\" } elem { name: \"radio\" key { key: \"id\" value: \"1\" } key { key: \"operating-frequency\" value: \"FREQ_5GHZ\" } } elem { name: \"state\" } elem { name: \"transmit-eirp\" } } val { uint_val: 28 } } } Set operating channel of radio python py_gnmicli.py -m set-replace-t <AP-IP> -user <username> -pass <password> -p <port> -g -o openconfig.mojonetworks.com -x access-points/access-point[hostname=<host>]/radios/radio[id=1][operating-frequency=FREQ_5GHZ]/config/channel -val 169 Reveal output response { path { elem { name: \"access-points\" } elem { name: \"access-point\" key { key: \"hostname\" value: \"arista\" } } elem { name: \"radios\" } elem { name: \"radio\" key { key: \"id\" value: \"1\" } key { key: \"operating-frequency\" value: \"FREQ_5GHZ\" } } elem { name: \"config\" } elem { name: \"channel\" } } op: REPLACE }","title":"WiFi"},{"location":"examples/WiFi/#overview","text":"Arista APs include an agent module (ocagent) that implements the OpenConfig interfaces. The agent module interacts with the rest of the AP modules for applying changes, fetching data, etc. For mor information on OpenConfig implementation in Arista WiFi, see OpenConfig for Arista WiFi. This page lists a few examples of the AP using gNMI. For more information on gNxI, refer to gNxI Tools.","title":"Overview"},{"location":"examples/WiFi/#get-ap","text":"python py_gnmicli.py -m get -t <AP-IP> -x /provision-aps -user <username> -pass <password> -p <port> -g -o openconfig.mojonetworks.com Reveal output { \"openconfig-ap-manager:provision-ap\": [ { \"mac\": \"30:86:2D:B0:0F:EF\", \"config\": { \"country-code\": \"IN\", \"hostname\": \"arista\" }, \"state\": { \"country-code\": \"IN\", \"hostname\": \"arista\" } } ] }","title":"Get AP"},{"location":"examples/WiFi/#get-operating-frequencies-bands-of-ssid","text":"python py_gnmicli.py -m get -t <AP-IP> -user <username> -pass <password> -p <port> -g -o openconfig.mojonetworks.com -x access-points/access-point[hostname=<host>]/ssids/ssid[name=<ssid-name>]/state/operating-frequency Reveal output FREQ_2_5_GHZ","title":"Get operating frequencies (bands) of SSID"},{"location":"examples/WiFi/#get-ssid-configuration","text":"python py_gnmicli.py -m get -t <AP-IP> -user <username> -pass <password> -p <port> -g -o openconfig.mojonetworks.com -x access-points/access-point[hostname=<host>]/ssids/ssid[name=<ssid-name>]/config Reveal output { \"openconfig-access-points:dva\": true, \"openconfig-access-points:supported-data-rates-5g\": [ \"openconfig-wifi-types:RATE_11MB\", \"openconfig-wifi-types:RATE_12MB\", \"openconfig-wifi-types:RATE_18MB\", \"openconfig-wifi-types:RATE_24MB\", \"openconfig-wifi-types:RATE_36MB\", \"openconfig-wifi-types:RATE_48MB\", \"openconfig-wifi-types:RATE_54MB\" ], \"openconfig-access-points:opmode\": \"WPA2_PERSONAL\", \"openconfig-access-points:okc\": true, \"openconfig-access-points:supported-data-rates-2g\": [ \"openconfig-wifi-types:RATE_11MB\", \"openconfig-wifi-types:RATE_12MB\", \"openconfig-wifi-types:RATE_18MB\", \"openconfig-wifi-types:RATE_24MB\", \"openconfig-wifi-types:RATE_36MB\", \"openconfig-wifi-types:RATE_48MB\", \"openconfig-wifi-types:RATE_54MB\" ], \"openconfig-access-points:name\": \"OCWiFi1\", \"openconfig-access-points:basic-data-rates-2g\": [ \"openconfig-wifi-types:RATE_11MB\", \"openconfig-wifi-types:RATE_12MB\", \"openconfig-wifi-types:RATE_18MB\", \"openconfig-wifi-types:RATE_24MB\", \"openconfig-wifi-types:RATE_36MB\", \"openconfig-wifi-types:RATE_48MB\", \"openconfig-wifi-types:RATE_54MB\" ], \"openconfig-access-points:wpa2-psk\": \"0123456789\", \"openconfig-access-points:basic-data-rates-5g\": [ \"openconfig-wifi-types:RATE_11MB\", \"openconfig-wifi-types:RATE_12MB\", \"openconfig-wifi-types:RATE_18MB\", \"openconfig-wifi-types:RATE_24MB\", \"openconfig-wifi-types:RATE_36MB\", \"openconfig-wifi-types:RATE_48MB\", \"openconfig-wifi-types:RATE_54MB\" ] }","title":"Get SSID Configuration"},{"location":"examples/WiFi/#get-clients-for-ssid","text":"python py_gnmicli.py -m get -t <AP-IP> -user <username> -pass <password> -p <port> -g -o openconfig.mojonetworks.com -x access-points/access-point[hostname=<host>]/ssids/ssid[name=<ssid-name>]/clients Reveal output { \"openconfig-access-points:client\": [ { \"mac\": \"C2:2F:42:79:CB:BA\", \"client-rf\": { \"state\": { \"phy-rate\": 0, \"rssi\": -52, \"frequency\": 0, \"snr\": 42, \"ss\": 0 } }, \"state\": { \"mac\": \"C2:2F:42:79:CB:BA\", \"counters\": { \"tx-bytes\": \"34707\", \"tx-retries\": \"0\", \"rx-bytes\": \"19705\", \"rx-retries\": \"18\" } }, \"client-connection\": { \"state\": { \"username\": \"\", \"client-state\": \"openconfig-wifi-types:AUTHENTICATED\", \"hostname\": \"\", \"operating-system\": \"\", \"ipv6-addresses\": [ \"fe80::c02f:42ff:fe79:cbba\" ], \"ipv4-address\": [ \"192.168.29.250\" ], \"connection-time\": \"1628849487411018113\" } } } ] }","title":"Get clients for SSID"},{"location":"examples/WiFi/#get-operating-channel-of-radio","text":"python py_gnmicli.py -m get -t <AP-IP> -user <username> -pass <password> -p <port> -g -o openconfig.mojonetworks.com -x access-points/access-point[hostname=<host>]/radios/radio[id=1][operating-frequency=FREQ_5GHZ]/state/channel Reveal output { timestamp: 1628855017049472718 update { path { elem { name: \"access-points\" } elem { name: \"access-point\" key { key: \"hostname\" value: \"arista\" } } elem { name: \"radios\" } elem { name: \"radio\" key { key: \"id\" value: \"1\" } key { key: \"operating-frequency\" value: \"FREQ_5GHZ\" } } elem { name: \"state\" } elem { name: \"channel\" } } val { uint_val: 36 } } }","title":"Get operating channel of radio"},{"location":"examples/WiFi/#get-operating-eirp-of-radio","text":"python py_gnmicli.py -m get -t <AP-IP> -user <username> -pass <password> -p <port> -g -o openconfig.mojonetworks.com -x access-points/access-point[hostname=<host>]/radios/radio[id=1][operating-frequency=FREQ_5GHZ]/state/transmit-eirp Reveal output { timestamp: 1628855017049472718 update { path { elem { name: \"access-points\" } elem { name: \"access-point\" key { key: \"hostname\" value: \"arista\" } } elem { name: \"radios\" } elem { name: \"radio\" key { key: \"id\" value: \"1\" } key { key: \"operating-frequency\" value: \"FREQ_5GHZ\" } } elem { name: \"state\" } elem { name: \"transmit-eirp\" } } val { uint_val: 28 } } }","title":"Get operating EIRP of radio"},{"location":"examples/WiFi/#set-operating-channel-of-radio","text":"python py_gnmicli.py -m set-replace-t <AP-IP> -user <username> -pass <password> -p <port> -g -o openconfig.mojonetworks.com -x access-points/access-point[hostname=<host>]/radios/radio[id=1][operating-frequency=FREQ_5GHZ]/config/channel -val 169 Reveal output response { path { elem { name: \"access-points\" } elem { name: \"access-point\" key { key: \"hostname\" value: \"arista\" } } elem { name: \"radios\" } elem { name: \"radio\" key { key: \"id\" value: \"1\" } key { key: \"operating-frequency\" value: \"FREQ_5GHZ\" } } elem { name: \"config\" } elem { name: \"channel\" } } op: REPLACE }","title":"Set operating channel of radio"},{"location":"examples/ansible/","text":"overview In this ansible collection we show how to use ansible to find all the available modules within an Arista EOS device using the capabilities method within gNMI. Edit the inventory file to match your environment [leaf] 127.0.0.1 ansible_user=admin ansible_password=admin [all:vars] ansible_user=admin ansible_password=admin ansible_become_pass=admin ansible_python_interpreter=/usr/bin/python3 ansible_port=6030 ansible_connection=nokia.grpc.gnmi ansible_gnmi_encoding=JSON gNMI collection ansible-galaxy collection install nokia.openconfig Run the playbook ansible-playbook -i inventory capabilities.yaml output of playbook ok: [10.20.30.67] => { \"msg\": { \"gNMIVersion\": \"0.7.0\", \"supportedEncodings\": [ \"JSON\", \"JSON_IETF\", \"ASCII\" ], \"supportedModels\": [ { \"name\": \"arista-exp-eos-multicast\", \"organization\": \"Arista Networks <http://arista.com/>\" }, { \"name\": \"arista-exp-eos-evpn\", \"organization\": \"Arista Networks, Inc.\" },","title":"Ansible"},{"location":"examples/ansible/#overview","text":"In this ansible collection we show how to use ansible to find all the available modules within an Arista EOS device using the capabilities method within gNMI.","title":"overview"},{"location":"examples/ansible/#edit-the-inventory-file-to-match-your-environment","text":"[leaf] 127.0.0.1 ansible_user=admin ansible_password=admin [all:vars] ansible_user=admin ansible_password=admin ansible_become_pass=admin ansible_python_interpreter=/usr/bin/python3 ansible_port=6030 ansible_connection=nokia.grpc.gnmi ansible_gnmi_encoding=JSON","title":"Edit the inventory file to match your environment"},{"location":"examples/ansible/#gnmi-collection","text":"ansible-galaxy collection install nokia.openconfig","title":"gNMI collection"},{"location":"examples/ansible/#run-the-playbook","text":"ansible-playbook -i inventory capabilities.yaml","title":"Run the playbook"},{"location":"examples/ansible/#output-of-playbook","text":"ok: [10.20.30.67] => { \"msg\": { \"gNMIVersion\": \"0.7.0\", \"supportedEncodings\": [ \"JSON\", \"JSON_IETF\", \"ASCII\" ], \"supportedModels\": [ { \"name\": \"arista-exp-eos-multicast\", \"organization\": \"Arista Networks <http://arista.com/>\" }, { \"name\": \"arista-exp-eos-evpn\", \"organization\": \"Arista Networks, Inc.\" },","title":"output of playbook"},{"location":"examples/gnmi-clients/arista-gnmi/","text":"gNMI GET RPC Examples OpenConfig paths Get all information gnmi -addr 192.0.2.139:6030 -username admin -password arista get / Get the BGP configuration in the default VRF gnmi -addr 198.51.100.219:6030 -username admin -password arista \\ get '/network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp'` Reveal output /network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp: { \"openconfig-network-instance:global\": { \"confederation\": { \"config\": { \"identifier\": 0 }, \"state\": {p \"identifier\": 0 } }, \"config\": { \"as\": 4206000022, \"router-id\": \"0.0.0.0\" }, \"default-route-distance\": { \"config\": { \"external-route-distance\": 200, \"internal-route-distance\": 200 }, \"state\": { \"external-route-distance\": 200, \"internal-route-distance\": 200 } }, \"graceful-restart\": { \"config\": { \"restart-time\": 0 }, \"state\": { \"restart-time\": 0 } }, \"route-selection-options\": { \"config\": {}, \"state\": {} }, \"state\": { \"as\": 4206000022, \"router-id\": \"4.4.4.4\" } }, \"openconfig-network-instance:neighbors\": { \"neighbor\": [ { \"afi-safis\": { \"afi-safi\": [ { \"afi-safi-name\": \"IPV4_UNICAST\", \"config\": { \"afi-safi-name\": \"IPV4_UNICAST\", \"enabled\": false }, \"graceful-restart\": { \"config\": { \"enabled\": false }, \"state\": { \"enabled\": false } }, \"state\": { \"afi-safi-name\": \"IPV4_UNICAST\", \"enabled\": false } }, { \"afi-safi-name\": \"IPV6_UNICAST\", \"config\": { \"afi-safi-name\": \"IPV6_UNICAST\", \"enabled\": false }, \"graceful-restart\": { \"config\": { \"enabled\": false }, \"state\": { \"enabled\": false } }, \"state\": { \"afi-safi-name\": \"IPV6_UNICAST\", \"enabled\": false } } ] }, \"config\": { \"auth-password\": \"\", \"description\": \"\", \"local-as\": 0, \"neighbor-address\": \"3.4.5.6\", \"peer-as\": 1, \"send-community\": \"NONE\" }, \"ebgp-multihop\": { \"config\": { \"multihop-ttl\": 0 }, \"state\": { \"multihop-ttl\": 0 } }, \"neighbor-address\": \"3.4.5.6\", \"route-reflector\": { \"config\": { \"route-reflector-client\": false }, \"state\": { \"route-reflector-client\": false } }, \"state\": { \"auth-password\": \"\", \"description\": \"\", \"local-as\": 0, \"peer-as\": 1, \"send-community\": \"NONE\" }, \"timers\": { \"config\": { \"hold-time\": \"180.0\", \"keepalive-interval\": \"60.0\" }, \"state\": { \"hold-time\": \"180.0\", \"keepalive-interval\": \"60.0\" } }, \"transport\": { \"config\": { \"passive-mode\": false }, \"state\": { \"passive-mode\": false } } }, { \"afi-safis\": { \"afi-safi\": [ { \"afi-safi-name\": \"IPV4_UNICAST\", \"config\": { \"afi-safi-name\": \"IPV4_UNICAST\", \"enabled\": false }, \"graceful-restart\": { \"config\": { \"enabled\": false }, \"state\": { \"enabled\": false } }, \"state\": { \"afi-safi-name\": \"IPV4_UNICAST\", \"enabled\": false } }, { \"afi-safi-name\": \"IPV6_UNICAST\", \"config\": { \"afi-safi-name\": \"IPV6_UNICAST\", \"enabled\": false }, \"graceful-restart\": { \"config\": { \"enabled\": false }, \"state\": { \"enabled\": false } }, \"state\": { \"afi-safi-name\": \"IPV6_UNICAST\", \"enabled\": false } } ] }, \"config\": { \"auth-password\": \"\", \"description\": \"\", \"local-as\": 0, \"neighbor-address\": \"20.1.1.1\", \"peer-as\": 65001, \"send-community\": \"NONE\" }, \"ebgp-multihop\": { \"config\": { \"multihop-ttl\": 0 }, \"state\": { \"multihop-ttl\": 0 } }, \"neighbor-address\": \"20.1.1.1\", \"route-reflector\": { \"config\": { \"route-reflector-client\": false }, \"state\": { \"route-reflector-client\": false } }, \"state\": { \"auth-password\": \"\", \"description\": \"\", \"local-as\": 0, \"peer-as\": 65001, \"send-community\": \"NONE\" }, \"timers\": { \"config\": { \"hold-time\": \"180.0\", \"keepalive-interval\": \"60.0\" }, \"state\": { \"hold-time\": \"180.0\", \"keepalive-interval\": \"60.0\" } }, \"transport\": { \"config\": { \"passive-mode\": false }, \"state\": { \"passive-mode\": false } } } ] } Get BGP neighbors gnmi -addr 192.0.2.139 -username admin \\ get '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors' Reveal output /network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors: { \"openconfig-network-instance:neighbor\": [ { \"afi-safis\": { \"afi-safi\": [ { \"afi-safi-name\": \"openconfig-bgp-types:IPV6_UNICAST\", \"config\": { \"afi-safi-name\": \"openconfig-bgp-types:IPV6_UNICAST\" }, \"state\": { \"afi-safi-name\": \"openconfig-bgp-types:IPV6_UNICAST\", \"prefixes\": { \"arista-bgp-augments:best-ecmp-paths\": 0, \"arista-bgp-augments:best-paths\": 0, \"installed\": 0, \"received\": 0, \"sent\": 0 } } }, { \"afi-safi-name\": \"openconfig-bgp-types:L2VPN_EVPN\", \"config\": { \"afi-safi-name\": \"openconfig-bgp-types:L2VPN_EVPN\" }, \"state\": { \"afi-safi-name\": \"openconfig-bgp-types:L2VPN_EVPN\", \"prefixes\": { \"arista-bgp-augments:best-ecmp-paths\": 0, \"arista-bgp-augments:best-paths\": 0, \"installed\": 0, \"received\": 0, \"sent\": 0 } } }, { \"afi-safi-name\": \"openconfig-bgp-types:IPV4_UNICAST\", \"config\": { \"afi-safi-name\": \"openconfig-bgp-types:IPV4_UNICAST\" }, \"state\": { \"afi-safi-name\": \"openconfig-bgp-types:IPV4_UNICAST\", \"prefixes\": { \"arista-bgp-augments:best-ecmp-paths\": 0, \"arista-bgp-augments:best-paths\": 0, \"installed\": 0, \"received\": 0, \"sent\": 0 } } } ] }, \"apply-policy\": { \"config\": { \"default-export-policy\": \"REJECT_ROUTE\", \"default-import-policy\": \"REJECT_ROUTE\" }, \"state\": { \"default-export-policy\": \"REJECT_ROUTE\", \"default-import-policy\": \"REJECT_ROUTE\" } }, \"as-path-options\": { \"config\": { \"replace-peer-as\": false }, \"state\": { \"replace-peer-as\": false } }, \"config\": { \"enabled\": true, \"neighbor-address\": \"172.168.14.2\", \"peer-as\": 65002, \"send-community\": \"NONE\" }, \"ebgp-multihop\": { \"config\": { \"enabled\": false, \"multihop-ttl\": 0 }, \"state\": { \"enabled\": false, \"multihop-ttl\": 0 } }, \"neighbor-address\": \"172.168.14.2\", \"state\": { \"enabled\": true, \"established-transitions\": \"2\", \"last-established\": \"1614170027122047488\", \"messages\": { \"received\": { \"UPDATE\": \"2\" }, \"sent\": { \"UPDATE\": \"2\" } }, \"neighbor-address\": \"172.168.14.2\", \"peer-as\": 65002, \"send-community\": \"NONE\", \"session-state\": \"ESTABLISHED\" }, \"transport\": { \"config\": { \"mtu-discovery\": true }, \"state\": { \"mtu-discovery\": true, \"remote-address\": \"172.168.14.2\", \"remote-port\": 0 } } } ] } Get all interface descriptions gnmi -addr 192.0.2.139:6030 -username admin -password arista \\ get '/interfaces/interface/subinterfaces/subinterface/state/description' /interfaces/interface[name=Ethernet3]/subinterfaces/subinterface[index=0]/state/description: SRV01 /interfaces/interface[name=Ethernet1]/subinterfaces/subinterface[index=0]/state/description: DCI /interfaces/interface[name=Ethernet2]/subinterfaces/subinterface[index=0]/state/description: To Spines Get an interface's description gnmi -addr 198.51.100.100:6030 -username admin -password arista \\ get 'interfaces/interface[name=Ethernet1/1]/subinterfaces/subinterface/state/description' /interfaces/interface[name=Ethernet1/1]/subinterfaces/subinterface[index=0]/state/description: \"Tyrion\" Get the operational status of all interfaces gnmi -addr 192.0.2.139:6030 -username admin -password arista \\ get 'interfaces/interface/state/oper-status'` Get all states of an interface gnmi -addr 192.0.2.139:6030 -username cvpadmin -password arista \\ get 'interfaces/interface[name=Ethernet24]/state/'` Reveal output /interfaces/interface[name=Ethernet24]/state: { \"openconfig-interfaces:admin-status\": \"UP\", \"openconfig-interfaces:counters\": { \"in-broadcast-pkts\": \"1\", \"in-discards\": \"0\", \"in-errors\": \"0\", \"in-fcs-errors\": \"0\", \"in-multicast-pkts\": \"70143\", \"in-octets\": \"570132503174\", \"in-unicast-pkts\": \"376128549\", \"out-broadcast-pkts\": \"2\", \"out-discards\": \"0\", \"out-errors\": \"0\", \"out-multicast-pkts\": \"169207\", \"out-octets\": \"569979193348\", \"out-unicast-pkts\": \"376049116\" }, \"openconfig-interfaces:description\": \"\", \"openconfig-interfaces:enabled\": true, \"openconfig-platform-port:hardware-port\": \"Port24\", \"openconfig-interfaces:ifindex\": 24, \"arista-intf-augments:inactive\": false, \"openconfig-interfaces:last-change\": \"1614001155863084032\", \"openconfig-interfaces:loopback-mode\": false, \"openconfig-interfaces:mtu\": 0, \"openconfig-interfaces:name\": \"Ethernet24\", \"openconfig-interfaces:oper-status\": \"UP\", \"openconfig-vlan:tpid\": \"openconfig-vlan-types:TPID_0X8100\", \"openconfig-interfaces:type\": \"iana-if-type:ethernetCsmacd\" } Get an interface's operational status gnmi -addr 192.0.2.139:6030 -username cvpadmin -password arista \\ get 'interfaces/interface[name=Ethernet24]/state/oper-status' Output: /interfaces/interface[name=Ethernet24]/state/oper-status: UP Get an interface's admin status gnmi -addr 192.0.2.139:6030 -username cvpadmin -password arista \\ get 'interfaces/interface[name=Ethernet24]/state/admin-status'` Output: /interfaces/interface[name=Ethernet24]/state/admin-status: UP Get the DOM metrics of all interfaces gnmi -addr 192.0.2.139:6030 -username cvpadmin -password arista \\ get \"components/component/transceiver/physical-channels/channel/state/\" Get the DOM metrics of an interface gnmi -addr 192.0.2.139:6030 -username cvpadmin -password arista \\ get \"components/component[name=Ethernet24 transceiver]/transceiver/physical-channels/channel/state/\" Reveal output /components/component[name=Ethernet24 transceiver]/transceiver/physical-channels/channel[index=0]/state: { \"openconfig-platform-transceiver:index\": 0, \"openconfig-platform-transceiver:input-power\": { \"instant\": \"-0.26\" }, \"openconfig-platform-transceiver:laser-bias-current\": { \"instant\": \"7.49\" }, \"openconfig-platform-transceiver:output-power\": { \"instant\": \"0.32\" } } Get per core CPU utilization gnmi -addr 192.0.2.139:6030 -username cvpadmin -password arista \\ get 'components/component/cpu' Reveal output /components/component[name=CPU3]/cpu: { \"openconfig-platform-cpu:utilization\": { \"state\": { \"avg\": 18, \"instant\": 16, \"interval\": \"1000000000000\", \"max\": 28, \"max-time\": \"3230106984172745216\", \"min\": 13, \"min-time\": \"3230106514174602752\" } } } /components/component[name=CPU0]/cpu: { \"openconfig-platform-cpu:utilization\": { \"state\": { \"avg\": 17, \"instant\": 16, \"interval\": \"1000000000000\", \"max\": 25, \"max-time\": \"3230106564173730816\", \"min\": 12, \"min-time\": \"3230106394175068672\" } } } /components/component[name=CPU1]/cpu: { \"openconfig-platform-cpu:utilization\": { \"state\": { \"avg\": 18, \"instant\": 17, \"interval\": \"1000000000000\", \"max\": 27, \"max-time\": \"3230107464174793728\", \"min\": 13, \"min-time\": \"3230107334172570624\" } } } /components/component[name=CPU2]/cpu: { \"openconfig-platform-cpu:utilization\": { \"state\": { \"avg\": 17, \"instant\": 21, \"interval\": \"1000000000000\", \"max\": 24, \"max-time\": \"3230106924173756928\", \"min\": 11, \"min-time\": \"3230107394173572608\" } } } Get the available/utilized memory gnmi -addr 192.0.2.139:6030 -username cvpadmin -password arista \\ get 'components/component/state/memory/' Output: /components/component[name=Chassis]/state/memory: { \"openconfig-platform:available\": \"8298774528\", \"openconfig-platform:utilized\": \"7706267648\" } Get the system environment temperatures gnmi -addr 192.0.2.139:6030 -username cvpadmin -password arista \\ get 'components/component/state/temperature/instant' Reveal output /components/component[name=DomTemperatureSensor49]/state/temperature/instant: 30.49609375 /components/component[name=DomTemperatureSensor25]/state/temperature/instant: 24.69921875 /components/component[name=DomTemperatureSensor40]/state/temperature/instant: 25.5078125 /components/component[name=TempSensorP2/2]/state/temperature/instant: 0.0 /components/component[name=TempSensorP1/3]/state/temperature/instant: 40.0 /components/component[name=TempSensorP2/1]/state/temperature/instant: 0.0 /components/component[name=TempSensorP2/3]/state/temperature/instant: 0.0 /components/component[name=DomTemperatureSensor24]/state/temperature/instant: 24.5 /components/component[name=DomTemperatureSensor26]/state/temperature/instant: 23.73046875 /components/component[name=DomTemperatureSensor54]/state/temperature/instant: 27.26953125 /components/component[name=TempSensorP1/1]/state/temperature/instant: 34.0 /components/component[name=DomTemperatureSensor50]/state/temperature/instant: 27.453125 /components/component[name=TempSensorP1/2]/state/temperature/instant: 25.0 /components/component[name=TempSensor1]/state/temperature/instant: 45.84278576588521 /components/component[name=TempSensor15]/state/temperature/instant: 33.875 /components/component[name=TempSensor18]/state/temperature/instant: 44.625 /components/component[name=TempSensor16]/state/temperature/instant: 22.75 /components/component[name=TempSensor17]/state/temperature/instant: 37.0 /components/component[name=TempSensor14]/state/temperature/instant: 37.0 EOS Native paths To get EOS native paths, OCTA has to be enabled as mentioned in the configuration section. Performing GET/SUBSCRIBE actions using EOS native paths require changing the origin to eos_native . Commonly used paths MAC table: /Smash/bridging/status/smashFdbStatus ARP table: /Smash/arp/status/arpEntry Neighbor table: /Smash/arp/status/neighborEntry IPv4 RIB: /Smash/routing/status/route IPv6 RIB: /Smash/routing6/status/route IPv4 next-hop table: /Smash/routing/status/nexthop IPv6 next-hop table: /Smash/routing6/status/nexthop CPU info: /Kernel/proc/cpu Process statistics: /Kernel/proc/stat System info: /Kernel/sysinfo EOS version: /Eos/image Interface counters: /Smash/counters/ethIntf/<agent>/current/counter Values for <agent> are: 7500-family, 7280-family, 7020-family (Arad/Jericho ASICs): SandCounters 7300-family, 7250-family, 7050-family, 7010 products, 720-family (Trident ASICs): StrataCounters For 7060-family, 7260-family (Tomahawk): Strata-FixedSystem or StrataCounters from 4.22+ 7150-family products (Alta ASICs): FocalPointV2 7160-family products (Cavium/Xpliant ASICs): XpCounters 7170-family products (Barefoot ASIC): BfnCounters Get CPU utilization gnmi -addr 192.0.2.130:6030 -username admin \\ get origin=eos_native '/Kernel/proc/cpu/utilization/total' Output: /Kernel/proc/cpu/utilization/total/nice: 38446 /Kernel/proc/cpu/utilization/total/system: 2347714 /Kernel/proc/cpu/utilization/total/idle: 247720286 /Kernel/proc/cpu/utilization/total/name: total /Kernel/proc/cpu/utilization/total/util: 7 /Kernel/proc/cpu/utilization/total/user: 16984784 Get transceiver DOM temperature gnmi -addr 192.0.2.130:6030 -username admin get origin=eos_native \\ 'Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32'` Reveal output /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/temperature: { \"value\": 32.5 } /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/maxTemperature: { \"value\": 34.88671875 } /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/maxTemperatureTime: 1564757444.339129 /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/name: DomTemperatureSensor32 /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/generationId: 0 /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/hwStatus: ok /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/alertRaised: false /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/alertRaisedCount: 0 /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/lastAlertRaisedTime: 1564194739.259879 Get connectivity monitor host stats gnmi -addr 192.0.2.139:6030 -username admin get origin=eos_native '/Sysdb/connectivityMonitor/status/hostStatus/' Reveal output /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/key/hostName: wls100 /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/key/vrfName: { \"value\": \"default\" } /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/name: wls100_default /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/defaultStats/packetLoss: 0 /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/defaultStats/httpResponseTime: 0 /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/defaultStats/interfaceName: /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/defaultStats/jitter: 0 /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/defaultStats/latency: 0 /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/ipAddr: \"192.0.2.140\" /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/key/hostName: ats323 /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/key/vrfName: { \"value\": \"management\" } /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/name: ats323_management /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/ipAddr: \"192.0.2.138\" /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/defaultStats/latency: 0.127 /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/defaultStats/jitter: 0.033 /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/defaultStats/packetLoss: 0 /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/defaultStats/httpResponseTime: 21.860306 /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/defaultStats/interfaceName: gNMI SET RPC Examples OpenConfig paths Configure BGP neighbor Configure neighbor address and peer AS gnmi -addr 192.0.2.139:6030 -username cvpadmin -password arista \\ update '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.43]' \\ '{\"config\": {\"neighbor-address\":\"198.51.100.43\", \"peer-as\": 123}}' Configure neighbor address, peer AS and send-community gnmi -addr 192.0.2.203:6030 -username arista -password arista update '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.43]' \\ {\"config\": {\"neighbor-address\":\"198.51.100.43\", \"peer-as\": 123, \"enabled\": true, \"send-community\": \"EXTENDED\"}}' Create peer group gnmi -addr 192.0.2.203 -username arista -password arista update \\ '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/peer-groups/peer-group[peer-group-name=XYZ]' \\ '{\"config\": {\"peer-group-name\":\"XYZ\", \"local-as\": 114}}' Update the peer AS gnmi -addr 192.0.2.203:6030 -username arista -password arista \\ update '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.0]/config/peer-as' \\ '110' gnmi -addr 192.0.2.203:6030 -username arista -password arista \\ update '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.0]' \\ '{\"config\": {\"peer-as\": 110}}' Update the peer group gnmi -addr 192.0.2.203:6030 -username arista -password arista \\ update '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.43]/config/peer-group' \\ 'XYZ' gnmi -addr 192.0.2.203:6030 -username arista -password arista \\ update '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.0]' \\ '{\"config\": {\"peer-group\": \"XYZ\",\"peer-as\": 143}}' Update BGP config using json file gnmi -addr 192.0.2.203:6030 -username arista -password arista \\ update /network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp' Reveal output { \"neighbors\": { \"neighbor\": [ { \"config\": { \"enabled\": true, \"neighbor-address\": \"10.10.10.154\", \"peer-group\": \"XYZ\" }, \"neighbor-address\": \"10.10.10.154\" }, { \"config\": { \"enabled\": true, \"neighbor-address\": \"10.10.10.157\", \"peer-group\": \"XYZ\" }, \"neighbor-address\": \"10.10.10.157\" } ] }, \"peer-groups\": { \"peer-group\": [ { \"config\": { \"peer-as\": 65002, \"peer-group-name\": \"ABC\" }, \"peer-group-name\": \"ABC\" } ] } } Create an ACL gnmi -addr 192.0.2.203:6030 -username admin -password arista \\ update /acl/acl-sets acl2.json cat acl2.json Reveal output { \"acl-set\": [ { \"config\": { \"name\": \"test\", \"type\": \"ACL_IPV4\" }, \"name\": \"test\", \"type\": \"ACL_IPV4\", \"acl-entries\": { \"acl-entry\": [ { \"sequence-id\": 10, \"actions\": { \"config\": { \"forwarding-action\": \"DROP\" } }, \"config\": { \"sequence-id\": 10 }, \"ipv4\": { \"config\": { \"destination-address\": \"192.0.2.1/32\", \"source-address\": \"0.0.0.0/0\" } } } ] } } ] } This creates ip access-list test 10 deny ip any 1.0.0.0/12 Shutdown an interface gnmi -addr 192.0.2.139:6030 -username arista -password arista \\ update '/interfaces/interface[name=Ethernet1]/config/enabled' \\ 'false' Bring up an interface gnmi -addr 192.0.2.139:6030 -username arista -password arista \\ update '/interfaces/interface[name=Ethernet1]/config/enabled' \\ 'true' gNMI SUBSCRIBE RPC Examples OpenConfig paths Subscribe to all BGP neighbor states gnmi -addr 192.0.2.203 -username arista -password arista \\ subscribe '/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state' Subscribe to specific BGP neighbor state gnmi -addr 192.0.2.203 -username arista -password arista \\ subscribe '/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor[neighbor-address=198.51.100.5]/state' Subscribe with stream mode sample and interval gnmi -addr 192.0.2.214:6030 -username admin -password arista \\ -sample_interval 5s -stream_mode sample \\ subscribe \\ '/network-instances/network-instance[name=Tenant_A_WEB_Zone]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.1]/afi-safis/afi-safi[afi-safi-name=openconfig-bgp-types:IPV4_UNICAST]/state/prefixes/received' CLI origin Changing the maximum-routes for a BGP neighbor gnmi -addr 192.0.2.214:6030 -username arista -password arista \\ update origin=cli \"\" \"router bgp 65101 neighbor IPv4-UNDERLAY-PEERS maximum-routes 12500\" NOTE the neighbor command has to be on a new line, so the previous line should not end in \\ . show version gnmi -addr 192.0.2.214:6030 -username cvpadmin -password arista \\ get origin=cli \"show version\" Reveal output /show version: { \"architecture\": \"i686\", \"bootupTimestamp\": 1626291561.0, \"configMacAddress\": \"00:00:00:00:00:00\", \"hardwareRevision\": \"\", \"hwMacAddress\": \"00:00:00:00:00:00\", \"imageFormatVersion\": \"1.0\", \"internalBuildId\": \"ed275a6c-1771-482d-829b-125e9c6ba677\", \"internalVersion\": \"4.26.2F-23035564.riorel\", \"isIntlVersion\": false, \"memFree\": 2422124, \"memTotal\": 4002356, \"mfgName\": \"Arista\", \"modelName\": \"vEOS-lab\", \"serialNumber\": \"BAD032986065E8DC14CBB6472EC314A6\", \"systemMacAddress\": \"50:08:00:a7:ca:c3\", \"uptime\": 1814877.63, \"version\": \"4.26.2F-23035564.riorel (engineering build)\" }","title":"gnmi (Arista)"},{"location":"examples/gnmi-clients/arista-gnmi/#gnmi-get-rpc-examples","text":"","title":"gNMI GET RPC Examples"},{"location":"examples/gnmi-clients/arista-gnmi/#openconfig-paths","text":"","title":"OpenConfig paths"},{"location":"examples/gnmi-clients/arista-gnmi/#get-all-information","text":"gnmi -addr 192.0.2.139:6030 -username admin -password arista get /","title":"Get all information"},{"location":"examples/gnmi-clients/arista-gnmi/#get-the-bgp-configuration-in-the-default-vrf","text":"gnmi -addr 198.51.100.219:6030 -username admin -password arista \\ get '/network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp'` Reveal output /network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp: { \"openconfig-network-instance:global\": { \"confederation\": { \"config\": { \"identifier\": 0 }, \"state\": {p \"identifier\": 0 } }, \"config\": { \"as\": 4206000022, \"router-id\": \"0.0.0.0\" }, \"default-route-distance\": { \"config\": { \"external-route-distance\": 200, \"internal-route-distance\": 200 }, \"state\": { \"external-route-distance\": 200, \"internal-route-distance\": 200 } }, \"graceful-restart\": { \"config\": { \"restart-time\": 0 }, \"state\": { \"restart-time\": 0 } }, \"route-selection-options\": { \"config\": {}, \"state\": {} }, \"state\": { \"as\": 4206000022, \"router-id\": \"4.4.4.4\" } }, \"openconfig-network-instance:neighbors\": { \"neighbor\": [ { \"afi-safis\": { \"afi-safi\": [ { \"afi-safi-name\": \"IPV4_UNICAST\", \"config\": { \"afi-safi-name\": \"IPV4_UNICAST\", \"enabled\": false }, \"graceful-restart\": { \"config\": { \"enabled\": false }, \"state\": { \"enabled\": false } }, \"state\": { \"afi-safi-name\": \"IPV4_UNICAST\", \"enabled\": false } }, { \"afi-safi-name\": \"IPV6_UNICAST\", \"config\": { \"afi-safi-name\": \"IPV6_UNICAST\", \"enabled\": false }, \"graceful-restart\": { \"config\": { \"enabled\": false }, \"state\": { \"enabled\": false } }, \"state\": { \"afi-safi-name\": \"IPV6_UNICAST\", \"enabled\": false } } ] }, \"config\": { \"auth-password\": \"\", \"description\": \"\", \"local-as\": 0, \"neighbor-address\": \"3.4.5.6\", \"peer-as\": 1, \"send-community\": \"NONE\" }, \"ebgp-multihop\": { \"config\": { \"multihop-ttl\": 0 }, \"state\": { \"multihop-ttl\": 0 } }, \"neighbor-address\": \"3.4.5.6\", \"route-reflector\": { \"config\": { \"route-reflector-client\": false }, \"state\": { \"route-reflector-client\": false } }, \"state\": { \"auth-password\": \"\", \"description\": \"\", \"local-as\": 0, \"peer-as\": 1, \"send-community\": \"NONE\" }, \"timers\": { \"config\": { \"hold-time\": \"180.0\", \"keepalive-interval\": \"60.0\" }, \"state\": { \"hold-time\": \"180.0\", \"keepalive-interval\": \"60.0\" } }, \"transport\": { \"config\": { \"passive-mode\": false }, \"state\": { \"passive-mode\": false } } }, { \"afi-safis\": { \"afi-safi\": [ { \"afi-safi-name\": \"IPV4_UNICAST\", \"config\": { \"afi-safi-name\": \"IPV4_UNICAST\", \"enabled\": false }, \"graceful-restart\": { \"config\": { \"enabled\": false }, \"state\": { \"enabled\": false } }, \"state\": { \"afi-safi-name\": \"IPV4_UNICAST\", \"enabled\": false } }, { \"afi-safi-name\": \"IPV6_UNICAST\", \"config\": { \"afi-safi-name\": \"IPV6_UNICAST\", \"enabled\": false }, \"graceful-restart\": { \"config\": { \"enabled\": false }, \"state\": { \"enabled\": false } }, \"state\": { \"afi-safi-name\": \"IPV6_UNICAST\", \"enabled\": false } } ] }, \"config\": { \"auth-password\": \"\", \"description\": \"\", \"local-as\": 0, \"neighbor-address\": \"20.1.1.1\", \"peer-as\": 65001, \"send-community\": \"NONE\" }, \"ebgp-multihop\": { \"config\": { \"multihop-ttl\": 0 }, \"state\": { \"multihop-ttl\": 0 } }, \"neighbor-address\": \"20.1.1.1\", \"route-reflector\": { \"config\": { \"route-reflector-client\": false }, \"state\": { \"route-reflector-client\": false } }, \"state\": { \"auth-password\": \"\", \"description\": \"\", \"local-as\": 0, \"peer-as\": 65001, \"send-community\": \"NONE\" }, \"timers\": { \"config\": { \"hold-time\": \"180.0\", \"keepalive-interval\": \"60.0\" }, \"state\": { \"hold-time\": \"180.0\", \"keepalive-interval\": \"60.0\" } }, \"transport\": { \"config\": { \"passive-mode\": false }, \"state\": { \"passive-mode\": false } } } ] }","title":"Get the BGP configuration in the default VRF"},{"location":"examples/gnmi-clients/arista-gnmi/#get-bgp-neighbors","text":"gnmi -addr 192.0.2.139 -username admin \\ get '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors' Reveal output /network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors: { \"openconfig-network-instance:neighbor\": [ { \"afi-safis\": { \"afi-safi\": [ { \"afi-safi-name\": \"openconfig-bgp-types:IPV6_UNICAST\", \"config\": { \"afi-safi-name\": \"openconfig-bgp-types:IPV6_UNICAST\" }, \"state\": { \"afi-safi-name\": \"openconfig-bgp-types:IPV6_UNICAST\", \"prefixes\": { \"arista-bgp-augments:best-ecmp-paths\": 0, \"arista-bgp-augments:best-paths\": 0, \"installed\": 0, \"received\": 0, \"sent\": 0 } } }, { \"afi-safi-name\": \"openconfig-bgp-types:L2VPN_EVPN\", \"config\": { \"afi-safi-name\": \"openconfig-bgp-types:L2VPN_EVPN\" }, \"state\": { \"afi-safi-name\": \"openconfig-bgp-types:L2VPN_EVPN\", \"prefixes\": { \"arista-bgp-augments:best-ecmp-paths\": 0, \"arista-bgp-augments:best-paths\": 0, \"installed\": 0, \"received\": 0, \"sent\": 0 } } }, { \"afi-safi-name\": \"openconfig-bgp-types:IPV4_UNICAST\", \"config\": { \"afi-safi-name\": \"openconfig-bgp-types:IPV4_UNICAST\" }, \"state\": { \"afi-safi-name\": \"openconfig-bgp-types:IPV4_UNICAST\", \"prefixes\": { \"arista-bgp-augments:best-ecmp-paths\": 0, \"arista-bgp-augments:best-paths\": 0, \"installed\": 0, \"received\": 0, \"sent\": 0 } } } ] }, \"apply-policy\": { \"config\": { \"default-export-policy\": \"REJECT_ROUTE\", \"default-import-policy\": \"REJECT_ROUTE\" }, \"state\": { \"default-export-policy\": \"REJECT_ROUTE\", \"default-import-policy\": \"REJECT_ROUTE\" } }, \"as-path-options\": { \"config\": { \"replace-peer-as\": false }, \"state\": { \"replace-peer-as\": false } }, \"config\": { \"enabled\": true, \"neighbor-address\": \"172.168.14.2\", \"peer-as\": 65002, \"send-community\": \"NONE\" }, \"ebgp-multihop\": { \"config\": { \"enabled\": false, \"multihop-ttl\": 0 }, \"state\": { \"enabled\": false, \"multihop-ttl\": 0 } }, \"neighbor-address\": \"172.168.14.2\", \"state\": { \"enabled\": true, \"established-transitions\": \"2\", \"last-established\": \"1614170027122047488\", \"messages\": { \"received\": { \"UPDATE\": \"2\" }, \"sent\": { \"UPDATE\": \"2\" } }, \"neighbor-address\": \"172.168.14.2\", \"peer-as\": 65002, \"send-community\": \"NONE\", \"session-state\": \"ESTABLISHED\" }, \"transport\": { \"config\": { \"mtu-discovery\": true }, \"state\": { \"mtu-discovery\": true, \"remote-address\": \"172.168.14.2\", \"remote-port\": 0 } } } ] }","title":"Get BGP neighbors"},{"location":"examples/gnmi-clients/arista-gnmi/#get-all-interface-descriptions","text":"gnmi -addr 192.0.2.139:6030 -username admin -password arista \\ get '/interfaces/interface/subinterfaces/subinterface/state/description' /interfaces/interface[name=Ethernet3]/subinterfaces/subinterface[index=0]/state/description: SRV01 /interfaces/interface[name=Ethernet1]/subinterfaces/subinterface[index=0]/state/description: DCI /interfaces/interface[name=Ethernet2]/subinterfaces/subinterface[index=0]/state/description: To Spines","title":"Get all interface descriptions"},{"location":"examples/gnmi-clients/arista-gnmi/#get-an-interfaces-description","text":"gnmi -addr 198.51.100.100:6030 -username admin -password arista \\ get 'interfaces/interface[name=Ethernet1/1]/subinterfaces/subinterface/state/description' /interfaces/interface[name=Ethernet1/1]/subinterfaces/subinterface[index=0]/state/description: \"Tyrion\"","title":"Get an interface's description"},{"location":"examples/gnmi-clients/arista-gnmi/#get-the-operational-status-of-all-interfaces","text":"gnmi -addr 192.0.2.139:6030 -username admin -password arista \\ get 'interfaces/interface/state/oper-status'`","title":"Get the operational status of all interfaces"},{"location":"examples/gnmi-clients/arista-gnmi/#get-all-states-of-an-interface","text":"gnmi -addr 192.0.2.139:6030 -username cvpadmin -password arista \\ get 'interfaces/interface[name=Ethernet24]/state/'` Reveal output /interfaces/interface[name=Ethernet24]/state: { \"openconfig-interfaces:admin-status\": \"UP\", \"openconfig-interfaces:counters\": { \"in-broadcast-pkts\": \"1\", \"in-discards\": \"0\", \"in-errors\": \"0\", \"in-fcs-errors\": \"0\", \"in-multicast-pkts\": \"70143\", \"in-octets\": \"570132503174\", \"in-unicast-pkts\": \"376128549\", \"out-broadcast-pkts\": \"2\", \"out-discards\": \"0\", \"out-errors\": \"0\", \"out-multicast-pkts\": \"169207\", \"out-octets\": \"569979193348\", \"out-unicast-pkts\": \"376049116\" }, \"openconfig-interfaces:description\": \"\", \"openconfig-interfaces:enabled\": true, \"openconfig-platform-port:hardware-port\": \"Port24\", \"openconfig-interfaces:ifindex\": 24, \"arista-intf-augments:inactive\": false, \"openconfig-interfaces:last-change\": \"1614001155863084032\", \"openconfig-interfaces:loopback-mode\": false, \"openconfig-interfaces:mtu\": 0, \"openconfig-interfaces:name\": \"Ethernet24\", \"openconfig-interfaces:oper-status\": \"UP\", \"openconfig-vlan:tpid\": \"openconfig-vlan-types:TPID_0X8100\", \"openconfig-interfaces:type\": \"iana-if-type:ethernetCsmacd\" }","title":"Get all states of an interface"},{"location":"examples/gnmi-clients/arista-gnmi/#get-an-interfaces-operational-status","text":"gnmi -addr 192.0.2.139:6030 -username cvpadmin -password arista \\ get 'interfaces/interface[name=Ethernet24]/state/oper-status' Output: /interfaces/interface[name=Ethernet24]/state/oper-status: UP","title":"Get an interface's operational status"},{"location":"examples/gnmi-clients/arista-gnmi/#get-an-interfaces-admin-status","text":"gnmi -addr 192.0.2.139:6030 -username cvpadmin -password arista \\ get 'interfaces/interface[name=Ethernet24]/state/admin-status'` Output: /interfaces/interface[name=Ethernet24]/state/admin-status: UP","title":"Get an interface's admin status"},{"location":"examples/gnmi-clients/arista-gnmi/#get-the-dom-metrics-of-all-interfaces","text":"gnmi -addr 192.0.2.139:6030 -username cvpadmin -password arista \\ get \"components/component/transceiver/physical-channels/channel/state/\"","title":"Get the DOM metrics of all interfaces"},{"location":"examples/gnmi-clients/arista-gnmi/#get-the-dom-metrics-of-an-interface","text":"gnmi -addr 192.0.2.139:6030 -username cvpadmin -password arista \\ get \"components/component[name=Ethernet24 transceiver]/transceiver/physical-channels/channel/state/\" Reveal output /components/component[name=Ethernet24 transceiver]/transceiver/physical-channels/channel[index=0]/state: { \"openconfig-platform-transceiver:index\": 0, \"openconfig-platform-transceiver:input-power\": { \"instant\": \"-0.26\" }, \"openconfig-platform-transceiver:laser-bias-current\": { \"instant\": \"7.49\" }, \"openconfig-platform-transceiver:output-power\": { \"instant\": \"0.32\" } }","title":"Get the DOM metrics of an interface"},{"location":"examples/gnmi-clients/arista-gnmi/#get-per-core-cpu-utilization","text":"gnmi -addr 192.0.2.139:6030 -username cvpadmin -password arista \\ get 'components/component/cpu' Reveal output /components/component[name=CPU3]/cpu: { \"openconfig-platform-cpu:utilization\": { \"state\": { \"avg\": 18, \"instant\": 16, \"interval\": \"1000000000000\", \"max\": 28, \"max-time\": \"3230106984172745216\", \"min\": 13, \"min-time\": \"3230106514174602752\" } } } /components/component[name=CPU0]/cpu: { \"openconfig-platform-cpu:utilization\": { \"state\": { \"avg\": 17, \"instant\": 16, \"interval\": \"1000000000000\", \"max\": 25, \"max-time\": \"3230106564173730816\", \"min\": 12, \"min-time\": \"3230106394175068672\" } } } /components/component[name=CPU1]/cpu: { \"openconfig-platform-cpu:utilization\": { \"state\": { \"avg\": 18, \"instant\": 17, \"interval\": \"1000000000000\", \"max\": 27, \"max-time\": \"3230107464174793728\", \"min\": 13, \"min-time\": \"3230107334172570624\" } } } /components/component[name=CPU2]/cpu: { \"openconfig-platform-cpu:utilization\": { \"state\": { \"avg\": 17, \"instant\": 21, \"interval\": \"1000000000000\", \"max\": 24, \"max-time\": \"3230106924173756928\", \"min\": 11, \"min-time\": \"3230107394173572608\" } } }","title":"Get per core CPU utilization"},{"location":"examples/gnmi-clients/arista-gnmi/#get-the-availableutilized-memory","text":"gnmi -addr 192.0.2.139:6030 -username cvpadmin -password arista \\ get 'components/component/state/memory/' Output: /components/component[name=Chassis]/state/memory: { \"openconfig-platform:available\": \"8298774528\", \"openconfig-platform:utilized\": \"7706267648\" }","title":"Get the available/utilized memory"},{"location":"examples/gnmi-clients/arista-gnmi/#get-the-system-environment-temperatures","text":"gnmi -addr 192.0.2.139:6030 -username cvpadmin -password arista \\ get 'components/component/state/temperature/instant' Reveal output /components/component[name=DomTemperatureSensor49]/state/temperature/instant: 30.49609375 /components/component[name=DomTemperatureSensor25]/state/temperature/instant: 24.69921875 /components/component[name=DomTemperatureSensor40]/state/temperature/instant: 25.5078125 /components/component[name=TempSensorP2/2]/state/temperature/instant: 0.0 /components/component[name=TempSensorP1/3]/state/temperature/instant: 40.0 /components/component[name=TempSensorP2/1]/state/temperature/instant: 0.0 /components/component[name=TempSensorP2/3]/state/temperature/instant: 0.0 /components/component[name=DomTemperatureSensor24]/state/temperature/instant: 24.5 /components/component[name=DomTemperatureSensor26]/state/temperature/instant: 23.73046875 /components/component[name=DomTemperatureSensor54]/state/temperature/instant: 27.26953125 /components/component[name=TempSensorP1/1]/state/temperature/instant: 34.0 /components/component[name=DomTemperatureSensor50]/state/temperature/instant: 27.453125 /components/component[name=TempSensorP1/2]/state/temperature/instant: 25.0 /components/component[name=TempSensor1]/state/temperature/instant: 45.84278576588521 /components/component[name=TempSensor15]/state/temperature/instant: 33.875 /components/component[name=TempSensor18]/state/temperature/instant: 44.625 /components/component[name=TempSensor16]/state/temperature/instant: 22.75 /components/component[name=TempSensor17]/state/temperature/instant: 37.0 /components/component[name=TempSensor14]/state/temperature/instant: 37.0","title":"Get the system environment temperatures"},{"location":"examples/gnmi-clients/arista-gnmi/#eos-native-paths","text":"To get EOS native paths, OCTA has to be enabled as mentioned in the configuration section. Performing GET/SUBSCRIBE actions using EOS native paths require changing the origin to eos_native .","title":"EOS Native paths"},{"location":"examples/gnmi-clients/arista-gnmi/#commonly-used-paths","text":"MAC table: /Smash/bridging/status/smashFdbStatus ARP table: /Smash/arp/status/arpEntry Neighbor table: /Smash/arp/status/neighborEntry IPv4 RIB: /Smash/routing/status/route IPv6 RIB: /Smash/routing6/status/route IPv4 next-hop table: /Smash/routing/status/nexthop IPv6 next-hop table: /Smash/routing6/status/nexthop CPU info: /Kernel/proc/cpu Process statistics: /Kernel/proc/stat System info: /Kernel/sysinfo EOS version: /Eos/image Interface counters: /Smash/counters/ethIntf/<agent>/current/counter Values for <agent> are: 7500-family, 7280-family, 7020-family (Arad/Jericho ASICs): SandCounters 7300-family, 7250-family, 7050-family, 7010 products, 720-family (Trident ASICs): StrataCounters For 7060-family, 7260-family (Tomahawk): Strata-FixedSystem or StrataCounters from 4.22+ 7150-family products (Alta ASICs): FocalPointV2 7160-family products (Cavium/Xpliant ASICs): XpCounters 7170-family products (Barefoot ASIC): BfnCounters","title":"Commonly used paths"},{"location":"examples/gnmi-clients/arista-gnmi/#get-cpu-utilization","text":"gnmi -addr 192.0.2.130:6030 -username admin \\ get origin=eos_native '/Kernel/proc/cpu/utilization/total' Output: /Kernel/proc/cpu/utilization/total/nice: 38446 /Kernel/proc/cpu/utilization/total/system: 2347714 /Kernel/proc/cpu/utilization/total/idle: 247720286 /Kernel/proc/cpu/utilization/total/name: total /Kernel/proc/cpu/utilization/total/util: 7 /Kernel/proc/cpu/utilization/total/user: 16984784","title":"Get CPU utilization"},{"location":"examples/gnmi-clients/arista-gnmi/#get-transceiver-dom-temperature","text":"gnmi -addr 192.0.2.130:6030 -username admin get origin=eos_native \\ 'Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32'` Reveal output /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/temperature: { \"value\": 32.5 } /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/maxTemperature: { \"value\": 34.88671875 } /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/maxTemperatureTime: 1564757444.339129 /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/name: DomTemperatureSensor32 /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/generationId: 0 /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/hwStatus: ok /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/alertRaised: false /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/alertRaisedCount: 0 /Sysdb/environment/archer/temperature/status/system/DomTemperatureSensor32/lastAlertRaisedTime: 1564194739.259879","title":"Get transceiver DOM temperature"},{"location":"examples/gnmi-clients/arista-gnmi/#get-connectivity-monitor-host-stats","text":"gnmi -addr 192.0.2.139:6030 -username admin get origin=eos_native '/Sysdb/connectivityMonitor/status/hostStatus/' Reveal output /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/key/hostName: wls100 /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/key/vrfName: { \"value\": \"default\" } /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/name: wls100_default /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/defaultStats/packetLoss: 0 /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/defaultStats/httpResponseTime: 0 /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/defaultStats/interfaceName: /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/defaultStats/jitter: 0 /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/defaultStats/latency: 0 /Sysdb/connectivityMonitor/status/hostStatus/wls100_default/ipAddr: \"192.0.2.140\" /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/key/hostName: ats323 /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/key/vrfName: { \"value\": \"management\" } /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/name: ats323_management /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/ipAddr: \"192.0.2.138\" /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/defaultStats/latency: 0.127 /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/defaultStats/jitter: 0.033 /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/defaultStats/packetLoss: 0 /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/defaultStats/httpResponseTime: 21.860306 /Sysdb/connectivityMonitor/status/hostStatus/ats323_management/defaultStats/interfaceName:","title":"Get connectivity monitor host stats"},{"location":"examples/gnmi-clients/arista-gnmi/#gnmi-set-rpc-examples","text":"","title":"gNMI SET RPC Examples"},{"location":"examples/gnmi-clients/arista-gnmi/#openconfig-paths_1","text":"","title":"OpenConfig paths"},{"location":"examples/gnmi-clients/arista-gnmi/#configure-bgp-neighbor","text":"","title":"Configure BGP neighbor"},{"location":"examples/gnmi-clients/arista-gnmi/#configure-neighbor-address-and-peer-as","text":"gnmi -addr 192.0.2.139:6030 -username cvpadmin -password arista \\ update '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.43]' \\ '{\"config\": {\"neighbor-address\":\"198.51.100.43\", \"peer-as\": 123}}'","title":"Configure neighbor address and peer AS"},{"location":"examples/gnmi-clients/arista-gnmi/#configure-neighbor-address-peer-as-and-send-community","text":"gnmi -addr 192.0.2.203:6030 -username arista -password arista update '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.43]' \\ {\"config\": {\"neighbor-address\":\"198.51.100.43\", \"peer-as\": 123, \"enabled\": true, \"send-community\": \"EXTENDED\"}}'","title":"Configure neighbor address, peer AS and send-community"},{"location":"examples/gnmi-clients/arista-gnmi/#create-peer-group","text":"gnmi -addr 192.0.2.203 -username arista -password arista update \\ '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/peer-groups/peer-group[peer-group-name=XYZ]' \\ '{\"config\": {\"peer-group-name\":\"XYZ\", \"local-as\": 114}}'","title":"Create peer group"},{"location":"examples/gnmi-clients/arista-gnmi/#update-the-peer-as","text":"gnmi -addr 192.0.2.203:6030 -username arista -password arista \\ update '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.0]/config/peer-as' \\ '110' gnmi -addr 192.0.2.203:6030 -username arista -password arista \\ update '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.0]' \\ '{\"config\": {\"peer-as\": 110}}'","title":"Update the peer AS"},{"location":"examples/gnmi-clients/arista-gnmi/#update-the-peer-group","text":"gnmi -addr 192.0.2.203:6030 -username arista -password arista \\ update '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.43]/config/peer-group' \\ 'XYZ' gnmi -addr 192.0.2.203:6030 -username arista -password arista \\ update '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.0]' \\ '{\"config\": {\"peer-group\": \"XYZ\",\"peer-as\": 143}}'","title":"Update the peer group"},{"location":"examples/gnmi-clients/arista-gnmi/#update-bgp-config-using-json-file","text":"gnmi -addr 192.0.2.203:6030 -username arista -password arista \\ update /network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp' Reveal output { \"neighbors\": { \"neighbor\": [ { \"config\": { \"enabled\": true, \"neighbor-address\": \"10.10.10.154\", \"peer-group\": \"XYZ\" }, \"neighbor-address\": \"10.10.10.154\" }, { \"config\": { \"enabled\": true, \"neighbor-address\": \"10.10.10.157\", \"peer-group\": \"XYZ\" }, \"neighbor-address\": \"10.10.10.157\" } ] }, \"peer-groups\": { \"peer-group\": [ { \"config\": { \"peer-as\": 65002, \"peer-group-name\": \"ABC\" }, \"peer-group-name\": \"ABC\" } ] } }","title":"Update BGP config using json file"},{"location":"examples/gnmi-clients/arista-gnmi/#create-an-acl","text":"gnmi -addr 192.0.2.203:6030 -username admin -password arista \\ update /acl/acl-sets acl2.json cat acl2.json Reveal output { \"acl-set\": [ { \"config\": { \"name\": \"test\", \"type\": \"ACL_IPV4\" }, \"name\": \"test\", \"type\": \"ACL_IPV4\", \"acl-entries\": { \"acl-entry\": [ { \"sequence-id\": 10, \"actions\": { \"config\": { \"forwarding-action\": \"DROP\" } }, \"config\": { \"sequence-id\": 10 }, \"ipv4\": { \"config\": { \"destination-address\": \"192.0.2.1/32\", \"source-address\": \"0.0.0.0/0\" } } } ] } } ] } This creates ip access-list test 10 deny ip any 1.0.0.0/12","title":"Create an ACL"},{"location":"examples/gnmi-clients/arista-gnmi/#shutdown-an-interface","text":"gnmi -addr 192.0.2.139:6030 -username arista -password arista \\ update '/interfaces/interface[name=Ethernet1]/config/enabled' \\ 'false'","title":"Shutdown an interface"},{"location":"examples/gnmi-clients/arista-gnmi/#bring-up-an-interface","text":"gnmi -addr 192.0.2.139:6030 -username arista -password arista \\ update '/interfaces/interface[name=Ethernet1]/config/enabled' \\ 'true'","title":"Bring up an interface"},{"location":"examples/gnmi-clients/arista-gnmi/#gnmi-subscribe-rpc-examples","text":"","title":"gNMI SUBSCRIBE RPC Examples"},{"location":"examples/gnmi-clients/arista-gnmi/#openconfig-paths_2","text":"","title":"OpenConfig paths"},{"location":"examples/gnmi-clients/arista-gnmi/#subscribe-to-all-bgp-neighbor-states","text":"gnmi -addr 192.0.2.203 -username arista -password arista \\ subscribe '/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state'","title":"Subscribe to all BGP neighbor states"},{"location":"examples/gnmi-clients/arista-gnmi/#subscribe-to-specific-bgp-neighbor-state","text":"gnmi -addr 192.0.2.203 -username arista -password arista \\ subscribe '/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor[neighbor-address=198.51.100.5]/state'","title":"Subscribe to specific BGP neighbor state"},{"location":"examples/gnmi-clients/arista-gnmi/#subscribe-with-stream-mode-sample-and-interval","text":"gnmi -addr 192.0.2.214:6030 -username admin -password arista \\ -sample_interval 5s -stream_mode sample \\ subscribe \\ '/network-instances/network-instance[name=Tenant_A_WEB_Zone]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.1]/afi-safis/afi-safi[afi-safi-name=openconfig-bgp-types:IPV4_UNICAST]/state/prefixes/received'","title":"Subscribe with stream mode sample and interval"},{"location":"examples/gnmi-clients/arista-gnmi/#cli-origin","text":"","title":"CLI origin"},{"location":"examples/gnmi-clients/arista-gnmi/#changing-the-maximum-routes-for-a-bgp-neighbor","text":"gnmi -addr 192.0.2.214:6030 -username arista -password arista \\ update origin=cli \"\" \"router bgp 65101 neighbor IPv4-UNDERLAY-PEERS maximum-routes 12500\" NOTE the neighbor command has to be on a new line, so the previous line should not end in \\ .","title":"Changing the maximum-routes for a BGP neighbor"},{"location":"examples/gnmi-clients/arista-gnmi/#show-version","text":"gnmi -addr 192.0.2.214:6030 -username cvpadmin -password arista \\ get origin=cli \"show version\" Reveal output /show version: { \"architecture\": \"i686\", \"bootupTimestamp\": 1626291561.0, \"configMacAddress\": \"00:00:00:00:00:00\", \"hardwareRevision\": \"\", \"hwMacAddress\": \"00:00:00:00:00:00\", \"imageFormatVersion\": \"1.0\", \"internalBuildId\": \"ed275a6c-1771-482d-829b-125e9c6ba677\", \"internalVersion\": \"4.26.2F-23035564.riorel\", \"isIntlVersion\": false, \"memFree\": 2422124, \"memTotal\": 4002356, \"mfgName\": \"Arista\", \"modelName\": \"vEOS-lab\", \"serialNumber\": \"BAD032986065E8DC14CBB6472EC314A6\", \"systemMacAddress\": \"50:08:00:a7:ca:c3\", \"uptime\": 1814877.63, \"version\": \"4.26.2F-23035564.riorel (engineering build)\" }","title":"show version"},{"location":"examples/gnmi-clients/gnmic/","text":"overview The following examples are used to find openconfig paths within Arista EOS using the gNMIC binary . There will be some commands which will specify one liners which will have the address of the gNMI target and some commands which will use the .gnmic.yaml file which will have the target information inside declared. All outputs will be redirected to the outputs file with the .json extension so they are easier to view within a text editor. Download && install gnmic To install run: bash -c \"$(curl -sL https://get-gnmic.kmrd.dev)\" To get the version run: gnmi_stuff$ gnmic version Output: version : 0.17.0 commit : 278661e date : 2021-07-14T07:29:14Z gitURL : https://github.com/karimra/gnmic docs : https://gnmic.kmrd.dev Device config management api gnmi transport grpc default provider eos-native ceos3# show management api gnmi Octa: enabled Enabled: Yes Server: running on port 6030 SSL Profile: none QoS DSCP: none Authorization Required:No gnmic -a 192.0.2.1:6030 -u admin -p admin --insecure capabilities \\ >> outputs/capabilities.json gNMI GET RPC Examples OpenConfig paths Get all information gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \"/\" Get the BGP configuration in the default VRF gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ '/network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp'` Get BGP neighbors gnmi -addr 192.0.2.139 -username admin get \\ '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors' Get all interface descriptions gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ '/interfaces/interface/subinterfaces/subinterface/state/description' Get an interface's description gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ 'interfaces/interface[name=Ethernet1]/subinterfaces/subinterface/state/description' [ { \"timestamp\": 1626293671204274106, \"time\": \"2021-07-14T21:14:31.204274106+01:00\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Ethernet1]/subinterfaces/subinterface[index=0]/state/description\", \"values\": { \"interfaces/interface/subinterfaces/subinterface/state/description\": \"To-SPINE1\" } } ] } ] Get the operational status of all interfaces gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ 'interfaces/interface/state/oper-status' Reveal output [ { \"timestamp\": 1626293641102904713, \"time\": \"2021-07-14T21:14:01.102904713+01:00\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Management1]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Ethernet1]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Ethernet5]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Ethernet4]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Ethernet3]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Ethernet2]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Port-Channel4]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Port-Channel3]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } } ] } ] Get all states of an interface gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ 'interfaces/interface[name=Ethernet1]/state/' Reveal output [[ { \"timestamp\": 1626293429376469348, \"time\": \"2021-07-14T21:10:29.376469348+01:00\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Ethernet1]/state\", \"values\": { \"interfaces/interface/state\": { \"arista-intf-augments:inactive\": false, \"openconfig-interfaces:admin-status\": \"UP\", \"openconfig-interfaces:counters\": { \"in-broadcast-pkts\": \"0\", \"in-discards\": \"0\", \"in-errors\": \"0\", \"in-fcs-errors\": \"0\", \"in-multicast-pkts\": \"48\", \"in-octets\": \"111398\", \"in-unicast-pkts\": \"1460\", \"out-broadcast-pkts\": \"1\", \"out-discards\": \"0\", \"out-errors\": \"0\", \"out-multicast-pkts\": \"49\", \"out-octets\": \"117389\", \"out-unicast-pkts\": \"1457\" }, \"openconfig-interfaces:description\": \"To-SPINE1\", \"openconfig-interfaces:ifindex\": 1, \"openconfig-interfaces:last-change\": \"1626292006733589760\", \"openconfig-interfaces:mtu\": 0, \"openconfig-interfaces:name\": \"Ethernet1\", \"openconfig-interfaces:oper-status\": \"UP\", \"openconfig-interfaces:type\": \"iana-if-type:ethernetCsmacd\", \"openconfig-platform-port:hardware-port\": \"Port1\" } } } ] } ] Get an interface's operational status gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ 'interfaces/interface[name=Ethernet24]/state/oper-status' [ { \"timestamp\": 1626293414057239130, \"time\": \"2021-07-14T21:10:14.05723913+01:00\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Ethernet2]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } } ] } ] Get an interface's admin status gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ 'interfaces/interface[name=Ethernet1]/state/admin-status' [ { \"timestamp\": 1626293085257457373, \"time\": \"2021-07-14T21:04:45.257457373+01:00\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Ethernet1]/state/admin-status\", \"values\": { \"interfaces/interface/state/admin-status\": \"UP\" } } ] } ] Get the DOM metrics of all interfaces gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ \"components/component/transceiver/physical-channels/channel/state/\" Reveal output [ { \"timestamp\": 1626293085257457373, \"time\": \"2021-07-14T21:04:45.257457373+01:00\", \"updates\": [ { \"Path\": \"components/component[name=Ethernet49 transceiver]/transceiver/physical-channels/channel[index=0]/state\", \"values\": { \"components/component/transceiver/physical-channels/channel/state\": { \"openconfig-platform-transceiver:index\": 0, \"openconfig-platform-transceiver:input-power\": { \"instant\": \"1.15\" }, \"openconfig-platform-transceiver:laser-bias-current\": { \"instant\": \"0.0\" }, \"openconfig-platform-transceiver:output-power\": {} } } }, { \"Path\": \"components/component[name=Ethernet50 transceiver]/transceiver/physical-channels/channel[index=0]/state\", \"values\": { \"components/component/transceiver/physical-channels/channel/state\": { \"openconfig-platform-transceiver:index\": 0, \"openconfig-platform-transceiver:input-power\": { \"instant\": \"1.11\" }, \"openconfig-platform-transceiver:laser-bias-current\": { \"instant\": \"0.0\" }, \"openconfig-platform-transceiver:output-power\": {} } } } ] } ] Get the DOM metrics of an interface gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ \"components/component[name=Ethernet49 transceiver]/transceiver/physical-channels/channel/state/\" Reveal output [ { \"time\": \"1970-01-01T01:00:00+01:00\", \"updates\": [ { \"Path\": \"components/component[name=Ethernet49 transceiver]/transceiver/physical-channels/channel[index=0]/state\", \"values\": { \"components/component/transceiver/physical-channels/channel/state\": { \"openconfig-platform-transceiver:index\": 0, \"openconfig-platform-transceiver:input-power\": { \"instant\": \"1.08\" }, \"openconfig-platform-transceiver:laser-bias-current\": { \"instant\": \"0.0\" }, \"openconfig-platform-transceiver:output-power\": {} } } } ] } ] Get per core CPU utilization gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ 'components/component/cpu' Reveal output [ { \"timestamp\": 1626294810779644595, \"time\": \"2021-07-14T21:33:30.779644595+01:00\", \"updates\": [ { \"Path\": \"components/component[name=CPU1]/cpu\", \"values\": { \"components/component/cpu\": { \"openconfig-platform-cpu:utilization\": { \"state\": { \"avg\": 6, \"instant\": 6, \"interval\": \"1000000000000\", \"max\": 14, \"max-time\": \"3252585270429488128\", \"min\": 2, \"min-time\": \"3252586330424618496\" } } } } }, { \"Path\": \"components/component[name=CPU0]/cpu\", \"values\": { \"components/component/cpu\": { \"openconfig-platform-cpu:utilization\": { \"state\": { \"avg\": 5, \"instant\": 7, \"interval\": \"1000000000000\", \"max\": 13, \"max-time\": \"3252586170423993344\", \"min\": 1, \"min-time\": \"3252585340433252352\" } } } } } ] } ] Get the available/utilized memory gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ 'components/component/state/memory/' [ { \"timestamp\": 1626294846423115892, \"time\": \"2021-07-14T21:34:06.423115892+01:00\", \"updates\": [ { \"Path\": \"components/component[name=Chassis]/state/memory\", \"values\": { \"components/component/state/memory\": { \"openconfig-platform:available\": \"4098412544\", \"openconfig-platform:utilized\": \"4018016256\" } } } ] } ] Get the system environment temperatures gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ 'components/component/state/temperature/instant' Reveal output [ { \"timestamp\": 1626294876186613578, \"time\": \"2021-07-14T21:34:36.186613578+01:00\" \"updates\": [ { \"Path\": \"components/component[name=DomTemperatureSensor50]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 2709375, \"precision\": 5 } } }, { \"Path\": \"components/component[name=DomTemperatureSensor49]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 27140625, \"precision\": 6 } } }, { \"Path\": \"components/component[name=TempSensor7]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 41168000000000006, \"precision\": 15 } } }, { \"Path\": \"components/component[name=TempSensor8]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 4225279999999998, \"precision\": 14 } } }, { \"Path\": \"components/component[name=TempSensor9]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 4062560000000002, \"precision\": 14 } } }, { \"Path\": \"components/component[name=TempSensor1]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 39141723894742796, \"precision\": 15 } } }, { \"Path\": \"components/component[name=TempSensor6]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 23875, \"precision\": 3 } } }, { \"Path\": \"components/component[name=TempSensor3]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 21 } } }, { \"Path\": \"components/component[name=TempSensor4]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 1725, \"precision\": 2 } } }, { \"Path\": \"components/component[name=TempSensor5]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 29 } } }, { \"Path\": \"components/component[name=TempSensor2]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 32 } } } ] } ] gNMI SUBSCRIBE RPC Examples OpenConfig paths Subscribe to all BGP neighbor states gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip subscribe --path \\ '/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state' Reveal output { \"source\": \"192.0.2.214:6030\", \"subscription-name\": \"default-1626302647\", \"timestamp\": 1626292010055258009, \"time\": \"2021-07-14T20:46:50.055258009+01:00\", \"updates\": [ { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=172.18.255.42]/state/messages/sent/UPDATE\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/UPDATE\": 8 } } ] } { \"source\": \"192.0.2.214:6030\", \"subscription-name\": \"default-1626302647\", \"timestamp\": 1626292008053994815, \"time\": \"2021-07-14T20:46:48.053994815+01:00\", \"updates\": [ { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=172.18.255.42]/state/established-transitions\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/established-transitions\": 1 } } ] } Subscribe to specific BGP neighbor state gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip subscribe --path \\ 'network-instances/network-instance[name=Tenant_A_WEB_Zone]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.21]/state' Reveal output { \"source\": \"192.0.2.214:6030\", \"subscription-name\": \"default-1626303017\", \"timestamp\": 1626302991598465536, \"time\": \"2021-07-14T23:49:51.598465536+01:00\", \"updates\": [ { \"Path\": \"network-instances/network-instance[name=Tenant_A_WEB_Zone]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.21]/state/last-established\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/last-established\": 1626302991563603200 } } ] } Subscribe with stream mode sample and interval gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip --sample-interval 5s --stream-mode sample subscribe --path \\ '/network-instances/network-instance[name=Tenant_A_WEB_Zone]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.21]/afi-safis/afi-safi[afi-safi-name=openconfig-bgp-types:IPV4_UNICAST]/state/prefixes/received' Reveal output { \"source\": \"192.0.2.214:6030\", \"subscription-name\": \"default-1626303393\", \"timestamp\": 1626303158135414182, \"time\": \"2021-07-14T23:52:38.135414182+01:00\", \"updates\": [ { \"Path\": \"network-instances/network-instance[name=Tenant_A_WEB_Zone]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.21]/afi-safis/afi-safi[afi-safi-name=IPV4_UNICAST]/state/prefixes/received\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/received\": 5 } } ] } { \"source\": \"192.0.2.214:6030\", \"subscription-name\": \"default-1626303393\", \"timestamp\": 1626303158135414182, \"time\": \"2021-07-14T23:52:38.135414182+01:00\", \"updates\": [ { \"Path\": \"network-instances/network-instance[name=Tenant_A_WEB_Zone]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.21]/afi-safis/afi-safi[afi-safi-name=IPV4_UNICAST]/state/prefixes/received\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/received\": 5 } } ] } Subscribe to interface counters and save them to a file gnmic -a 192.0.2.1:6030 -u admin -p admin --insecure subscribe --path \\ \"/interfaces/interface/state/counters\" >> outputs/interface_state.json gNMI SET RPC Examples OpenConfig paths Configure BGP neighbor address and peer AS gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip set \\ --update-path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.43]' \\ --update-file value.json value.json : {\"config\": {\"neighbor-address\":\"198.51.100.43\", \"peer-as\": 123}} Output: { \"timestamp\": 1626305876151537555, \"time\": \"2021-07-15T00:37:56.151537555+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.43]\" } ] } Configure BGP neighbor address, peer AS and send-community gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip set \\ --update-path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.43]' \\ --update-file value.json value.json : {\"config\": {\"neighbor-address\":\"198.51.100.43\", \"peer-as\": 123, \"enabled\": true, \"send-community\": \"EXTENDED\"}} Output: { \"timestamp\": 1626305480401353997, \"time\": \"2021-07-15T00:31:20.401353997+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.43]\" } ] } Create BGP peer group gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip set \\ --update-path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/peer-groups/peer-group[peer-group-name=XYZ]' \\ --update-file value.json value.json : {\"config\": {\"peer-group-name\":\"XYZ\", \"local-as\": 114}} Update BGP peer AS gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip set \\ --update-path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.43]/config/peer-as' \\ --update-value '110' Output: { \"timestamp\": 1626306067189329813, \"time\": \"2021-07-15T00:41:07.189329813+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.43]/config/peer-as\" } ] } Update BGP peer group gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip set \\ --update-path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.43]/config/peer-group' \\ --update-value 'XYZ' Output: { \"timestamp\": 1626306067189329813, \"time\": \"2021-07-15T00:41:07.189329813+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.43]/config/peer-as\" } ] } Create an ACL gnmic -a 192.0.2.108:6030 -u cvpadmin -p arista --insecure --gzip set \\ --update-path /acl/acl-sets \\ --update-file acl2.json Output: { \"timestamp\": 1626307972085688242, \"time\": \"2021-07-15T01:12:52.085688242+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"acl/acl-sets\" } ] } acl2.json { \"acl-set\": [ { \"config\": { \"name\": \"test\", \"type\": \"ACL_IPV4\" }, \"name\": \"test\", \"type\": \"ACL_IPV4\", \"acl-entries\": { \"acl-entry\": [ { \"sequence-id\": 10, \"actions\": { \"config\": { \"forwarding-action\": \"DROP\" } }, \"config\": { \"sequence-id\": 10 }, \"ipv4\": { \"config\": { \"destination-address\": \"192.0.2.0/24\", \"source-address\": \"0.0.0.0/0\" } } } ] } } ] } This creates ip access-list test 10 deny ip any 192.0.2.0/24 Shutdown an interface gnmic -a 192.0.2.108:6030 -u cvpadmin -p arista --insecure --gzip set \\ --update-path '/interfaces/interface[name=Ethernet1]/config/enabled' \\ --update-value 'false' { \"timestamp\": 1626309145489047571, \"time\": \"2021-07-15T01:32:25.489047571+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"interfaces/interface[name=Ethernet1]/config/enabled\" } ] } Bring up an interface gnmic -a 192.0.2.108:6030 -u cvpadmin -p arista --insecure --gzip set \\ --update-path '/interfaces/interface[name=Ethernet1]/config/enabled' \\ --update-value 'true' { \"timestamp\": 1626309156607307596, \"time\": \"2021-07-15T01:32:36.607307596+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"interfaces/interface[name=Ethernet1]/config/enabled\" } ] } EOS Native paths To get EOS native paths, OCTA has to be enabled as mentioned in the configuration section. Performing GET/SUBSCRIBE actions using EOS native paths require changing the origin to eos_native . Commonly used paths MAC table: /Smash/bridging/status/smashFdbStatus ARP table: /Smash/arp/status/arpEntry Neighbor table: /Smash/arp/status/neighborEntry IPv4 RIB: /Smash/routing/status/route IPv6 RIB: /Smash/routing6/status/route IPv4 next-hop table: /Smash/routing/status/nexthop IPv6 next-hop table: /Smash/routing6/status/nexthop CPU info: /Kernel/proc/cpu Process statistics: /Kernel/proc/stat System info: /Kernel/sysinfo EOS version: /Eos/image Interface counters: /Smash/counters/ethIntf/<agent>/current/counter Values for <agent> are: 7500-family, 7280-family, 7020-family (Arad/Jericho ASICs): SandCounters 7300-family, 7250-family, 7050-family, 7010 products, 720-family (Trident ASICs): StrataCounters For 7060-family, 7260-family (Tomahawk): Strata-FixedSystem or StrataCounters from 4.22+ 7150-family products (Alta ASICs): FocalPointV2 7160-family products (Cavium/Xpliant ASICs): XpCounters 7170-family products (Barefoot ASIC): BfnCounters Get CPU utilization gnmic -a 192.0.2.108:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ 'eos_native:/Kernel/proc/cpu/utilization/total' Reveal output [ { \"timestamp\": 1626291721294738334, \"time\": \"2021-07-14T20:42:01.294738334+01:00\", \"prefix\": \"eos_native:Kernel/proc/cpu/utilization/total\", \"updates\": [ { \"Path\": \"name\", \"values\": { \"name\": \"total\" } }, { \"Path\": \"nice\", \"values\": { \"nice\": 28845 } }, { \"Path\": \"util\", \"values\": { \"util\": 41 } }, { \"Path\": \"user\", \"values\": { \"user\": 32058347 } }, { \"Path\": \"system\", \"values\": { \"system\": 4597389 } }, { \"Path\": \"idle\", \"values\": { \"idle\": 76373566 } } ] } ] Get transceiver DOM temperature gnmic -a 192.0.2.1:6030 -u admin -p admin --insecure --gzip get --path \\ eos_native:/Sysdb/hardware/archer/xcvr/status >> outputs/doms.json Get EOS image version gnmic -a 192.0.2.1:6030 -u admin -p admin --insecure --gzip get \\ --path eos_native:/Eos/image >> outputs/eos_image.json Cli origin Get the running config gnmic -a 192.0.2.1:6030 -u admin -p admin --insecure get \\ --path \"cli:/show running-config\" >> outputs/outputs.json Get the total route count gnmic -a 192.0.2.1:6030 -u admin -p admin --insecure get \\ --path \"cli:/show ip route summary\" \\ | jq '.[0].updates[0].values.\"show ip route summary\".totalRoutes' Changing the running-config There are multiple ways to change the configuration using the cli origin: Using JSON Multiple config sections can be change at a time, for instance in the below example vlan 304 is created and the description of Ethernet1 is changed: gnmic -a 192.0.2.214:6030 -u admin -p admin --insecure --gzip set \\ --request-file intf.json Output: Reveal output { \"timestamp\": 1628103804792021864, \"time\": \"2021-08-04T20:03:24.792021864+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"cli:\" }, { \"operation\": \"UPDATE\", \"path\": \"cli:\" }, { \"operation\": \"UPDATE\", \"path\": \"cli:\" }, { \"operation\": \"UPDATE\", \"path\": \"cli:\" } ] } cat intf.json { \"updates\": [ { \"path\": \"cli:\", \"value\": \"interface Ethernet 1\", \"encoding\": \"ascii\" }, { \"path\": \"cli:\", \"value\": \"description arista-openmgmt\", \"encoding\": \"ascii\" }, { \"path\": \"cli:\", \"value\": \"vlan 304\", \"encoding\": \"ascii\" }, { \"path\": \"cli:\", \"value\": \"name test\", \"encoding\": \"ascii\" } ] } Using YAML Changing the maximum-routes for a BGP neighbor: gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip set \\ --request-file bgp.yaml Output: Reveal output { \"timestamp\": 1628091791855672771, \"time\": \"2021-08-04T16:43:11.855672771+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"cli:\" }, { \"operation\": \"UPDATE\", \"path\": \"cli:\" } ] } cat bgp.yaml updates: - path: \"cli:\" value: router bgp 65101 encoding: ascii - path: \"cli:\" value: neighbor IPv4-UNDERLAY-PEERS maximum-routes 15500 encoding: ascii Using imperative commands gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip \\ --encoding ASCII set \\ --update-path \"cli:\" \\ --update-value \"router bgp 65101\" \\ --update-path \"cli:\" \\ --update-value \"neighbor IPv4-UNDERLAY-PEERS maximum-routes 13500\" Output: Reveal output { \"timestamp\": 1628091405938523430, \"time\": \"2021-08-04T16:36:45.93852343+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"cli:\" }, { \"operation\": \"UPDATE\", \"path\": \"cli:\" } ] } Misc Save all status states to a file gnmic -a 192.0.2.1:6030 -u admin -p admin --insecure get \\ --path \".../state/...\" >> outputs/states.json Save all config states to a file gnmic -a 192.0.2.1:6030 -u admin -p admin --insecure get \\ --path \".../config/...\" >> outputs/configs.json Save network instance states to a file gnmic -a 192.0.2.1:6030 -u admin -p admin --insecure get --path \\ /network-instances/network-instance >> outputs/network-instances.json Save BGP states to a file gnmic -a 192.0.2.1:6030 -u admin -p admin --insecure get --path \\ /network-instances/network-instance[name=default]/protocols/protocol[name=BGP]\\ >> outputs/bgp.json","title":"gnmic"},{"location":"examples/gnmi-clients/gnmic/#overview","text":"The following examples are used to find openconfig paths within Arista EOS using the gNMIC binary . There will be some commands which will specify one liners which will have the address of the gNMI target and some commands which will use the .gnmic.yaml file which will have the target information inside declared. All outputs will be redirected to the outputs file with the .json extension so they are easier to view within a text editor.","title":"overview"},{"location":"examples/gnmi-clients/gnmic/#download-install-gnmic","text":"To install run: bash -c \"$(curl -sL https://get-gnmic.kmrd.dev)\" To get the version run: gnmi_stuff$ gnmic version Output: version : 0.17.0 commit : 278661e date : 2021-07-14T07:29:14Z gitURL : https://github.com/karimra/gnmic docs : https://gnmic.kmrd.dev","title":"Download &amp;&amp; install gnmic"},{"location":"examples/gnmi-clients/gnmic/#device-config","text":"management api gnmi transport grpc default provider eos-native ceos3# show management api gnmi Octa: enabled Enabled: Yes Server: running on port 6030 SSL Profile: none QoS DSCP: none Authorization Required:No gnmic -a 192.0.2.1:6030 -u admin -p admin --insecure capabilities \\ >> outputs/capabilities.json","title":"Device config"},{"location":"examples/gnmi-clients/gnmic/#gnmi-get-rpc-examples","text":"","title":"gNMI GET RPC Examples"},{"location":"examples/gnmi-clients/gnmic/#openconfig-paths","text":"","title":"OpenConfig paths"},{"location":"examples/gnmi-clients/gnmic/#get-all-information","text":"gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \"/\"","title":"Get all information"},{"location":"examples/gnmi-clients/gnmic/#get-the-bgp-configuration-in-the-default-vrf","text":"gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ '/network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp'`","title":"Get the BGP configuration in the default VRF"},{"location":"examples/gnmi-clients/gnmic/#get-bgp-neighbors","text":"gnmi -addr 192.0.2.139 -username admin get \\ '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors'","title":"Get BGP neighbors"},{"location":"examples/gnmi-clients/gnmic/#get-all-interface-descriptions","text":"gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ '/interfaces/interface/subinterfaces/subinterface/state/description'","title":"Get all interface descriptions"},{"location":"examples/gnmi-clients/gnmic/#get-an-interfaces-description","text":"gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ 'interfaces/interface[name=Ethernet1]/subinterfaces/subinterface/state/description' [ { \"timestamp\": 1626293671204274106, \"time\": \"2021-07-14T21:14:31.204274106+01:00\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Ethernet1]/subinterfaces/subinterface[index=0]/state/description\", \"values\": { \"interfaces/interface/subinterfaces/subinterface/state/description\": \"To-SPINE1\" } } ] } ]","title":"Get an interface's description"},{"location":"examples/gnmi-clients/gnmic/#get-the-operational-status-of-all-interfaces","text":"gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ 'interfaces/interface/state/oper-status' Reveal output [ { \"timestamp\": 1626293641102904713, \"time\": \"2021-07-14T21:14:01.102904713+01:00\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Management1]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Ethernet1]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Ethernet5]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Ethernet4]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Ethernet3]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Ethernet2]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Port-Channel4]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } }, { \"Path\": \"interfaces/interface[name=Port-Channel3]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } } ] } ]","title":"Get the operational status of all interfaces"},{"location":"examples/gnmi-clients/gnmic/#get-all-states-of-an-interface","text":"gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ 'interfaces/interface[name=Ethernet1]/state/' Reveal output [[ { \"timestamp\": 1626293429376469348, \"time\": \"2021-07-14T21:10:29.376469348+01:00\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Ethernet1]/state\", \"values\": { \"interfaces/interface/state\": { \"arista-intf-augments:inactive\": false, \"openconfig-interfaces:admin-status\": \"UP\", \"openconfig-interfaces:counters\": { \"in-broadcast-pkts\": \"0\", \"in-discards\": \"0\", \"in-errors\": \"0\", \"in-fcs-errors\": \"0\", \"in-multicast-pkts\": \"48\", \"in-octets\": \"111398\", \"in-unicast-pkts\": \"1460\", \"out-broadcast-pkts\": \"1\", \"out-discards\": \"0\", \"out-errors\": \"0\", \"out-multicast-pkts\": \"49\", \"out-octets\": \"117389\", \"out-unicast-pkts\": \"1457\" }, \"openconfig-interfaces:description\": \"To-SPINE1\", \"openconfig-interfaces:ifindex\": 1, \"openconfig-interfaces:last-change\": \"1626292006733589760\", \"openconfig-interfaces:mtu\": 0, \"openconfig-interfaces:name\": \"Ethernet1\", \"openconfig-interfaces:oper-status\": \"UP\", \"openconfig-interfaces:type\": \"iana-if-type:ethernetCsmacd\", \"openconfig-platform-port:hardware-port\": \"Port1\" } } } ] } ]","title":"Get all states of an interface"},{"location":"examples/gnmi-clients/gnmic/#get-an-interfaces-operational-status","text":"gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ 'interfaces/interface[name=Ethernet24]/state/oper-status' [ { \"timestamp\": 1626293414057239130, \"time\": \"2021-07-14T21:10:14.05723913+01:00\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Ethernet2]/state/oper-status\", \"values\": { \"interfaces/interface/state/oper-status\": \"UP\" } } ] } ]","title":"Get an interface's operational status"},{"location":"examples/gnmi-clients/gnmic/#get-an-interfaces-admin-status","text":"gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ 'interfaces/interface[name=Ethernet1]/state/admin-status' [ { \"timestamp\": 1626293085257457373, \"time\": \"2021-07-14T21:04:45.257457373+01:00\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Ethernet1]/state/admin-status\", \"values\": { \"interfaces/interface/state/admin-status\": \"UP\" } } ] } ]","title":"Get an interface's admin status"},{"location":"examples/gnmi-clients/gnmic/#get-the-dom-metrics-of-all-interfaces","text":"gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ \"components/component/transceiver/physical-channels/channel/state/\" Reveal output [ { \"timestamp\": 1626293085257457373, \"time\": \"2021-07-14T21:04:45.257457373+01:00\", \"updates\": [ { \"Path\": \"components/component[name=Ethernet49 transceiver]/transceiver/physical-channels/channel[index=0]/state\", \"values\": { \"components/component/transceiver/physical-channels/channel/state\": { \"openconfig-platform-transceiver:index\": 0, \"openconfig-platform-transceiver:input-power\": { \"instant\": \"1.15\" }, \"openconfig-platform-transceiver:laser-bias-current\": { \"instant\": \"0.0\" }, \"openconfig-platform-transceiver:output-power\": {} } } }, { \"Path\": \"components/component[name=Ethernet50 transceiver]/transceiver/physical-channels/channel[index=0]/state\", \"values\": { \"components/component/transceiver/physical-channels/channel/state\": { \"openconfig-platform-transceiver:index\": 0, \"openconfig-platform-transceiver:input-power\": { \"instant\": \"1.11\" }, \"openconfig-platform-transceiver:laser-bias-current\": { \"instant\": \"0.0\" }, \"openconfig-platform-transceiver:output-power\": {} } } } ] } ]","title":"Get the DOM metrics of all interfaces"},{"location":"examples/gnmi-clients/gnmic/#get-the-dom-metrics-of-an-interface","text":"gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ \"components/component[name=Ethernet49 transceiver]/transceiver/physical-channels/channel/state/\" Reveal output [ { \"time\": \"1970-01-01T01:00:00+01:00\", \"updates\": [ { \"Path\": \"components/component[name=Ethernet49 transceiver]/transceiver/physical-channels/channel[index=0]/state\", \"values\": { \"components/component/transceiver/physical-channels/channel/state\": { \"openconfig-platform-transceiver:index\": 0, \"openconfig-platform-transceiver:input-power\": { \"instant\": \"1.08\" }, \"openconfig-platform-transceiver:laser-bias-current\": { \"instant\": \"0.0\" }, \"openconfig-platform-transceiver:output-power\": {} } } } ] } ]","title":"Get the DOM metrics of an interface"},{"location":"examples/gnmi-clients/gnmic/#get-per-core-cpu-utilization","text":"gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ 'components/component/cpu' Reveal output [ { \"timestamp\": 1626294810779644595, \"time\": \"2021-07-14T21:33:30.779644595+01:00\", \"updates\": [ { \"Path\": \"components/component[name=CPU1]/cpu\", \"values\": { \"components/component/cpu\": { \"openconfig-platform-cpu:utilization\": { \"state\": { \"avg\": 6, \"instant\": 6, \"interval\": \"1000000000000\", \"max\": 14, \"max-time\": \"3252585270429488128\", \"min\": 2, \"min-time\": \"3252586330424618496\" } } } } }, { \"Path\": \"components/component[name=CPU0]/cpu\", \"values\": { \"components/component/cpu\": { \"openconfig-platform-cpu:utilization\": { \"state\": { \"avg\": 5, \"instant\": 7, \"interval\": \"1000000000000\", \"max\": 13, \"max-time\": \"3252586170423993344\", \"min\": 1, \"min-time\": \"3252585340433252352\" } } } } } ] } ]","title":"Get per core CPU utilization"},{"location":"examples/gnmi-clients/gnmic/#get-the-availableutilized-memory","text":"gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ 'components/component/state/memory/' [ { \"timestamp\": 1626294846423115892, \"time\": \"2021-07-14T21:34:06.423115892+01:00\", \"updates\": [ { \"Path\": \"components/component[name=Chassis]/state/memory\", \"values\": { \"components/component/state/memory\": { \"openconfig-platform:available\": \"4098412544\", \"openconfig-platform:utilized\": \"4018016256\" } } } ] } ]","title":"Get the available/utilized memory"},{"location":"examples/gnmi-clients/gnmic/#get-the-system-environment-temperatures","text":"gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ 'components/component/state/temperature/instant' Reveal output [ { \"timestamp\": 1626294876186613578, \"time\": \"2021-07-14T21:34:36.186613578+01:00\" \"updates\": [ { \"Path\": \"components/component[name=DomTemperatureSensor50]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 2709375, \"precision\": 5 } } }, { \"Path\": \"components/component[name=DomTemperatureSensor49]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 27140625, \"precision\": 6 } } }, { \"Path\": \"components/component[name=TempSensor7]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 41168000000000006, \"precision\": 15 } } }, { \"Path\": \"components/component[name=TempSensor8]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 4225279999999998, \"precision\": 14 } } }, { \"Path\": \"components/component[name=TempSensor9]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 4062560000000002, \"precision\": 14 } } }, { \"Path\": \"components/component[name=TempSensor1]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 39141723894742796, \"precision\": 15 } } }, { \"Path\": \"components/component[name=TempSensor6]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 23875, \"precision\": 3 } } }, { \"Path\": \"components/component[name=TempSensor3]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 21 } } }, { \"Path\": \"components/component[name=TempSensor4]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 1725, \"precision\": 2 } } }, { \"Path\": \"components/component[name=TempSensor5]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 29 } } }, { \"Path\": \"components/component[name=TempSensor2]/state/temperature/instant\", \"values\": { \"components/component/state/temperature/instant\": { \"digits\": 32 } } } ] } ]","title":"Get the system environment temperatures"},{"location":"examples/gnmi-clients/gnmic/#gnmi-subscribe-rpc-examples","text":"","title":"gNMI SUBSCRIBE RPC Examples"},{"location":"examples/gnmi-clients/gnmic/#openconfig-paths_1","text":"","title":"OpenConfig paths"},{"location":"examples/gnmi-clients/gnmic/#subscribe-to-all-bgp-neighbor-states","text":"gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip subscribe --path \\ '/network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state' Reveal output { \"source\": \"192.0.2.214:6030\", \"subscription-name\": \"default-1626302647\", \"timestamp\": 1626292010055258009, \"time\": \"2021-07-14T20:46:50.055258009+01:00\", \"updates\": [ { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=172.18.255.42]/state/messages/sent/UPDATE\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/messages/sent/UPDATE\": 8 } } ] } { \"source\": \"192.0.2.214:6030\", \"subscription-name\": \"default-1626302647\", \"timestamp\": 1626292008053994815, \"time\": \"2021-07-14T20:46:48.053994815+01:00\", \"updates\": [ { \"Path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=172.18.255.42]/state/established-transitions\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/established-transitions\": 1 } } ] }","title":"Subscribe to all BGP neighbor states"},{"location":"examples/gnmi-clients/gnmic/#subscribe-to-specific-bgp-neighbor-state","text":"gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip subscribe --path \\ 'network-instances/network-instance[name=Tenant_A_WEB_Zone]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.21]/state' Reveal output { \"source\": \"192.0.2.214:6030\", \"subscription-name\": \"default-1626303017\", \"timestamp\": 1626302991598465536, \"time\": \"2021-07-14T23:49:51.598465536+01:00\", \"updates\": [ { \"Path\": \"network-instances/network-instance[name=Tenant_A_WEB_Zone]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.21]/state/last-established\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state/last-established\": 1626302991563603200 } } ] }","title":"Subscribe to specific BGP neighbor state"},{"location":"examples/gnmi-clients/gnmic/#subscribe-with-stream-mode-sample-and-interval","text":"gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip --sample-interval 5s --stream-mode sample subscribe --path \\ '/network-instances/network-instance[name=Tenant_A_WEB_Zone]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.21]/afi-safis/afi-safi[afi-safi-name=openconfig-bgp-types:IPV4_UNICAST]/state/prefixes/received' Reveal output { \"source\": \"192.0.2.214:6030\", \"subscription-name\": \"default-1626303393\", \"timestamp\": 1626303158135414182, \"time\": \"2021-07-14T23:52:38.135414182+01:00\", \"updates\": [ { \"Path\": \"network-instances/network-instance[name=Tenant_A_WEB_Zone]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.21]/afi-safis/afi-safi[afi-safi-name=IPV4_UNICAST]/state/prefixes/received\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/received\": 5 } } ] } { \"source\": \"192.0.2.214:6030\", \"subscription-name\": \"default-1626303393\", \"timestamp\": 1626303158135414182, \"time\": \"2021-07-14T23:52:38.135414182+01:00\", \"updates\": [ { \"Path\": \"network-instances/network-instance[name=Tenant_A_WEB_Zone]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.21]/afi-safis/afi-safi[afi-safi-name=IPV4_UNICAST]/state/prefixes/received\", \"values\": { \"network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/received\": 5 } } ] }","title":"Subscribe with stream mode sample and interval"},{"location":"examples/gnmi-clients/gnmic/#subscribe-to-interface-counters-and-save-them-to-a-file","text":"gnmic -a 192.0.2.1:6030 -u admin -p admin --insecure subscribe --path \\ \"/interfaces/interface/state/counters\" >> outputs/interface_state.json","title":"Subscribe to interface counters and save them to a file"},{"location":"examples/gnmi-clients/gnmic/#gnmi-set-rpc-examples","text":"","title":"gNMI SET RPC Examples"},{"location":"examples/gnmi-clients/gnmic/#openconfig-paths_2","text":"","title":"OpenConfig paths"},{"location":"examples/gnmi-clients/gnmic/#configure-bgp-neighbor-address-and-peer-as","text":"gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip set \\ --update-path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.43]' \\ --update-file value.json value.json : {\"config\": {\"neighbor-address\":\"198.51.100.43\", \"peer-as\": 123}} Output: { \"timestamp\": 1626305876151537555, \"time\": \"2021-07-15T00:37:56.151537555+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.43]\" } ] }","title":"Configure BGP neighbor address and peer AS"},{"location":"examples/gnmi-clients/gnmic/#configure-bgp-neighbor-address-peer-as-and-send-community","text":"gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip set \\ --update-path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.43]' \\ --update-file value.json value.json : {\"config\": {\"neighbor-address\":\"198.51.100.43\", \"peer-as\": 123, \"enabled\": true, \"send-community\": \"EXTENDED\"}} Output: { \"timestamp\": 1626305480401353997, \"time\": \"2021-07-15T00:31:20.401353997+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.43]\" } ] }","title":"Configure BGP neighbor address, peer AS and send-community"},{"location":"examples/gnmi-clients/gnmic/#create-bgp-peer-group","text":"gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip set \\ --update-path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/peer-groups/peer-group[peer-group-name=XYZ]' \\ --update-file value.json value.json : {\"config\": {\"peer-group-name\":\"XYZ\", \"local-as\": 114}}","title":"Create BGP peer group"},{"location":"examples/gnmi-clients/gnmic/#update-bgp-peer-as","text":"gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip set \\ --update-path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.43]/config/peer-as' \\ --update-value '110' Output: { \"timestamp\": 1626306067189329813, \"time\": \"2021-07-15T00:41:07.189329813+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.43]/config/peer-as\" } ] }","title":"Update BGP peer AS"},{"location":"examples/gnmi-clients/gnmic/#update-bgp-peer-group","text":"gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip set \\ --update-path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.43]/config/peer-group' \\ --update-value 'XYZ' Output: { \"timestamp\": 1626306067189329813, \"time\": \"2021-07-15T00:41:07.189329813+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp/neighbors/neighbor[neighbor-address=198.51.100.43]/config/peer-as\" } ] }","title":"Update BGP peer group"},{"location":"examples/gnmi-clients/gnmic/#create-an-acl","text":"gnmic -a 192.0.2.108:6030 -u cvpadmin -p arista --insecure --gzip set \\ --update-path /acl/acl-sets \\ --update-file acl2.json Output: { \"timestamp\": 1626307972085688242, \"time\": \"2021-07-15T01:12:52.085688242+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"acl/acl-sets\" } ] } acl2.json { \"acl-set\": [ { \"config\": { \"name\": \"test\", \"type\": \"ACL_IPV4\" }, \"name\": \"test\", \"type\": \"ACL_IPV4\", \"acl-entries\": { \"acl-entry\": [ { \"sequence-id\": 10, \"actions\": { \"config\": { \"forwarding-action\": \"DROP\" } }, \"config\": { \"sequence-id\": 10 }, \"ipv4\": { \"config\": { \"destination-address\": \"192.0.2.0/24\", \"source-address\": \"0.0.0.0/0\" } } } ] } } ] } This creates ip access-list test 10 deny ip any 192.0.2.0/24","title":"Create an ACL"},{"location":"examples/gnmi-clients/gnmic/#shutdown-an-interface","text":"gnmic -a 192.0.2.108:6030 -u cvpadmin -p arista --insecure --gzip set \\ --update-path '/interfaces/interface[name=Ethernet1]/config/enabled' \\ --update-value 'false' { \"timestamp\": 1626309145489047571, \"time\": \"2021-07-15T01:32:25.489047571+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"interfaces/interface[name=Ethernet1]/config/enabled\" } ] }","title":"Shutdown an interface"},{"location":"examples/gnmi-clients/gnmic/#bring-up-an-interface","text":"gnmic -a 192.0.2.108:6030 -u cvpadmin -p arista --insecure --gzip set \\ --update-path '/interfaces/interface[name=Ethernet1]/config/enabled' \\ --update-value 'true' { \"timestamp\": 1626309156607307596, \"time\": \"2021-07-15T01:32:36.607307596+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"interfaces/interface[name=Ethernet1]/config/enabled\" } ] }","title":"Bring up an interface"},{"location":"examples/gnmi-clients/gnmic/#eos-native-paths","text":"To get EOS native paths, OCTA has to be enabled as mentioned in the configuration section. Performing GET/SUBSCRIBE actions using EOS native paths require changing the origin to eos_native .","title":"EOS Native paths"},{"location":"examples/gnmi-clients/gnmic/#commonly-used-paths","text":"MAC table: /Smash/bridging/status/smashFdbStatus ARP table: /Smash/arp/status/arpEntry Neighbor table: /Smash/arp/status/neighborEntry IPv4 RIB: /Smash/routing/status/route IPv6 RIB: /Smash/routing6/status/route IPv4 next-hop table: /Smash/routing/status/nexthop IPv6 next-hop table: /Smash/routing6/status/nexthop CPU info: /Kernel/proc/cpu Process statistics: /Kernel/proc/stat System info: /Kernel/sysinfo EOS version: /Eos/image Interface counters: /Smash/counters/ethIntf/<agent>/current/counter Values for <agent> are: 7500-family, 7280-family, 7020-family (Arad/Jericho ASICs): SandCounters 7300-family, 7250-family, 7050-family, 7010 products, 720-family (Trident ASICs): StrataCounters For 7060-family, 7260-family (Tomahawk): Strata-FixedSystem or StrataCounters from 4.22+ 7150-family products (Alta ASICs): FocalPointV2 7160-family products (Cavium/Xpliant ASICs): XpCounters 7170-family products (Barefoot ASIC): BfnCounters","title":"Commonly used paths"},{"location":"examples/gnmi-clients/gnmic/#get-cpu-utilization","text":"gnmic -a 192.0.2.108:6030 -u cvpadmin -p arista --insecure --gzip get --path \\ 'eos_native:/Kernel/proc/cpu/utilization/total' Reveal output [ { \"timestamp\": 1626291721294738334, \"time\": \"2021-07-14T20:42:01.294738334+01:00\", \"prefix\": \"eos_native:Kernel/proc/cpu/utilization/total\", \"updates\": [ { \"Path\": \"name\", \"values\": { \"name\": \"total\" } }, { \"Path\": \"nice\", \"values\": { \"nice\": 28845 } }, { \"Path\": \"util\", \"values\": { \"util\": 41 } }, { \"Path\": \"user\", \"values\": { \"user\": 32058347 } }, { \"Path\": \"system\", \"values\": { \"system\": 4597389 } }, { \"Path\": \"idle\", \"values\": { \"idle\": 76373566 } } ] } ]","title":"Get CPU utilization"},{"location":"examples/gnmi-clients/gnmic/#get-transceiver-dom-temperature","text":"gnmic -a 192.0.2.1:6030 -u admin -p admin --insecure --gzip get --path \\ eos_native:/Sysdb/hardware/archer/xcvr/status >> outputs/doms.json","title":"Get transceiver DOM temperature"},{"location":"examples/gnmi-clients/gnmic/#get-eos-image-version","text":"gnmic -a 192.0.2.1:6030 -u admin -p admin --insecure --gzip get \\ --path eos_native:/Eos/image >> outputs/eos_image.json","title":"Get EOS image version"},{"location":"examples/gnmi-clients/gnmic/#cli-origin","text":"","title":"Cli origin"},{"location":"examples/gnmi-clients/gnmic/#get-the-running-config","text":"gnmic -a 192.0.2.1:6030 -u admin -p admin --insecure get \\ --path \"cli:/show running-config\" >> outputs/outputs.json","title":"Get the running config"},{"location":"examples/gnmi-clients/gnmic/#get-the-total-route-count","text":"gnmic -a 192.0.2.1:6030 -u admin -p admin --insecure get \\ --path \"cli:/show ip route summary\" \\ | jq '.[0].updates[0].values.\"show ip route summary\".totalRoutes'","title":"Get the total route count"},{"location":"examples/gnmi-clients/gnmic/#changing-the-running-config","text":"There are multiple ways to change the configuration using the cli origin:","title":"Changing the running-config"},{"location":"examples/gnmi-clients/gnmic/#using-json","text":"Multiple config sections can be change at a time, for instance in the below example vlan 304 is created and the description of Ethernet1 is changed: gnmic -a 192.0.2.214:6030 -u admin -p admin --insecure --gzip set \\ --request-file intf.json Output: Reveal output { \"timestamp\": 1628103804792021864, \"time\": \"2021-08-04T20:03:24.792021864+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"cli:\" }, { \"operation\": \"UPDATE\", \"path\": \"cli:\" }, { \"operation\": \"UPDATE\", \"path\": \"cli:\" }, { \"operation\": \"UPDATE\", \"path\": \"cli:\" } ] } cat intf.json { \"updates\": [ { \"path\": \"cli:\", \"value\": \"interface Ethernet 1\", \"encoding\": \"ascii\" }, { \"path\": \"cli:\", \"value\": \"description arista-openmgmt\", \"encoding\": \"ascii\" }, { \"path\": \"cli:\", \"value\": \"vlan 304\", \"encoding\": \"ascii\" }, { \"path\": \"cli:\", \"value\": \"name test\", \"encoding\": \"ascii\" } ] }","title":"Using JSON"},{"location":"examples/gnmi-clients/gnmic/#using-yaml","text":"Changing the maximum-routes for a BGP neighbor: gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip set \\ --request-file bgp.yaml Output: Reveal output { \"timestamp\": 1628091791855672771, \"time\": \"2021-08-04T16:43:11.855672771+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"cli:\" }, { \"operation\": \"UPDATE\", \"path\": \"cli:\" } ] } cat bgp.yaml updates: - path: \"cli:\" value: router bgp 65101 encoding: ascii - path: \"cli:\" value: neighbor IPv4-UNDERLAY-PEERS maximum-routes 15500 encoding: ascii","title":"Using YAML"},{"location":"examples/gnmi-clients/gnmic/#using-imperative-commands","text":"gnmic -a 192.0.2.214:6030 -u cvpadmin -p arista --insecure --gzip \\ --encoding ASCII set \\ --update-path \"cli:\" \\ --update-value \"router bgp 65101\" \\ --update-path \"cli:\" \\ --update-value \"neighbor IPv4-UNDERLAY-PEERS maximum-routes 13500\" Output: Reveal output { \"timestamp\": 1628091405938523430, \"time\": \"2021-08-04T16:36:45.93852343+01:00\", \"results\": [ { \"operation\": \"UPDATE\", \"path\": \"cli:\" }, { \"operation\": \"UPDATE\", \"path\": \"cli:\" } ] }","title":"Using imperative commands"},{"location":"examples/gnmi-clients/gnmic/#misc","text":"","title":"Misc"},{"location":"examples/gnmi-clients/gnmic/#save-all-status-states-to-a-file","text":"gnmic -a 192.0.2.1:6030 -u admin -p admin --insecure get \\ --path \".../state/...\" >> outputs/states.json","title":"Save all status states to a file"},{"location":"examples/gnmi-clients/gnmic/#save-all-config-states-to-a-file","text":"gnmic -a 192.0.2.1:6030 -u admin -p admin --insecure get \\ --path \".../config/...\" >> outputs/configs.json","title":"Save all config states to a file"},{"location":"examples/gnmi-clients/gnmic/#save-network-instance-states-to-a-file","text":"gnmic -a 192.0.2.1:6030 -u admin -p admin --insecure get --path \\ /network-instances/network-instance >> outputs/network-instances.json","title":"Save network instance states to a file"},{"location":"examples/gnmi-clients/gnmic/#save-bgp-states-to-a-file","text":"gnmic -a 192.0.2.1:6030 -u admin -p admin --insecure get --path \\ /network-instances/network-instance[name=default]/protocols/protocol[name=BGP]\\ >> outputs/bgp.json","title":"Save BGP states to a file"},{"location":"examples/gnmi-gateway/","text":"Overview gNMI gateway is an opensource project created by Netflix. Conceptually, gNMI gateway sits as a proxy for multiple gNMI targets. A gNMI client speaks to a common gNMI service endpoint within the network (gNMI gateway) and specifies a gNMI target with an accompanying path. The gNMI gateway will in turn initiate the connection to the target device and stream the contents to the originating proxy. gNMI gateway documentation NANOG demonstration This demo will start the gNMI gateway binary and use gNMIC to stream to a target which is managed by the gNMI gateway. Please make adjustments to the targets.json file to match your environment. The demo is dependent on the following files: gnmi-gateway - The binary to activate gNMI gateway. This must be built for the platform that it will run on. Details regarding generation of the binary for the target platform can be found in the gNMI gateway documentation . server.crt / server.key - the certificate and key for gNMI gateway. These can be generated through a CA. Additional details may be found here . targets.json - This file specifies the targets. gNMI-gateway supports hot reloading of the files. So if changes are made within targets.json it will reload automatically with new targets and or new paths. sample: targets.json { \"request\": { \"default\": { \"subscribe\": { \"prefix\": { }, \"subscription\": [ { \"path\": { \"elem\": [ { \"name\": \"interfaces\" } ] } } ] } } }, \"target\": { \"DC2-SP02\": { \"addresses\": [ \"198.51.100.22:6030\" ], \"credentials\": { \"username\": \"ansible\", \"password\": \"ansible\" }, \"request\": \"default\", \"meta\": { \"NoTLS\": \"yes\" } }, \"DC2-LEAF1A\": { \"addresses\": [ \"198.51.100.5:6030\" ], \"credentials\": { \"username\": \"ansible\", \"password\": \"ansible\" }, \"request\": \"default\", \"meta\": { \"NoTLS\": \"yes\" } }, \"DC2-LF70\": { \"addresses\": [ \"198.51.100.70:6030\" ], \"credentials\": { \"username\": \"ansible\", \"password\": \"ansible\" }, \"request\": \"default\", \"meta\": { \"NoTLS\": \"yes\" } } } } EOS Configuration gNMI will need to be enabled on the target which is managed by gNMI gateway and a certificate will need to be installed to use TLS-based authentication. Additional details regarding enabling gnmi on EOS devices can be found here . Additional details regarding certificate management and configuration can be found here . Start gNMI gateway Note, the server.crt must be signed by a CA that the switch can resolve. gnmi-gateway -EnableGNMIServer -ServerTLSCert=server.crt \\ -ServerTLSKey=server.key -TargetLoaders=json -TargetJSONFile=targets.json Output: Reveal Output {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Starting GNMI Gateway.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Clustering is NOT enabled. No locking or cluster coordination will happen.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Starting connection manager.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Starting gNMI server on 0.0.0.0:9339.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Connection manager received a target control message: 3 inserts 0 removes\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Initializing target DC2-SP02 ([198.51.100.22:6030]) map[NoTLS:yes].\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Initializing target DC2-LEAF1A ([198.51.100.5:6030]) map[NoTLS:yes].\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-SP02: Connecting\"} {\"level\":\"warn\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"DEPRECATED: The 'NoTLS' target flag has been deprecated and will be removed in a future release. Please use 'NoTLSVerify' instead.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-SP02: Subscribing\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Initializing target DC2-LF70 ([198.51.100.70:6030]) map[NoTLS:yes].\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-LEAF1A: Connecting\"} {\"level\":\"warn\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"DEPRECATED: The 'NoTLS' target flag has been deprecated and will be removed in a future release. Please use 'NoTLSVerify' instead.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-LEAF1A: Subscribing\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-LF70: Connecting\"} {\"level\":\"warn\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"DEPRECATED: The 'NoTLS' target flag has been deprecated and will be removed in a future release. Please use 'NoTLSVerify' instead.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-LF70: Subscribing\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-SP02: Connected\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:36-04:00\",\"message\":\"Target DC2-LF70: Connected\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:36-04:00\",\"message\":\"Target DC2-LEAF1A: Connected\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:37-04:00\",\"message\":\"Target DC2-LF70: Synced\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:37-04:00\",\"message\":\"Target DC2-SP02: Synced\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:38-04:00\",\"message\":\"Target DC2-LEAF1A: Synced\"} The output indicates that gNMI-gateway has started and will now serve gNMI requests to the /interfaces/interface path on behalf of any external gNMI client. Requesting a target managed by gNMI gateway gnmic subscribe -a 192.0.2.1 -u ansible -p ansible --port=9339 \\ --skip-verify --target=DC2-SP02 --path=/interfaces Output: { \"source\": \"192.0.2.1:9339\", \"subscription-name\": \"default-1616158143\", \"timestamp\": 1605208845740882713, \"time\": \"2020-11-12T14:20:45.740882713-05:00\", \"target\": \"DC2-SP02\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Ethernet54/1]/state/tpid\", \"values\": { \"interfaces/interface/state/tpid\": \"openconfig-vlan-types:TPID_0X8100\" } } ] } Since the gNMI gateway is running locally a query can be issued to the service on port 9339 passing in the target value of DC2-SP02 and telemetry will start to stream data back to the client.","title":"gNMI gateway"},{"location":"examples/gnmi-gateway/#overview","text":"gNMI gateway is an opensource project created by Netflix. Conceptually, gNMI gateway sits as a proxy for multiple gNMI targets. A gNMI client speaks to a common gNMI service endpoint within the network (gNMI gateway) and specifies a gNMI target with an accompanying path. The gNMI gateway will in turn initiate the connection to the target device and stream the contents to the originating proxy. gNMI gateway documentation NANOG demonstration This demo will start the gNMI gateway binary and use gNMIC to stream to a target which is managed by the gNMI gateway. Please make adjustments to the targets.json file to match your environment. The demo is dependent on the following files: gnmi-gateway - The binary to activate gNMI gateway. This must be built for the platform that it will run on. Details regarding generation of the binary for the target platform can be found in the gNMI gateway documentation . server.crt / server.key - the certificate and key for gNMI gateway. These can be generated through a CA. Additional details may be found here . targets.json - This file specifies the targets. gNMI-gateway supports hot reloading of the files. So if changes are made within targets.json it will reload automatically with new targets and or new paths. sample: targets.json { \"request\": { \"default\": { \"subscribe\": { \"prefix\": { }, \"subscription\": [ { \"path\": { \"elem\": [ { \"name\": \"interfaces\" } ] } } ] } } }, \"target\": { \"DC2-SP02\": { \"addresses\": [ \"198.51.100.22:6030\" ], \"credentials\": { \"username\": \"ansible\", \"password\": \"ansible\" }, \"request\": \"default\", \"meta\": { \"NoTLS\": \"yes\" } }, \"DC2-LEAF1A\": { \"addresses\": [ \"198.51.100.5:6030\" ], \"credentials\": { \"username\": \"ansible\", \"password\": \"ansible\" }, \"request\": \"default\", \"meta\": { \"NoTLS\": \"yes\" } }, \"DC2-LF70\": { \"addresses\": [ \"198.51.100.70:6030\" ], \"credentials\": { \"username\": \"ansible\", \"password\": \"ansible\" }, \"request\": \"default\", \"meta\": { \"NoTLS\": \"yes\" } } } }","title":"Overview"},{"location":"examples/gnmi-gateway/#eos-configuration","text":"gNMI will need to be enabled on the target which is managed by gNMI gateway and a certificate will need to be installed to use TLS-based authentication. Additional details regarding enabling gnmi on EOS devices can be found here . Additional details regarding certificate management and configuration can be found here .","title":"EOS Configuration"},{"location":"examples/gnmi-gateway/#start-gnmi-gateway","text":"Note, the server.crt must be signed by a CA that the switch can resolve. gnmi-gateway -EnableGNMIServer -ServerTLSCert=server.crt \\ -ServerTLSKey=server.key -TargetLoaders=json -TargetJSONFile=targets.json Output: Reveal Output {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Starting GNMI Gateway.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Clustering is NOT enabled. No locking or cluster coordination will happen.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Starting connection manager.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Starting gNMI server on 0.0.0.0:9339.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Connection manager received a target control message: 3 inserts 0 removes\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Initializing target DC2-SP02 ([198.51.100.22:6030]) map[NoTLS:yes].\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Initializing target DC2-LEAF1A ([198.51.100.5:6030]) map[NoTLS:yes].\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-SP02: Connecting\"} {\"level\":\"warn\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"DEPRECATED: The 'NoTLS' target flag has been deprecated and will be removed in a future release. Please use 'NoTLSVerify' instead.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-SP02: Subscribing\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Initializing target DC2-LF70 ([198.51.100.70:6030]) map[NoTLS:yes].\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-LEAF1A: Connecting\"} {\"level\":\"warn\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"DEPRECATED: The 'NoTLS' target flag has been deprecated and will be removed in a future release. Please use 'NoTLSVerify' instead.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-LEAF1A: Subscribing\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-LF70: Connecting\"} {\"level\":\"warn\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"DEPRECATED: The 'NoTLS' target flag has been deprecated and will be removed in a future release. Please use 'NoTLSVerify' instead.\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-LF70: Subscribing\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:35-04:00\",\"message\":\"Target DC2-SP02: Connected\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:36-04:00\",\"message\":\"Target DC2-LF70: Connected\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:36-04:00\",\"message\":\"Target DC2-LEAF1A: Connected\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:37-04:00\",\"message\":\"Target DC2-LF70: Synced\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:37-04:00\",\"message\":\"Target DC2-SP02: Synced\"} {\"level\":\"info\",\"time\":\"2021-03-19T08:47:38-04:00\",\"message\":\"Target DC2-LEAF1A: Synced\"} The output indicates that gNMI-gateway has started and will now serve gNMI requests to the /interfaces/interface path on behalf of any external gNMI client.","title":"Start gNMI gateway"},{"location":"examples/gnmi-gateway/#requesting-a-target-managed-by-gnmi-gateway","text":"gnmic subscribe -a 192.0.2.1 -u ansible -p ansible --port=9339 \\ --skip-verify --target=DC2-SP02 --path=/interfaces Output: { \"source\": \"192.0.2.1:9339\", \"subscription-name\": \"default-1616158143\", \"timestamp\": 1605208845740882713, \"time\": \"2020-11-12T14:20:45.740882713-05:00\", \"target\": \"DC2-SP02\", \"updates\": [ { \"Path\": \"interfaces/interface[name=Ethernet54/1]/state/tpid\", \"values\": { \"interfaces/interface/state/tpid\": \"openconfig-vlan-types:TPID_0X8100\" } } ] } Since the gNMI gateway is running locally a query can be issued to the service on port 9339 passing in the target value of DC2-SP02 and telemetry will start to stream data back to the client.","title":"Requesting a target managed by gNMI gateway"},{"location":"examples/gnoi/","text":"About gRPC gRPC - Google Remote Procedure Call gRPC uses protobuf and HTTP/2 About gNOI gNOI - gRPC Network Operations Interface gNOI defines a set of gRPC-based microservices for executing operational commands on network devices. gNOI github repository As example, this gNOI proto file defines the service System with the RPC Traceroute and Ping Ping executes the ping command on the target and streams back the results Traceroute executes the traceroute command on the target and streams back the results As you can see in the proto file, the field VRF is not defined for these messages About gNOI support on EOS Please refer to this link for the gNOI support by EOS. Examples: gnoi ping gnoi traceroute","title":"About gNOI"},{"location":"examples/gnoi/#about-grpc","text":"gRPC - Google Remote Procedure Call gRPC uses protobuf and HTTP/2","title":"About gRPC"},{"location":"examples/gnoi/#about-gnoi","text":"gNOI - gRPC Network Operations Interface gNOI defines a set of gRPC-based microservices for executing operational commands on network devices. gNOI github repository As example, this gNOI proto file defines the service System with the RPC Traceroute and Ping Ping executes the ping command on the target and streams back the results Traceroute executes the traceroute command on the target and streams back the results As you can see in the proto file, the field VRF is not defined for these messages","title":"About gNOI"},{"location":"examples/gnoi/#about-gnoi-support-on-eos","text":"Please refer to this link for the gNOI support by EOS. Examples: gnoi ping gnoi traceroute","title":"About gNOI support on EOS"},{"location":"examples/gnoi/gnoic/","text":"gNOIc overview gNOIc is a gNOI CLI client: source code documentation The following examples shows various gNOIc commands with Arista EOS devices. Download & install gNOIc To install run: bash -c \"$(curl -sL https://get-gnoic.kmrd.dev)\" To get the version run: gnoic version Output: version : 0.0.5 commit : 26c6248 date : 2021-05-12T10:12:55Z gitURL : https://github.com/karimra/gnoic docs : https://gnoic.kmrd.dev Device config interface Management1 description oob_management vrf MGMT ip address 192.0.2.118/24 username arista secret 0 arista management api gnmi transport grpc def vrf MGMT DC1-L2LEAF2A#show management api gnmi Enabled: Yes Server: running on port 6030, in MGMT VRF SSL Profile: none QoS DSCP: none DC1-L2LEAF2A# Before to use gNOI ping and traceroute, lets run these commands locally: $ ssh arista@192.0.2.118 Password: Last login: Thu Jun 3 12:06:25 2021 from 192.0.2.3 DC1-L2LEAF2A>en DC1-L2LEAF2A#bash Arista Networks EOS shell [arista@DC1-L2LEAF2A ~]$ ping 172.31.255.0 -c 2 PING 172.31.255.0 (172.31.255.0) 56(84) bytes of data. 64 bytes from 172.31.255.0: icmp_seq=1 ttl=63 time=24.6 ms 64 bytes from 172.31.255.0: icmp_seq=2 ttl=63 time=18.8 ms --- 172.31.255.0 ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 1001ms rtt min/avg/max/mdev = 18.861/21.738/24.616/2.881 ms [arista@DC1-L2LEAF2A ~]$ [arista@DC1-L2LEAF2A ~]$ traceroute -A 172.31.255.0 traceroute to 172.31.255.0 (172.31.255.0), 30 hops max, 60 byte packets 1 10.90.90.1 (10.90.90.1) [!!] 26.636 ms 29.420 ms 32.113 ms 2 172.31.255.0 (172.31.255.0) [!!] 52.764 ms 53.881 ms 63.213 ms [arista@DC1-L2LEAF2A ~]$ [arista@DC1-L2LEAF2A ~]$ exit logout DC1-L2LEAF2A#exit Connection to 192.0.2.118 closed. gNOI demo with Arista using gNOIc gnoic -a 192.0.2.118:6030 -u arista -p arista --insecure system ping \\ --destination 172.31.255.0 --count 2 --do-not-resolve Output: WARN[0000] \"192.0.2.118:6030\" could not lookup hostname: lookup 118.1.73.10.in-addr.arpa. on 127.0.0.53:53: no such host source: \"172.31.255.0\" time: 31200000 bytes: 64 sequence: 1 ttl: 63 source: \"172.31.255.0\" time: 33900000 bytes: 64 sequence: 2 ttl: 63 source: \"172.31.255.0\" time: 1001000000 sent: 2 received: 2 min_time: 31251000 avg_time: 32590000 max_time: 33930000 std_dev: 1351000 gnoic -a 192.0.2.118:6030 -u arista -p arista --insecure system traceroute \\ --destination 172.31.255.0 --do-not-resolve Output: WARN[0000] \"192.0.2.118:6030\" could not lookup hostname: lookup 118.1.73.10.in-addr.arpa. on 127.0.0.53:53: no such host destination_name: \"172.31.255.0\" destination_address: \"172.31.255.0\" hops: 30 packet_size: 60 hop: 1 address: \"10.90.90.1\" rtt: 21440000 hop: 1 address: \"10.90.90.1\" rtt: 23011000 hop: 1 address: \"10.90.90.1\" rtt: 31135000 hop: 2 address: \"172.31.255.0\" rtt: 62216000 hop: 2 address: \"172.31.255.0\" rtt: 63213000 hop: 2 address: \"172.31.255.0\" rtt: 71079000 gnoic -a 192.0.2.118:6030 -u arista -p arista --insecure cert can-generate-csr Output: WARN[0000] \"192.0.2.118:6030\" could not lookup hostname: lookup 118.1.73.10.in-addr.arpa. on 127.0.0.53:53: no such host INFO[0000] \"192.0.2.118:6030\" key-type=KT_RSA, cert-type=CT_X509, key-size=2048: can_generate: true +------------------+------------------+ | Target Name | Can Generate CSR | +------------------+------------------+ | 192.0.2.118:6030 | true | +------------------+------------------+","title":"gNOIc"},{"location":"examples/gnoi/gnoic/#gnoic-overview","text":"gNOIc is a gNOI CLI client: source code documentation The following examples shows various gNOIc commands with Arista EOS devices.","title":"gNOIc overview"},{"location":"examples/gnoi/gnoic/#download-install-gnoic","text":"To install run: bash -c \"$(curl -sL https://get-gnoic.kmrd.dev)\" To get the version run: gnoic version Output: version : 0.0.5 commit : 26c6248 date : 2021-05-12T10:12:55Z gitURL : https://github.com/karimra/gnoic docs : https://gnoic.kmrd.dev","title":"Download &amp; install gNOIc"},{"location":"examples/gnoi/gnoic/#device-config","text":"interface Management1 description oob_management vrf MGMT ip address 192.0.2.118/24 username arista secret 0 arista management api gnmi transport grpc def vrf MGMT DC1-L2LEAF2A#show management api gnmi Enabled: Yes Server: running on port 6030, in MGMT VRF SSL Profile: none QoS DSCP: none DC1-L2LEAF2A# Before to use gNOI ping and traceroute, lets run these commands locally: $ ssh arista@192.0.2.118 Password: Last login: Thu Jun 3 12:06:25 2021 from 192.0.2.3 DC1-L2LEAF2A>en DC1-L2LEAF2A#bash Arista Networks EOS shell [arista@DC1-L2LEAF2A ~]$ ping 172.31.255.0 -c 2 PING 172.31.255.0 (172.31.255.0) 56(84) bytes of data. 64 bytes from 172.31.255.0: icmp_seq=1 ttl=63 time=24.6 ms 64 bytes from 172.31.255.0: icmp_seq=2 ttl=63 time=18.8 ms --- 172.31.255.0 ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 1001ms rtt min/avg/max/mdev = 18.861/21.738/24.616/2.881 ms [arista@DC1-L2LEAF2A ~]$ [arista@DC1-L2LEAF2A ~]$ traceroute -A 172.31.255.0 traceroute to 172.31.255.0 (172.31.255.0), 30 hops max, 60 byte packets 1 10.90.90.1 (10.90.90.1) [!!] 26.636 ms 29.420 ms 32.113 ms 2 172.31.255.0 (172.31.255.0) [!!] 52.764 ms 53.881 ms 63.213 ms [arista@DC1-L2LEAF2A ~]$ [arista@DC1-L2LEAF2A ~]$ exit logout DC1-L2LEAF2A#exit Connection to 192.0.2.118 closed.","title":"Device config"},{"location":"examples/gnoi/gnoic/#gnoi-demo-with-arista-using-gnoic","text":"gnoic -a 192.0.2.118:6030 -u arista -p arista --insecure system ping \\ --destination 172.31.255.0 --count 2 --do-not-resolve Output: WARN[0000] \"192.0.2.118:6030\" could not lookup hostname: lookup 118.1.73.10.in-addr.arpa. on 127.0.0.53:53: no such host source: \"172.31.255.0\" time: 31200000 bytes: 64 sequence: 1 ttl: 63 source: \"172.31.255.0\" time: 33900000 bytes: 64 sequence: 2 ttl: 63 source: \"172.31.255.0\" time: 1001000000 sent: 2 received: 2 min_time: 31251000 avg_time: 32590000 max_time: 33930000 std_dev: 1351000 gnoic -a 192.0.2.118:6030 -u arista -p arista --insecure system traceroute \\ --destination 172.31.255.0 --do-not-resolve Output: WARN[0000] \"192.0.2.118:6030\" could not lookup hostname: lookup 118.1.73.10.in-addr.arpa. on 127.0.0.53:53: no such host destination_name: \"172.31.255.0\" destination_address: \"172.31.255.0\" hops: 30 packet_size: 60 hop: 1 address: \"10.90.90.1\" rtt: 21440000 hop: 1 address: \"10.90.90.1\" rtt: 23011000 hop: 1 address: \"10.90.90.1\" rtt: 31135000 hop: 2 address: \"172.31.255.0\" rtt: 62216000 hop: 2 address: \"172.31.255.0\" rtt: 63213000 hop: 2 address: \"172.31.255.0\" rtt: 71079000 gnoic -a 192.0.2.118:6030 -u arista -p arista --insecure cert can-generate-csr Output: WARN[0000] \"192.0.2.118:6030\" could not lookup hostname: lookup 118.1.73.10.in-addr.arpa. on 127.0.0.53:53: no such host INFO[0000] \"192.0.2.118:6030\" key-type=KT_RSA, cert-type=CT_X509, key-size=2048: can_generate: true +------------------+------------------+ | Target Name | Can Generate CSR | +------------------+------------------+ | 192.0.2.118:6030 | true | +------------------+------------------+","title":"gNOI demo with Arista using gNOIc"},{"location":"examples/gnoi/gnoicode/","text":"gNOI review These are a few examples leveraging golang and gNOI using the gNOI protobuf specifically the System service The following examples show how to leverage the ping rpc and traceroute rpc All code can be found within the src directory under gnoi We will be leveraging the gNOI godocs which module can be imported as github.com/openconfig/gnoi Each one of the examples has the following default flags which can be changed based on the environment. -username = \"admin\" -password = \"admin\" -target = \"172.20.20.2:6030\" -destination = \"1.1.1.1\" Test Device configuration management api gnmi transport grpc default provider eos-native cd into src/gnoi cd src/gnoi The directory should include the go.mod/go.sum for the correct packages so nothing needs installed on the system at the current time. ls go.mod go.sum pinggnoi.go traceroutegnoi.go Run ping.go src/gnoi/ping.go Reveal output package main import ( \"context\" \"flag\" \"fmt\" \"os\" \"time\" log \"github.com/golang/glog\" system \"github.com/openconfig/gnoi/system\" \"google.golang.org/grpc\" \"google.golang.org/grpc/metadata\" ) func checkflags(flag ...string) { for _, f := range flag { if f == \"\" { fmt.Printf(\"You have an empty flag please fix.\") os.Exit(1) } } } func main() { // Add input parameters username := flag.String(\"username\", \"admin\", \"username for connection to gNOI\") password := flag.String(\"password\", \"admin\", \"password for connection to gNOI\") target := flag.String(\"target\", \"\", \"Target ip or hostname of the device running gNOI\") destination := flag.String(\"destination\", \"\", \"Destination of the address to ping to\") flag.Parse() // Check for empty flags. checkflags(*username, *password, *target, *destination) conn, err := grpc.Dial(*target, grpc.WithInsecure()) if err != nil { log.Exitf(\"Failed to %s Error: %v\", target, err) } defer conn.Close() // Create the new grpc service connection Sys := system.NewSystemClient(conn) // pass in context blank information with the timeout. ctx, cancel := context.WithTimeout(context.Background(), time.Second) // cancel when the function is over. defer cancel() // Since Metadata needs a map to pass into the header of gRPC request create a map for it. metamap := make(map[string]string) // Set the username and password metamap[\"username\"] = *username metamap[\"password\"] = *password // Set the metadata needed in the metadata package md := metadata.New(metamap) // set the ctx to use the metadata in every update. ctx = metadata.NewOutgoingContext(ctx, md) // Try to ping 10 times with a loop for i := 0; i < 10; i++ { response, err := Sys.Ping(ctx, &system.PingRequest{Destination: *destination}) if err != nil { log.Fatalf(\"Error trying to ping: %v\", err) } fmt.Println(response.Recv()) } } Output go run ping/ping.go -username admin -password admin -target 172.20.20.2:6030 -destination 2.2.2.2 source:\"2.2.2.2\" time:38000 bytes:64 sequence:1 ttl:64 <nil> source:\"2.2.2.2\" time:44000 bytes:64 sequence:1 ttl:64 <nil> source:\"2.2.2.2\" time:37000 bytes:64 sequence:1 ttl:64 <nil> source:\"2.2.2.2\" time:41000 bytes:64 sequence:1 ttl:64 <nil> source:\"2.2.2.2\" time:40000 bytes:64 sequence:1 ttl:64 <nil> source:\"2.2.2.2\" time:38000 bytes:64 sequence:1 ttl:64 <nil> source:\"2.2.2.2\" time:40000 bytes:64 sequence:1 ttl:64 <nil> source:\"2.2.2.2\" time:36000 bytes:64 sequence:1 ttl:64 <nil> source:\"2.2.2.2\" time:44000 bytes:64 sequence:1 ttl:64 <nil> source:\"2.2.2.2\" time:66000 bytes:64 sequence:1 ttl:64 <nil> Run traceroute.go src/gnoi/traceroute.go Reveal output package main import ( \"context\" \"flag\" \"fmt\" \"os\" \"time\" log \"github.com/golang/glog\" system \"github.com/openconfig/gnoi/system\" \"google.golang.org/grpc\" \"google.golang.org/grpc/metadata\" ) func checkflags(flag ...string) { for _, f := range flag { if f == \"\" { fmt.Printf(\"You have an empty flag please fix.\") os.Exit(1) } } } func main() { // Add input parameters username := flag.String(\"username\", \"\", \"username for connection to gNOI\") password := flag.String(\"password\", \"\", \"password for connection to gNOI\") target := flag.String(\"target\", \"\", \"Target ip or hostname of the device running gNOI\") destination := flag.String(\"destination\", \"\", \"Destination of the address to traceroute to\") flag.Parse() conn, err := grpc.Dial(*target, grpc.WithInsecure()) if err != nil { log.Exitf(\"Failed to %s Error: %v\", target, err) } defer conn.Close() // Check for empty flags. checkflags(*username, *password, *target, *destination) // Create the new grpc service connection Sys := system.NewSystemClient(conn) // pass in context blank information with the timeout. ctx, cancel := context.WithTimeout(context.Background(), time.Second) // cancel when the function is over. defer cancel() // Since Metadata needs a map to pass into the header of gRPC request create a map for it. metamap := make(map[string]string) // Set the username and password metamap[\"username\"] = *username metamap[\"password\"] = *password // Set the metadata needed in the metadata package md := metadata.New(metamap) // set the ctx to use the metadata in every update. ctx = metadata.NewOutgoingContext(ctx, md) response, err := Sys.Traceroute(ctx, &system.TracerouteRequest{Destination: *destination}) if err != nil { log.Fatalf(\"Cannot trace path: %v\", err) } fmt.Println(response.Recv()) } Output go run traceroute/traceroute.go -username admin -password admin -target 172.20.20.2:6030 -destination 2.2.2.2 destination_name:\"2.2.2.2\" destination_address:\"2.2.2.2\" hops:30 packet_size:60 <nil>","title":"gNOI in Golang"},{"location":"examples/gnoi/gnoicode/#gnoi-review","text":"These are a few examples leveraging golang and gNOI using the gNOI protobuf specifically the System service The following examples show how to leverage the ping rpc and traceroute rpc All code can be found within the src directory under gnoi We will be leveraging the gNOI godocs which module can be imported as github.com/openconfig/gnoi Each one of the examples has the following default flags which can be changed based on the environment. -username = \"admin\" -password = \"admin\" -target = \"172.20.20.2:6030\" -destination = \"1.1.1.1\"","title":"gNOI review"},{"location":"examples/gnoi/gnoicode/#test-device-configuration","text":"management api gnmi transport grpc default provider eos-native","title":"Test Device configuration"},{"location":"examples/gnoi/gnoicode/#cd-into-srcgnoi","text":"cd src/gnoi The directory should include the go.mod/go.sum for the correct packages so nothing needs installed on the system at the current time. ls go.mod go.sum pinggnoi.go traceroutegnoi.go","title":"cd into src/gnoi"},{"location":"examples/gnoi/gnoicode/#run-pinggo","text":"","title":"Run ping.go"},{"location":"examples/gnoi/gnoicode/#srcgnoipinggo","text":"Reveal output package main import ( \"context\" \"flag\" \"fmt\" \"os\" \"time\" log \"github.com/golang/glog\" system \"github.com/openconfig/gnoi/system\" \"google.golang.org/grpc\" \"google.golang.org/grpc/metadata\" ) func checkflags(flag ...string) { for _, f := range flag { if f == \"\" { fmt.Printf(\"You have an empty flag please fix.\") os.Exit(1) } } } func main() { // Add input parameters username := flag.String(\"username\", \"admin\", \"username for connection to gNOI\") password := flag.String(\"password\", \"admin\", \"password for connection to gNOI\") target := flag.String(\"target\", \"\", \"Target ip or hostname of the device running gNOI\") destination := flag.String(\"destination\", \"\", \"Destination of the address to ping to\") flag.Parse() // Check for empty flags. checkflags(*username, *password, *target, *destination) conn, err := grpc.Dial(*target, grpc.WithInsecure()) if err != nil { log.Exitf(\"Failed to %s Error: %v\", target, err) } defer conn.Close() // Create the new grpc service connection Sys := system.NewSystemClient(conn) // pass in context blank information with the timeout. ctx, cancel := context.WithTimeout(context.Background(), time.Second) // cancel when the function is over. defer cancel() // Since Metadata needs a map to pass into the header of gRPC request create a map for it. metamap := make(map[string]string) // Set the username and password metamap[\"username\"] = *username metamap[\"password\"] = *password // Set the metadata needed in the metadata package md := metadata.New(metamap) // set the ctx to use the metadata in every update. ctx = metadata.NewOutgoingContext(ctx, md) // Try to ping 10 times with a loop for i := 0; i < 10; i++ { response, err := Sys.Ping(ctx, &system.PingRequest{Destination: *destination}) if err != nil { log.Fatalf(\"Error trying to ping: %v\", err) } fmt.Println(response.Recv()) } } Output go run ping/ping.go -username admin -password admin -target 172.20.20.2:6030 -destination 2.2.2.2 source:\"2.2.2.2\" time:38000 bytes:64 sequence:1 ttl:64 <nil> source:\"2.2.2.2\" time:44000 bytes:64 sequence:1 ttl:64 <nil> source:\"2.2.2.2\" time:37000 bytes:64 sequence:1 ttl:64 <nil> source:\"2.2.2.2\" time:41000 bytes:64 sequence:1 ttl:64 <nil> source:\"2.2.2.2\" time:40000 bytes:64 sequence:1 ttl:64 <nil> source:\"2.2.2.2\" time:38000 bytes:64 sequence:1 ttl:64 <nil> source:\"2.2.2.2\" time:40000 bytes:64 sequence:1 ttl:64 <nil> source:\"2.2.2.2\" time:36000 bytes:64 sequence:1 ttl:64 <nil> source:\"2.2.2.2\" time:44000 bytes:64 sequence:1 ttl:64 <nil> source:\"2.2.2.2\" time:66000 bytes:64 sequence:1 ttl:64 <nil>","title":"src/gnoi/ping.go"},{"location":"examples/gnoi/gnoicode/#run-traceroutego","text":"","title":"Run traceroute.go"},{"location":"examples/gnoi/gnoicode/#srcgnoitraceroutego","text":"Reveal output package main import ( \"context\" \"flag\" \"fmt\" \"os\" \"time\" log \"github.com/golang/glog\" system \"github.com/openconfig/gnoi/system\" \"google.golang.org/grpc\" \"google.golang.org/grpc/metadata\" ) func checkflags(flag ...string) { for _, f := range flag { if f == \"\" { fmt.Printf(\"You have an empty flag please fix.\") os.Exit(1) } } } func main() { // Add input parameters username := flag.String(\"username\", \"\", \"username for connection to gNOI\") password := flag.String(\"password\", \"\", \"password for connection to gNOI\") target := flag.String(\"target\", \"\", \"Target ip or hostname of the device running gNOI\") destination := flag.String(\"destination\", \"\", \"Destination of the address to traceroute to\") flag.Parse() conn, err := grpc.Dial(*target, grpc.WithInsecure()) if err != nil { log.Exitf(\"Failed to %s Error: %v\", target, err) } defer conn.Close() // Check for empty flags. checkflags(*username, *password, *target, *destination) // Create the new grpc service connection Sys := system.NewSystemClient(conn) // pass in context blank information with the timeout. ctx, cancel := context.WithTimeout(context.Background(), time.Second) // cancel when the function is over. defer cancel() // Since Metadata needs a map to pass into the header of gRPC request create a map for it. metamap := make(map[string]string) // Set the username and password metamap[\"username\"] = *username metamap[\"password\"] = *password // Set the metadata needed in the metadata package md := metadata.New(metamap) // set the ctx to use the metadata in every update. ctx = metadata.NewOutgoingContext(ctx, md) response, err := Sys.Traceroute(ctx, &system.TracerouteRequest{Destination: *destination}) if err != nil { log.Fatalf(\"Cannot trace path: %v\", err) } fmt.Println(response.Recv()) } Output go run traceroute/traceroute.go -username admin -password admin -target 172.20.20.2:6030 -destination 2.2.2.2 destination_name:\"2.2.2.2\" destination_address:\"2.2.2.2\" hops:30 packet_size:60 <nil>","title":"src/gnoi/traceroute.go"},{"location":"examples/gnoi/grpcurl/","text":"gRPCurl overview gRPCurl is a command-line tool that lets you interact with gRPC servers: github repository The following examples shows various gRPCurl commands to interact with Arista EOS devices. Install gRPCurl Install GO $ go version go version go1.16.4 linux/amd64 go env | grep 'GOROOT\\|GOPATH' export GOROOT=/usr/local/go export GOPATH=$HOME/go export PATH=$GOPATH/bin:$GOROOT/bin:$PATH Get gNOI repository mkdir -p $GOPATH/src/github.com/openconfig git clone https://github.com/openconfig/gnoi.git $GOPATH/src/github.com/openconfig/gnoi $ ls $GOPATH/src/github.com/openconfig gnoi Install gRPCurl go get github.com/fullstorydev/grpcurl ls $GOPATH/pkg/mod/github.com/fullstorydev/ grpcurl@v1.8.1 go install github.com/fullstorydev/grpcurl/cmd/grpcurl@latest ls $GOPATH/bin/ grpcurl Device config interface Management1 description oob_management vrf MGMT ip address 192.0.2.118/24 username arista secret 0 arista management api gnmi transport grpc def vrf MGMT DC1-L2LEAF2A#show management api gnmi Enabled: Yes Server: running on port 6030, in MGMT VRF SSL Profile: none QoS DSCP: none DC1-L2LEAF2A# Before to use gNOI ping and traceroute, let's run these commands locally: $ ssh arista@192.0.2.118 Password: Last login: Thu Jun 3 12:06:25 2021 from 192.0.2.3 DC1-L2LEAF2A>en DC1-L2LEAF2A#bash Arista Networks EOS shell [arista@DC1-L2LEAF2A ~]$ ping 172.31.255.0 -c 2 PING 172.31.255.0 (172.31.255.0) 56(84) bytes of data. 64 bytes from 172.31.255.0: icmp_seq=1 ttl=63 time=24.6 ms 64 bytes from 172.31.255.0: icmp_seq=2 ttl=63 time=18.8 ms --- 172.31.255.0 ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 1001ms rtt min/avg/max/mdev = 18.861/21.738/24.616/2.881 ms [arista@DC1-L2LEAF2A ~]$ [arista@DC1-L2LEAF2A ~]$ traceroute -A 172.31.255.0 traceroute to 172.31.255.0 (172.31.255.0), 30 hops max, 60 byte packets 1 10.90.90.1 (10.90.90.1) [!!] 26.636 ms 29.420 ms 32.113 ms 2 172.31.255.0 (172.31.255.0) [!!] 52.764 ms 53.881 ms 63.213 ms [arista@DC1-L2LEAF2A ~]$ [arista@DC1-L2LEAF2A ~]$ exit logout DC1-L2LEAF2A#exit Connection to 192.0.2.118 closed. Use gRPCurl Describe from a proto file Describe CancelReboot method grpcurl --plaintext --import-path ${GOPATH}/src --proto github.com/openconfig/gnoi/system/system.proto \\ describe gnoi.system.System.CancelReboot Output: gnoi.system.System.CancelReboot is a method: // CancelReboot cancels any pending reboot request. rpc CancelReboot ( .gnoi.system.CancelRebootRequest ) returns ( .gnoi.system.CancelRebootResponse ); Describe System service $ grpcurl --plaintext --import-path ${GOPATH}/src --proto github.com/openconfig/gnoi/system/system.proto \\ describe gnoi.system.System Output: gnoi.system.System is a service: // The gNOI service is a collection of operational RPC's that allow for the // management of a target outside of the configuration and telemetry pipeline. service System { // CancelReboot cancels any pending reboot request. rpc CancelReboot ( .gnoi.system.CancelRebootRequest ) returns ( .gnoi.system.CancelRebootResponse ); // Ping executes the ping command on the target and streams back // the results. Some targets may not stream any results until all // results are in. If a packet count is not explicitly provided, // 5 is used. rpc Ping ( .gnoi.system.PingRequest ) returns ( stream .gnoi.system.PingResponse ); // Reboot causes the target to reboot, possibly at some point in the future. // If the method of reboot is not supported then the Reboot RPC will fail. // If the reboot is immediate the command will block until the subcomponents // have restarted. // If a reboot on the active control processor is pending the service must // reject all other reboot requests. // If a reboot request for active control processor is initiated with other // pending reboot requests it must be rejected. rpc Reboot ( .gnoi.system.RebootRequest ) returns ( .gnoi.system.RebootResponse ); // RebootStatus returns the status of reboot for the target. rpc RebootStatus ( .gnoi.system.RebootStatusRequest ) returns ( .gnoi.system.RebootStatusResponse ); // SetPackage places a software package (possibly including bootable images) // on the target. The file is sent in sequential messages, each message // up to 64KB of data. A final message must be sent that includes the hash // of the data sent. An error is returned if the location does not exist or // there is an error writing the data. If no checksum is received, the target // must assume the operation is incomplete and remove the partially // transmitted file. The target should initially write the file to a temporary // location so a failure does not destroy the original file. rpc SetPackage ( stream .gnoi.system.SetPackageRequest ) returns ( .gnoi.system.SetPackageResponse ); // SwitchControlProcessor will switch from the current route processor to the // provided route processor. If the current route processor is the same as the // one provided it is a NOOP. If the target does not exist an error is // returned. rpc SwitchControlProcessor ( .gnoi.system.SwitchControlProcessorRequest ) returns ( .gnoi.system.SwitchControlProcessorResponse ); // Time returns the current time on the target. Time is typically used to // test if a target is actually responding. rpc Time ( .gnoi.system.TimeRequest ) returns ( .gnoi.system.TimeResponse ); // Traceroute executes the traceroute command on the target and streams back // the results. Some targets may not stream any results until all // results are in. If a hop count is not explicitly provided, // 30 is used. rpc Traceroute ( .gnoi.system.TracerouteRequest ) returns ( stream .gnoi.system.TracerouteResponse ); } List List from a proto file Example 1) grpcurl --plaintext --import-path ${GOPATH}/src \\ --proto github.com/openconfig/gnoi/system/system.proto list Output: gnoi.system.System Example 2) grpcurl --plaintext --import-path ${GOPATH}/src \\ --proto github.com/openconfig/gnoi/system/system.proto \\ list gnoi.system.System Output: gnoi.system.System.CancelReboot gnoi.system.System.Ping gnoi.system.System.Reboot gnoi.system.System.RebootStatus gnoi.system.System.SetPackage gnoi.system.System.SwitchControlProcessor gnoi.system.System.Time gnoi.system.System.Traceroute Example 3) grpcurl --plaintext --import-path ${GOPATH}/src \\ --proto github.com/openconfig/gnoi/os/os.proto list gnoi.os.OS Output: gnoi.os.OS.Activate gnoi.os.OS.Install gnoi.os.OS.Verify List from a gRPC server (EOS device) $ grpcurl --plaintext 192.0.2.105:6030 list gnmi.gNMI gnoi.certificate.CertificateManagement gnoi.system.System grpc.reflection.v1alpha.ServerReflection Execute gNOI RPC with EOS grpcurl -H 'username: arista' -H 'password: arista' \\ -d '{\"destination\": \"172.31.255.0\", \"count\": 2, \"do_not_resolve\":true}' \\ -import-path ${GOPATH}/src -proto github.com/openconfig/gnoi/system/system.proto \\ -plaintext 192.0.2.118:6030 gnoi.system.System/Ping Output: { \"source\": \"172.31.255.0\", \"time\": \"29800000\", \"bytes\": 64, \"sequence\": 1, \"ttl\": 63 } { \"source\": \"172.31.255.0\", \"time\": \"25200000\", \"bytes\": 64, \"sequence\": 2, \"ttl\": 63 } { \"source\": \"172.31.255.0\", \"time\": \"1001000000\", \"sent\": 2, \"received\": 2, \"minTime\": \"25210000\", \"avgTime\": \"27510000\", \"maxTime\": \"29810000\", \"stdDev\": \"2300000\" } grpcurl -H 'username: arista' -H 'password: arista' \\ -d '{\"destination\": \"172.31.255.0\", \"max_ttl\": 50, \"do_not_resolve\":true}' \\ -import-path ${GOPATH}/src -proto github.com/openconfig/gnoi/system/system.proto \\ -plaintext 192.0.2.118:6030 gnoi.system.System/Traceroute Output: { \"destinationName\": \"172.31.255.0\", \"destinationAddress\": \"172.31.255.0\", \"hops\": 50, \"packetSize\": 60 } { \"hop\": 1, \"address\": \"10.90.90.1\", \"rtt\": \"16589000\" } { \"hop\": 1, \"address\": \"10.90.90.1\", \"rtt\": \"17886000\" } { \"hop\": 1, \"address\": \"10.90.90.1\", \"rtt\": \"23219000\" } { \"hop\": 2, \"address\": \"172.31.255.0\", \"rtt\": \"46537000\" } { \"hop\": 2, \"address\": \"172.31.255.0\", \"rtt\": \"47873000\" } { \"hop\": 2, \"address\": \"172.31.255.0\", \"rtt\": \"55376000\" }","title":"gRPCurl"},{"location":"examples/gnoi/grpcurl/#grpcurl-overview","text":"gRPCurl is a command-line tool that lets you interact with gRPC servers: github repository The following examples shows various gRPCurl commands to interact with Arista EOS devices.","title":"gRPCurl overview"},{"location":"examples/gnoi/grpcurl/#install-grpcurl","text":"","title":"Install gRPCurl"},{"location":"examples/gnoi/grpcurl/#install-go","text":"$ go version go version go1.16.4 linux/amd64 go env | grep 'GOROOT\\|GOPATH' export GOROOT=/usr/local/go export GOPATH=$HOME/go export PATH=$GOPATH/bin:$GOROOT/bin:$PATH","title":"Install GO"},{"location":"examples/gnoi/grpcurl/#get-gnoi-repository","text":"mkdir -p $GOPATH/src/github.com/openconfig git clone https://github.com/openconfig/gnoi.git $GOPATH/src/github.com/openconfig/gnoi $ ls $GOPATH/src/github.com/openconfig gnoi","title":"Get gNOI repository"},{"location":"examples/gnoi/grpcurl/#install-grpcurl_1","text":"go get github.com/fullstorydev/grpcurl ls $GOPATH/pkg/mod/github.com/fullstorydev/ grpcurl@v1.8.1 go install github.com/fullstorydev/grpcurl/cmd/grpcurl@latest ls $GOPATH/bin/ grpcurl","title":"Install gRPCurl"},{"location":"examples/gnoi/grpcurl/#device-config","text":"interface Management1 description oob_management vrf MGMT ip address 192.0.2.118/24 username arista secret 0 arista management api gnmi transport grpc def vrf MGMT DC1-L2LEAF2A#show management api gnmi Enabled: Yes Server: running on port 6030, in MGMT VRF SSL Profile: none QoS DSCP: none DC1-L2LEAF2A# Before to use gNOI ping and traceroute, let's run these commands locally: $ ssh arista@192.0.2.118 Password: Last login: Thu Jun 3 12:06:25 2021 from 192.0.2.3 DC1-L2LEAF2A>en DC1-L2LEAF2A#bash Arista Networks EOS shell [arista@DC1-L2LEAF2A ~]$ ping 172.31.255.0 -c 2 PING 172.31.255.0 (172.31.255.0) 56(84) bytes of data. 64 bytes from 172.31.255.0: icmp_seq=1 ttl=63 time=24.6 ms 64 bytes from 172.31.255.0: icmp_seq=2 ttl=63 time=18.8 ms --- 172.31.255.0 ping statistics --- 2 packets transmitted, 2 received, 0% packet loss, time 1001ms rtt min/avg/max/mdev = 18.861/21.738/24.616/2.881 ms [arista@DC1-L2LEAF2A ~]$ [arista@DC1-L2LEAF2A ~]$ traceroute -A 172.31.255.0 traceroute to 172.31.255.0 (172.31.255.0), 30 hops max, 60 byte packets 1 10.90.90.1 (10.90.90.1) [!!] 26.636 ms 29.420 ms 32.113 ms 2 172.31.255.0 (172.31.255.0) [!!] 52.764 ms 53.881 ms 63.213 ms [arista@DC1-L2LEAF2A ~]$ [arista@DC1-L2LEAF2A ~]$ exit logout DC1-L2LEAF2A#exit Connection to 192.0.2.118 closed.","title":"Device config"},{"location":"examples/gnoi/grpcurl/#use-grpcurl","text":"","title":"Use gRPCurl"},{"location":"examples/gnoi/grpcurl/#describe-from-a-proto-file","text":"","title":"Describe from a proto file"},{"location":"examples/gnoi/grpcurl/#describe-cancelreboot-method","text":"grpcurl --plaintext --import-path ${GOPATH}/src --proto github.com/openconfig/gnoi/system/system.proto \\ describe gnoi.system.System.CancelReboot Output: gnoi.system.System.CancelReboot is a method: // CancelReboot cancels any pending reboot request. rpc CancelReboot ( .gnoi.system.CancelRebootRequest ) returns ( .gnoi.system.CancelRebootResponse );","title":"Describe CancelReboot method"},{"location":"examples/gnoi/grpcurl/#describe-system-service","text":"$ grpcurl --plaintext --import-path ${GOPATH}/src --proto github.com/openconfig/gnoi/system/system.proto \\ describe gnoi.system.System Output: gnoi.system.System is a service: // The gNOI service is a collection of operational RPC's that allow for the // management of a target outside of the configuration and telemetry pipeline. service System { // CancelReboot cancels any pending reboot request. rpc CancelReboot ( .gnoi.system.CancelRebootRequest ) returns ( .gnoi.system.CancelRebootResponse ); // Ping executes the ping command on the target and streams back // the results. Some targets may not stream any results until all // results are in. If a packet count is not explicitly provided, // 5 is used. rpc Ping ( .gnoi.system.PingRequest ) returns ( stream .gnoi.system.PingResponse ); // Reboot causes the target to reboot, possibly at some point in the future. // If the method of reboot is not supported then the Reboot RPC will fail. // If the reboot is immediate the command will block until the subcomponents // have restarted. // If a reboot on the active control processor is pending the service must // reject all other reboot requests. // If a reboot request for active control processor is initiated with other // pending reboot requests it must be rejected. rpc Reboot ( .gnoi.system.RebootRequest ) returns ( .gnoi.system.RebootResponse ); // RebootStatus returns the status of reboot for the target. rpc RebootStatus ( .gnoi.system.RebootStatusRequest ) returns ( .gnoi.system.RebootStatusResponse ); // SetPackage places a software package (possibly including bootable images) // on the target. The file is sent in sequential messages, each message // up to 64KB of data. A final message must be sent that includes the hash // of the data sent. An error is returned if the location does not exist or // there is an error writing the data. If no checksum is received, the target // must assume the operation is incomplete and remove the partially // transmitted file. The target should initially write the file to a temporary // location so a failure does not destroy the original file. rpc SetPackage ( stream .gnoi.system.SetPackageRequest ) returns ( .gnoi.system.SetPackageResponse ); // SwitchControlProcessor will switch from the current route processor to the // provided route processor. If the current route processor is the same as the // one provided it is a NOOP. If the target does not exist an error is // returned. rpc SwitchControlProcessor ( .gnoi.system.SwitchControlProcessorRequest ) returns ( .gnoi.system.SwitchControlProcessorResponse ); // Time returns the current time on the target. Time is typically used to // test if a target is actually responding. rpc Time ( .gnoi.system.TimeRequest ) returns ( .gnoi.system.TimeResponse ); // Traceroute executes the traceroute command on the target and streams back // the results. Some targets may not stream any results until all // results are in. If a hop count is not explicitly provided, // 30 is used. rpc Traceroute ( .gnoi.system.TracerouteRequest ) returns ( stream .gnoi.system.TracerouteResponse ); }","title":"Describe System service"},{"location":"examples/gnoi/grpcurl/#list","text":"","title":"List"},{"location":"examples/gnoi/grpcurl/#list-from-a-proto-file","text":"Example 1) grpcurl --plaintext --import-path ${GOPATH}/src \\ --proto github.com/openconfig/gnoi/system/system.proto list Output: gnoi.system.System Example 2) grpcurl --plaintext --import-path ${GOPATH}/src \\ --proto github.com/openconfig/gnoi/system/system.proto \\ list gnoi.system.System Output: gnoi.system.System.CancelReboot gnoi.system.System.Ping gnoi.system.System.Reboot gnoi.system.System.RebootStatus gnoi.system.System.SetPackage gnoi.system.System.SwitchControlProcessor gnoi.system.System.Time gnoi.system.System.Traceroute Example 3) grpcurl --plaintext --import-path ${GOPATH}/src \\ --proto github.com/openconfig/gnoi/os/os.proto list gnoi.os.OS Output: gnoi.os.OS.Activate gnoi.os.OS.Install gnoi.os.OS.Verify","title":"List from a proto file"},{"location":"examples/gnoi/grpcurl/#list-from-a-grpc-server-eos-device","text":"$ grpcurl --plaintext 192.0.2.105:6030 list gnmi.gNMI gnoi.certificate.CertificateManagement gnoi.system.System grpc.reflection.v1alpha.ServerReflection","title":"List from a gRPC server (EOS device)"},{"location":"examples/gnoi/grpcurl/#execute-gnoi-rpc-with-eos","text":"grpcurl -H 'username: arista' -H 'password: arista' \\ -d '{\"destination\": \"172.31.255.0\", \"count\": 2, \"do_not_resolve\":true}' \\ -import-path ${GOPATH}/src -proto github.com/openconfig/gnoi/system/system.proto \\ -plaintext 192.0.2.118:6030 gnoi.system.System/Ping Output: { \"source\": \"172.31.255.0\", \"time\": \"29800000\", \"bytes\": 64, \"sequence\": 1, \"ttl\": 63 } { \"source\": \"172.31.255.0\", \"time\": \"25200000\", \"bytes\": 64, \"sequence\": 2, \"ttl\": 63 } { \"source\": \"172.31.255.0\", \"time\": \"1001000000\", \"sent\": 2, \"received\": 2, \"minTime\": \"25210000\", \"avgTime\": \"27510000\", \"maxTime\": \"29810000\", \"stdDev\": \"2300000\" } grpcurl -H 'username: arista' -H 'password: arista' \\ -d '{\"destination\": \"172.31.255.0\", \"max_ttl\": 50, \"do_not_resolve\":true}' \\ -import-path ${GOPATH}/src -proto github.com/openconfig/gnoi/system/system.proto \\ -plaintext 192.0.2.118:6030 gnoi.system.System/Traceroute Output: { \"destinationName\": \"172.31.255.0\", \"destinationAddress\": \"172.31.255.0\", \"hops\": 50, \"packetSize\": 60 } { \"hop\": 1, \"address\": \"10.90.90.1\", \"rtt\": \"16589000\" } { \"hop\": 1, \"address\": \"10.90.90.1\", \"rtt\": \"17886000\" } { \"hop\": 1, \"address\": \"10.90.90.1\", \"rtt\": \"23219000\" } { \"hop\": 2, \"address\": \"172.31.255.0\", \"rtt\": \"46537000\" } { \"hop\": 2, \"address\": \"172.31.255.0\", \"rtt\": \"47873000\" } { \"hop\": 2, \"address\": \"172.31.255.0\", \"rtt\": \"55376000\" }","title":"Execute gNOI RPC with EOS"},{"location":"examples/golang/","text":"Overview The following example uses the goarista go module for gNMI to interact with a device. Within this very simplistic getting started example main.go will simply perform a get method to the device for all paths. package main import ( \"context\" \"fmt\" \"github.com/aristanetworks/glog\" \"github.com/aristanetworks/goarista/gnmi\" pb \"github.com/openconfig/gnmi/proto/gnmi\" ) var cfg = &gnmi.Config{ Addr: \"10.20.30.67:6030\", Username: \"ansible\", Password: \"ansible\", } func main() { paths := []string{\"/\"} var origin = \"openconfig\" //var origin = \"eos_native\" ctx := gnmi.NewContext(context.Background(), cfg) client, err := gnmi.Dial(cfg) if err != nil { glog.Fatal(err) } req, err := gnmi.NewGetRequest(gnmi.SplitPaths(paths), origin) if err != nil { glog.Fatal(err) } if cfg.Addr != \"\" { if req.Prefix == nil { req.Prefix = &pb.Path{} } req.Prefix.Target = cfg.Addr } err = gnmi.GetWithRequest(ctx, client, req) if err != nil { glog.Fatal(err) } fmt.Println(err) } Copy the above code into a file and run via the following command. go run main.go Truncated output { \"openconfig-acl:acl\": { \"state\": { \"counter-capability\": \"AGGREGATE_ONLY\" } }, \"arista-exp-eos:arista\": { \"eos\": { \"arista-exp-eos-igmpsnooping:bridging\": { \"igmpsnooping\": { \"config\": {} } }, \"arista-exp-eos-mlag:mlag\": { \"config\": { \"dual-primary-action\": \"action-none\",","title":"Go Lang"},{"location":"examples/golang/#overview","text":"The following example uses the goarista go module for gNMI to interact with a device. Within this very simplistic getting started example main.go will simply perform a get method to the device for all paths. package main import ( \"context\" \"fmt\" \"github.com/aristanetworks/glog\" \"github.com/aristanetworks/goarista/gnmi\" pb \"github.com/openconfig/gnmi/proto/gnmi\" ) var cfg = &gnmi.Config{ Addr: \"10.20.30.67:6030\", Username: \"ansible\", Password: \"ansible\", } func main() { paths := []string{\"/\"} var origin = \"openconfig\" //var origin = \"eos_native\" ctx := gnmi.NewContext(context.Background(), cfg) client, err := gnmi.Dial(cfg) if err != nil { glog.Fatal(err) } req, err := gnmi.NewGetRequest(gnmi.SplitPaths(paths), origin) if err != nil { glog.Fatal(err) } if cfg.Addr != \"\" { if req.Prefix == nil { req.Prefix = &pb.Path{} } req.Prefix.Target = cfg.Addr } err = gnmi.GetWithRequest(ctx, client, req) if err != nil { glog.Fatal(err) } fmt.Println(err) } Copy the above code into a file and run via the following command. go run main.go","title":"Overview"},{"location":"examples/golang/#truncated-output","text":"{ \"openconfig-acl:acl\": { \"state\": { \"counter-capability\": \"AGGREGATE_ONLY\" } }, \"arista-exp-eos:arista\": { \"eos\": { \"arista-exp-eos-igmpsnooping:bridging\": { \"igmpsnooping\": { \"config\": {} } }, \"arista-exp-eos-mlag:mlag\": { \"config\": { \"dual-primary-action\": \"action-none\",","title":"Truncated output"},{"location":"examples/netconf/","text":"About NETCONF NETCONF is a protocol defined in the RFC 6241","title":"About NETCONF"},{"location":"examples/netconf/#about-netconf","text":"NETCONF is a protocol defined in the RFC 6241","title":"About NETCONF"},{"location":"examples/netconf/ncclient/","text":"Install ncclient pip install ncclient pip3 freeze | grep ncclient Requirements on the EOS device switch1#show running-config section netconf management api netconf transport ssh test vrf MGMT switch1#sh management api netconf Enabled: Yes Server: running on port 830, in MGMT VRF ncclient demo interactive python session >>> from ncclient import manager >>> eos=manager.connect(host=\"198.51.100.221\", port=\"830\", timeout=30, username=\"arista\", password=\"arista\", hostkey_verify=False) >>> >>> eos.connected True >>> eos.timeout 30 >>> eos.session_id '1292406600' >>> >>> assert(\"urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring\" in eos.server_capabilities), \"NetConf server not compliant with https://tools.ietf.org/html/rfc6022\" >>> >>> conf = ''' ... <config> ... <system xmlns=\"http://openconfig.net/yang/system\"> ... <config> ... <domain-name>abc.xyz</domain-name> ... </config> ... </system> ... </config> ... ''' >>> >>> eos.edit_config(target = \"running\", config = conf, default_operation=\"merge\") <rpc-reply xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"urn:uuid:33ca18d3-43b5-4277-a6ce-9a751f74cada\"><ok></ok></rpc-reply> >>> >>> domain_name=''' ... <system xmlns=\"http://openconfig.net/yang/system\"> ... <config> ... <domain-name> ... </domain-name> ... </config> ... </system> ... ''' >>> >>> domain_name_conf = eos.get_config(source=\"running\", filter=(\"subtree\", domain_name)) >>> print (domain_name_conf) <rpc-reply xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"urn:uuid:a43cfae5-3215-4f99-97ce-ff61ca1e285c\"><data time-modified=\"2021-07-11T12:29:49.133333939Z\"><system xmlns=\"http://openconfig.net/yang/system\"><config><domain-name>abc.xyz</domain-name></config></system></data></rpc-reply> >>> >>> eos.close_session() <rpc-reply xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"urn:uuid:1841896a-9c97-467d-aef8-9a405b51d298\"><ok></ok></rpc-reply> >>> >>> eos.connected False >>> >>> exit() >>> from lxml import etree >>> >>> system_e = etree.Element(\"system\") >>> dns_e = etree.SubElement(system_e, \"dns\") >>> servers_e = etree.SubElement(dns_e, \"servers\") >>> server_e = etree.SubElement(servers_e, \"server\") >>> address_e = etree.SubElement(server_e, \"address\") >>> config_e = etree.SubElement(server_e, \"config\") >>> address_e.text = \"8.8.8.8\" >>> >>> address_e.text '8.8.8.8' >>> >>> etree.tostring(system_e) b'<system><dns><servers><server><address>8.8.8.8</address><config/></server></servers></dns></system>' >>> >>> etree.tostring(system_e, pretty_print = True) b'<system>\\n <dns>\\n <servers>\\n <server>\\n <address>8.8.8.8</address>\\n <config/>\\n </server>\\n </servers>\\n </dns>\\n</system>\\n' >>> >>> etree.dump(system_e) <system> <dns> <servers> <server> <address>8.8.8.8</address> <config/> </server> </servers> </dns> </system> >>> >>> from ncclient import manager >>> eos=manager.connect(host=\"198.51.100.221\", port=\"830\", timeout=30, username=\"arista\", password=\"arista\", hostkey_verify=False) >>> eos.connected True >>> >>> print(eos.get_config(source=\"running\", filter=(\"subtree\", system_e))) <rpc-reply xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"urn:uuid:ab16e734-04df-4d4f-8efe-27963ece586c\"><data time-modified=\"2021-07-11T12:29:49.138275819Z\"><system xmlns=\"http://openconfig.net/yang/system\"><dns><servers><server><address>8.8.8.8</address><config><address>8.8.8.8</address></config></server></servers></dns></system></data></rpc-reply> >>> >>> eos.close_session() <rpc-reply xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"urn:uuid:2eed88ee-106b-44d1-b196-f79611512b25\"><ok></ok></rpc-reply> >>> >>> exit() Other demos There are many python scripts using ncclient in this directory . To execute one of these scripts, run as example this command: python3 print_server_capabilities.py Capabilities print_client_capabilities.py prints the NETCONF client capabilities. print_server_capabilities.py prints the NETCONF server capabilities. get operation get.py uses the get operation to retrieve the configuration and state data. It uses a filter to specify the portion of the configuration and state data to retrieve. get-config operation get_config.py uses the get-config operation with a filter to retrieve part of the configuration. edit-config operation edit_config_merge.py uses the edit-config operation with the merge operation (which is the default operation for edit-config ) edit_config_replace.py uses the edit-config operation with the replace operation edit_config_delete.py uses the edit-config operation with the delete operation EOS_commands_with_NETCONF.py configures a device using the edit-config operation and EOS data model candidate_configuration_commit.py uses the edit-config operation with the candidate configuration datastore. It uses a lock operation and commit operation. candidate_configuration_discard_changes.py . uses the edit-config operation with the candidate configuration datastore. It uses a lock operation and discard_change operation to revert the candidate configuration to the current running configuration (insteaf of commiting the candidate configuration). #### XML output parsing parse_xml_output.py uses the get operation to retrieve data from the device and then parse this data. RPC rpc.py sends RPCs to configure EOS devices.","title":"ncclient"},{"location":"examples/netconf/ncclient/#install-ncclient","text":"pip install ncclient pip3 freeze | grep ncclient","title":"Install ncclient"},{"location":"examples/netconf/ncclient/#requirements-on-the-eos-device","text":"switch1#show running-config section netconf management api netconf transport ssh test vrf MGMT switch1#sh management api netconf Enabled: Yes Server: running on port 830, in MGMT VRF","title":"Requirements on the EOS device"},{"location":"examples/netconf/ncclient/#ncclient-demo","text":"","title":"ncclient demo"},{"location":"examples/netconf/ncclient/#interactive-python-session","text":">>> from ncclient import manager >>> eos=manager.connect(host=\"198.51.100.221\", port=\"830\", timeout=30, username=\"arista\", password=\"arista\", hostkey_verify=False) >>> >>> eos.connected True >>> eos.timeout 30 >>> eos.session_id '1292406600' >>> >>> assert(\"urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring\" in eos.server_capabilities), \"NetConf server not compliant with https://tools.ietf.org/html/rfc6022\" >>> >>> conf = ''' ... <config> ... <system xmlns=\"http://openconfig.net/yang/system\"> ... <config> ... <domain-name>abc.xyz</domain-name> ... </config> ... </system> ... </config> ... ''' >>> >>> eos.edit_config(target = \"running\", config = conf, default_operation=\"merge\") <rpc-reply xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"urn:uuid:33ca18d3-43b5-4277-a6ce-9a751f74cada\"><ok></ok></rpc-reply> >>> >>> domain_name=''' ... <system xmlns=\"http://openconfig.net/yang/system\"> ... <config> ... <domain-name> ... </domain-name> ... </config> ... </system> ... ''' >>> >>> domain_name_conf = eos.get_config(source=\"running\", filter=(\"subtree\", domain_name)) >>> print (domain_name_conf) <rpc-reply xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"urn:uuid:a43cfae5-3215-4f99-97ce-ff61ca1e285c\"><data time-modified=\"2021-07-11T12:29:49.133333939Z\"><system xmlns=\"http://openconfig.net/yang/system\"><config><domain-name>abc.xyz</domain-name></config></system></data></rpc-reply> >>> >>> eos.close_session() <rpc-reply xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"urn:uuid:1841896a-9c97-467d-aef8-9a405b51d298\"><ok></ok></rpc-reply> >>> >>> eos.connected False >>> >>> exit() >>> from lxml import etree >>> >>> system_e = etree.Element(\"system\") >>> dns_e = etree.SubElement(system_e, \"dns\") >>> servers_e = etree.SubElement(dns_e, \"servers\") >>> server_e = etree.SubElement(servers_e, \"server\") >>> address_e = etree.SubElement(server_e, \"address\") >>> config_e = etree.SubElement(server_e, \"config\") >>> address_e.text = \"8.8.8.8\" >>> >>> address_e.text '8.8.8.8' >>> >>> etree.tostring(system_e) b'<system><dns><servers><server><address>8.8.8.8</address><config/></server></servers></dns></system>' >>> >>> etree.tostring(system_e, pretty_print = True) b'<system>\\n <dns>\\n <servers>\\n <server>\\n <address>8.8.8.8</address>\\n <config/>\\n </server>\\n </servers>\\n </dns>\\n</system>\\n' >>> >>> etree.dump(system_e) <system> <dns> <servers> <server> <address>8.8.8.8</address> <config/> </server> </servers> </dns> </system> >>> >>> from ncclient import manager >>> eos=manager.connect(host=\"198.51.100.221\", port=\"830\", timeout=30, username=\"arista\", password=\"arista\", hostkey_verify=False) >>> eos.connected True >>> >>> print(eos.get_config(source=\"running\", filter=(\"subtree\", system_e))) <rpc-reply xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"urn:uuid:ab16e734-04df-4d4f-8efe-27963ece586c\"><data time-modified=\"2021-07-11T12:29:49.138275819Z\"><system xmlns=\"http://openconfig.net/yang/system\"><dns><servers><server><address>8.8.8.8</address><config><address>8.8.8.8</address></config></server></servers></dns></system></data></rpc-reply> >>> >>> eos.close_session() <rpc-reply xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"urn:uuid:2eed88ee-106b-44d1-b196-f79611512b25\"><ok></ok></rpc-reply> >>> >>> exit()","title":"interactive python session"},{"location":"examples/netconf/ncclient/#other-demos","text":"There are many python scripts using ncclient in this directory . To execute one of these scripts, run as example this command: python3 print_server_capabilities.py","title":"Other demos"},{"location":"examples/netconf/ncclient/#capabilities","text":"print_client_capabilities.py prints the NETCONF client capabilities. print_server_capabilities.py prints the NETCONF server capabilities.","title":"Capabilities"},{"location":"examples/netconf/ncclient/#get-operation","text":"get.py uses the get operation to retrieve the configuration and state data. It uses a filter to specify the portion of the configuration and state data to retrieve.","title":"get operation"},{"location":"examples/netconf/ncclient/#get-config-operation","text":"get_config.py uses the get-config operation with a filter to retrieve part of the configuration.","title":"get-config operation"},{"location":"examples/netconf/ncclient/#edit-config-operation","text":"edit_config_merge.py uses the edit-config operation with the merge operation (which is the default operation for edit-config ) edit_config_replace.py uses the edit-config operation with the replace operation edit_config_delete.py uses the edit-config operation with the delete operation EOS_commands_with_NETCONF.py configures a device using the edit-config operation and EOS data model candidate_configuration_commit.py uses the edit-config operation with the candidate configuration datastore. It uses a lock operation and commit operation. candidate_configuration_discard_changes.py . uses the edit-config operation with the candidate configuration datastore. It uses a lock operation and discard_change operation to revert the candidate configuration to the current running configuration (insteaf of commiting the candidate configuration). #### XML output parsing parse_xml_output.py uses the get operation to retrieve data from the device and then parse this data.","title":"edit-config operation"},{"location":"examples/netconf/ncclient/#rpc","text":"rpc.py sends RPCs to configure EOS devices.","title":"RPC"},{"location":"examples/netconf/netconf_over_ssh/","text":"Requirements on the EOS device switch1#show running-config section netconf management api netconf transport ssh test vrf MGMT switch1#sh management api netconf Enabled: Yes Server: running on port 830, in MGMT VRF About NETCONF over SSH NETCONF over SSH is discussed in the RFC 6242 In order to open a NETCONF session inside an SSH connection, there are two options: we can invoke the NETCONF subsystem using the following SSH command ssh username@device -s netconf we can establish an SSH connection to an EOS device (NETCONF server), and then run the EOS command netconf start-client NETCONF over SSH demo Start a NETCONF over SSH session s70515#netconf start-client Advertise the client capabilities Once the NETCONF session is open, the NETCONF server (EOS device) advertises its capabilities. You must advertise the client capabilities. Example: <hello xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"> <capabilities> <capability>urn:ietf:params:netconf:base:1.0</capability> <capability>urn:ietf:params:netconf:capability:candidate:1.0</capability> <capability>urn:ietf:params:netconf:capability:confimed-commit:1.0</capability> <capability>urn:ietf:params:netconf:capability:writable-running:1.0</capability> <capability>urn:ietf:params:netconf:capability:validate:1.0</capability> </capabilities> </hello> ]]>]]> Get all configuration and state data <rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"1\"> <get> </get> </rpc> ]]>]]> Get the operational status of an Interface <rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"2\"> <get> <filter type=\"subtree\"> <interfaces> <interface> <name>Ethernet3</name> <state> <oper-status> </oper-status> </state> </interface> </interfaces> </filter> </get> </rpc> ]]>]]> Get the whole running configuration <rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"3\"> <get-config> <source> <running/> </source> </get-config> </rpc> ]]>]]> Get the running configuration of an interface <rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"4\"> <get-config> <source> <running/> </source> <filter> <interfaces> <interface> <name>Ethernet3</name> </interface> </interfaces> </filter> </get-config> </rpc> ]]>]]> Get the interface description from the running configuration <rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"5\"> <get-config> <source> <running/> </source> <filter> <interfaces> <interface> <name>Ethernet3</name> <config> <description> </description> </config> </interface> </interfaces> </filter> </get-config> </rpc> ]]>]]> Lock the running configuration <rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"6\"> <lock> <target> <running/> </target> </lock> </rpc> ]]>]]> Edit the running configuration using EOS native data model <rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"7\"> <edit-config> <target> <running/> </target> <default-operation>merge</default-operation> <commands> <command>vlan 198</command> <command>name test198</command> <command>interface ethernet6</command> <command>description test</command> <command>switchport access vlan 98</command> </commands> </edit-config> </rpc> ]]>]]> Edit the running configuration using OpenConfig data model <rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"8\"> <edit-config> <target> <running/> </target> <default-operation>merge</default-operation> <config> <interfaces> <interface> <name>Ethernet4</name> <config> <description>This is the best interface</description> </config> </interface> </interfaces> </config> </edit-config> </rpc> ]]>]]> Edit the running configuration to delete an existing existing data <rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"9\"> <edit-config> <target> <running/> </target> <default-operation>none</default-operation> <config> <system xmlns=\"http://arista.com/yang/openconfig/system/\"> <dns> <servers> <server> <address operation=\"delete\">1.1.1.1</address> </server> </servers> </dns> </system> </config> </edit-config> </rpc> ]]>]]> Unlock the running configuration <rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"10\"> <unlock> <target> <running/> </target> </unlock> </rpc> ]]>]]> Save running configuration on the flash <rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"11\"> <copy-config> <target> <url> flash:/test.cfg </url> </target> <source> <running/> </source> </copy-config> </rpc> ]]>]]> Copy the running configuration datastore to the startup configuration datastore <rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"12\"> <copy-config> <target> <startup/> </target> <source> <running/> </source> </copy-config> </rpc> ]]>]]> Lock the candidate configuration <rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"13\"> <lock> <target> <candidate/> </target> </lock> </rpc> ]]>]]> Edit the candidate configuration - edit interface description <rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"14\"> <edit-config> <target> <candidate/> </target> <default-operation>merge</default-operation> <config> <interfaces> <interface> <name>Ethernet5/1</name> <config> <description>This is the best interface</description> </config> </interface> </interfaces> </config> </edit-config> </rpc> ]]>]]> Commit the configuration change (from the candidate to the running configuration) <rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"15\"> <commit/> </rpc> ]]>]]> Unlock the candidate configuration <rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"20\"> <unlock> <target> <candidate/> </target> </unlock> </rpc> ]]>]]> Edit the candidate configuration - set hostname <rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"21\"> <edit-config> <target> <candidate/> </target> <default-operation>merge</default-operation> <config> <system> <config> <hostname>test</hostname> </config> </system> </config> </edit-config> </rpc> ]]>]]> Get part of the candidate configuration <rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"5\"> <get-config> <source> <candidate/> </source> <filter> <system> <config> <hostname></hostname> </config> </system> </filter> </get-config> </rpc> ]]>]]> Revert the candidate configuration to the current running configuration If you decide to not commit the candidate configuration, you can revert the candidate configuration to the current running configuration <rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"90\"> <discard-changes/> </rpc> ]]>]]> Close the session <rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"100\"> <close-session> </close-session> </rpc> ]]>]]>","title":"NETCONF over SSH"},{"location":"examples/netconf/netconf_over_ssh/#requirements-on-the-eos-device","text":"switch1#show running-config section netconf management api netconf transport ssh test vrf MGMT switch1#sh management api netconf Enabled: Yes Server: running on port 830, in MGMT VRF","title":"Requirements on the EOS device"},{"location":"examples/netconf/netconf_over_ssh/#about-netconf-over-ssh","text":"NETCONF over SSH is discussed in the RFC 6242 In order to open a NETCONF session inside an SSH connection, there are two options: we can invoke the NETCONF subsystem using the following SSH command ssh username@device -s netconf we can establish an SSH connection to an EOS device (NETCONF server), and then run the EOS command netconf start-client","title":"About NETCONF over SSH"},{"location":"examples/netconf/netconf_over_ssh/#netconf-over-ssh-demo","text":"","title":"NETCONF over SSH demo"},{"location":"examples/netconf/netconf_over_ssh/#start-a-netconf-over-ssh-session","text":"s70515#netconf start-client","title":"Start a NETCONF over SSH session"},{"location":"examples/netconf/netconf_over_ssh/#advertise-the-client-capabilities","text":"Once the NETCONF session is open, the NETCONF server (EOS device) advertises its capabilities. You must advertise the client capabilities. Example: <hello xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\"> <capabilities> <capability>urn:ietf:params:netconf:base:1.0</capability> <capability>urn:ietf:params:netconf:capability:candidate:1.0</capability> <capability>urn:ietf:params:netconf:capability:confimed-commit:1.0</capability> <capability>urn:ietf:params:netconf:capability:writable-running:1.0</capability> <capability>urn:ietf:params:netconf:capability:validate:1.0</capability> </capabilities> </hello> ]]>]]>","title":"Advertise the client capabilities"},{"location":"examples/netconf/netconf_over_ssh/#get-all-configuration-and-state-data","text":"<rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"1\"> <get> </get> </rpc> ]]>]]>","title":"Get all configuration and state data"},{"location":"examples/netconf/netconf_over_ssh/#get-the-operational-status-of-an-interface","text":"<rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"2\"> <get> <filter type=\"subtree\"> <interfaces> <interface> <name>Ethernet3</name> <state> <oper-status> </oper-status> </state> </interface> </interfaces> </filter> </get> </rpc> ]]>]]>","title":"Get the operational status of an Interface"},{"location":"examples/netconf/netconf_over_ssh/#get-the-whole-running-configuration","text":"<rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"3\"> <get-config> <source> <running/> </source> </get-config> </rpc> ]]>]]>","title":"Get the whole running configuration"},{"location":"examples/netconf/netconf_over_ssh/#get-the-running-configuration-of-an-interface","text":"<rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"4\"> <get-config> <source> <running/> </source> <filter> <interfaces> <interface> <name>Ethernet3</name> </interface> </interfaces> </filter> </get-config> </rpc> ]]>]]>","title":"Get the running configuration of an interface"},{"location":"examples/netconf/netconf_over_ssh/#get-the-interface-description-from-the-running-configuration","text":"<rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"5\"> <get-config> <source> <running/> </source> <filter> <interfaces> <interface> <name>Ethernet3</name> <config> <description> </description> </config> </interface> </interfaces> </filter> </get-config> </rpc> ]]>]]>","title":"Get the interface description from the running configuration"},{"location":"examples/netconf/netconf_over_ssh/#lock-the-running-configuration","text":"<rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"6\"> <lock> <target> <running/> </target> </lock> </rpc> ]]>]]>","title":"Lock the running configuration"},{"location":"examples/netconf/netconf_over_ssh/#edit-the-running-configuration-using-eos-native-data-model","text":"<rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"7\"> <edit-config> <target> <running/> </target> <default-operation>merge</default-operation> <commands> <command>vlan 198</command> <command>name test198</command> <command>interface ethernet6</command> <command>description test</command> <command>switchport access vlan 98</command> </commands> </edit-config> </rpc> ]]>]]>","title":"Edit the running configuration using EOS native data model"},{"location":"examples/netconf/netconf_over_ssh/#edit-the-running-configuration-using-openconfig-data-model","text":"<rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"8\"> <edit-config> <target> <running/> </target> <default-operation>merge</default-operation> <config> <interfaces> <interface> <name>Ethernet4</name> <config> <description>This is the best interface</description> </config> </interface> </interfaces> </config> </edit-config> </rpc> ]]>]]>","title":"Edit the running configuration using OpenConfig data model"},{"location":"examples/netconf/netconf_over_ssh/#edit-the-running-configuration-to-delete-an-existing-existing-data","text":"<rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"9\"> <edit-config> <target> <running/> </target> <default-operation>none</default-operation> <config> <system xmlns=\"http://arista.com/yang/openconfig/system/\"> <dns> <servers> <server> <address operation=\"delete\">1.1.1.1</address> </server> </servers> </dns> </system> </config> </edit-config> </rpc> ]]>]]>","title":"Edit the running configuration to delete an existing existing data"},{"location":"examples/netconf/netconf_over_ssh/#unlock-the-running-configuration","text":"<rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"10\"> <unlock> <target> <running/> </target> </unlock> </rpc> ]]>]]>","title":"Unlock the running configuration"},{"location":"examples/netconf/netconf_over_ssh/#save-running-configuration-on-the-flash","text":"<rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"11\"> <copy-config> <target> <url> flash:/test.cfg </url> </target> <source> <running/> </source> </copy-config> </rpc> ]]>]]>","title":"Save running configuration on the flash"},{"location":"examples/netconf/netconf_over_ssh/#copy-the-running-configuration-datastore-to-the-startup-configuration-datastore","text":"<rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"12\"> <copy-config> <target> <startup/> </target> <source> <running/> </source> </copy-config> </rpc> ]]>]]>","title":"Copy the running configuration datastore to the startup configuration datastore"},{"location":"examples/netconf/netconf_over_ssh/#lock-the-candidate-configuration","text":"<rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"13\"> <lock> <target> <candidate/> </target> </lock> </rpc> ]]>]]>","title":"Lock the candidate configuration"},{"location":"examples/netconf/netconf_over_ssh/#edit-the-candidate-configuration-edit-interface-description","text":"<rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"14\"> <edit-config> <target> <candidate/> </target> <default-operation>merge</default-operation> <config> <interfaces> <interface> <name>Ethernet5/1</name> <config> <description>This is the best interface</description> </config> </interface> </interfaces> </config> </edit-config> </rpc> ]]>]]>","title":"Edit the candidate configuration - edit interface description"},{"location":"examples/netconf/netconf_over_ssh/#commit-the-configuration-change-from-the-candidate-to-the-running-configuration","text":"<rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"15\"> <commit/> </rpc> ]]>]]>","title":"Commit the configuration change (from the candidate to the running configuration)"},{"location":"examples/netconf/netconf_over_ssh/#unlock-the-candidate-configuration","text":"<rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"20\"> <unlock> <target> <candidate/> </target> </unlock> </rpc> ]]>]]>","title":"Unlock the candidate configuration"},{"location":"examples/netconf/netconf_over_ssh/#edit-the-candidate-configuration-set-hostname","text":"<rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"21\"> <edit-config> <target> <candidate/> </target> <default-operation>merge</default-operation> <config> <system> <config> <hostname>test</hostname> </config> </system> </config> </edit-config> </rpc> ]]>]]>","title":"Edit the candidate configuration - set hostname"},{"location":"examples/netconf/netconf_over_ssh/#get-part-of-the-candidate-configuration","text":"<rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"5\"> <get-config> <source> <candidate/> </source> <filter> <system> <config> <hostname></hostname> </config> </system> </filter> </get-config> </rpc> ]]>]]>","title":"Get part of the candidate configuration"},{"location":"examples/netconf/netconf_over_ssh/#revert-the-candidate-configuration-to-the-current-running-configuration","text":"If you decide to not commit the candidate configuration, you can revert the candidate configuration to the current running configuration <rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"90\"> <discard-changes/> </rpc> ]]>]]>","title":"Revert the candidate configuration to the current running configuration"},{"location":"examples/netconf/netconf_over_ssh/#close-the-session","text":"<rpc xmlns=\"urn:ietf:params:xml:ns:netconf:base:1.0\" message-id=\"100\"> <close-session> </close-session> </rpc> ]]>]]>","title":"Close the session"},{"location":"examples/pyang/","text":"About Pyang pyang is a python program. We can use it to: Validate YANG modules against YANG RFCs Convert YANG modules into equivalent YIN module (XML) Generate a tree representation of YANG models for quick visualization Install Pyang pip install pyang pip3 freeze | grep pyang pip3 freeze | grep pyang Get YANG modules We need YANG modules so we can use Pyang. Create a directory mkdir yang_modules Clone the OpenConfig repository git clone https://github.com/openconfig/public.git ls public Copy all the YANG files from OpenConfig to the yang_modules directory cp public/release/models/*.yang yang_modules/. cp -R public/release/models/*/*.yang yang_modules/. cp public/third_party/ietf/*.yang yang_modules/. Move to the yang_modules directory It has all the YANG files published on the OpenConfig repository cd yang_modules/ ls Validate YANG modules pyang openconfig-bgp.yang pyang openconfig-interfaces.yang Convert a YANG module into an equivalent YIN module A YANG module can be translated into an XML syntax called YIN. The translated module is called a YIN module. The YANG and YIN formats contain equivalent information using different notations: YIN is YANG in XML. A YANG module can be translated into YIN syntax without losing any information. Example (openconfig-bgp.yin is the YIN equivalent of openconfig-bgp.yang) pyang openconfig-bgp.yang -f yin -o openconfig-bgp.yin ls *.yin Generate a tree representation of YANG modules for quick visualization pyang openconfig-interfaces.yang -f tree Reveal output module: openconfig-interfaces +--rw interfaces +--rw interface* [name] +--rw name -> ../config/name +--rw config | +--rw name? string | +--rw type identityref | +--rw mtu? uint16 | +--rw loopback-mode? boolean | +--rw description? string | +--rw enabled? boolean +--ro state | +--ro name? string | +--ro type identityref | +--ro mtu? uint16 | +--ro loopback-mode? boolean | +--ro description? string | +--ro enabled? boolean | +--ro ifindex? uint32 | +--ro admin-status enumeration | +--ro oper-status enumeration | +--ro last-change? oc-types:timeticks64 | +--ro logical? boolean | +--ro management? boolean | +--ro cpu? boolean | +--ro counters | +--ro in-octets? oc-yang:counter64 | +--ro in-pkts? oc-yang:counter64 | +--ro in-unicast-pkts? oc-yang:counter64 | +--ro in-broadcast-pkts? oc-yang:counter64 | +--ro in-multicast-pkts? oc-yang:counter64 | +--ro in-discards? oc-yang:counter64 | +--ro in-errors? oc-yang:counter64 | +--ro in-unknown-protos? oc-yang:counter64 | +--ro in-fcs-errors? oc-yang:counter64 | +--ro out-octets? oc-yang:counter64 | +--ro out-pkts? oc-yang:counter64 | +--ro out-unicast-pkts? oc-yang:counter64 | +--ro out-broadcast-pkts? oc-yang:counter64 | +--ro out-multicast-pkts? oc-yang:counter64 | +--ro out-discards? oc-yang:counter64 | +--ro out-errors? oc-yang:counter64 | +--ro carrier-transitions? oc-yang:counter64 | +--ro last-clear? oc-types:timeticks64 +--rw hold-time | +--rw config | | +--rw up? uint32 | | +--rw down? uint32 | +--ro state | +--ro up? uint32 | +--ro down? uint32 +--rw subinterfaces +--rw subinterface* [index] +--rw index -> ../config/index +--rw config | +--rw index? uint32 | +--rw description? string | +--rw enabled? boolean +--ro state +--ro index? uint32 +--ro description? string +--ro enabled? boolean +--ro name? string +--ro ifindex? uint32 +--ro admin-status enumeration +--ro oper-status enumeration +--ro last-change? oc-types:timeticks64 +--ro logical? boolean +--ro management? boolean +--ro cpu? boolean +--ro counters +--ro in-octets? oc-yang:counter64 +--ro in-pkts? oc-yang:counter64 +--ro in-unicast-pkts? oc-yang:counter64 +--ro in-broadcast-pkts? oc-yang:counter64 +--ro in-multicast-pkts? oc-yang:counter64 +--ro in-discards? oc-yang:counter64 +--ro in-errors? oc-yang:counter64 +--ro in-unknown-protos? oc-yang:counter64 +--ro in-fcs-errors? oc-yang:counter64 +--ro out-octets? oc-yang:counter64 +--ro out-pkts? oc-yang:counter64 +--ro out-unicast-pkts? oc-yang:counter64 +--ro out-broadcast-pkts? oc-yang:counter64 +--ro out-multicast-pkts? oc-yang:counter64 +--ro out-discards? oc-yang:counter64 +--ro out-errors? oc-yang:counter64 +--ro carrier-transitions? oc-yang:counter64 +--ro last-clear? oc-types:timeticks64 pyang openconfig-interfaces.yang -f tree --tree-path=/interfaces/interface/state Reveal output module: openconfig-interfaces +--rw interfaces +--rw interface* [name] +--ro state +--ro name? string +--ro type identityref +--ro mtu? uint16 +--ro loopback-mode? boolean +--ro description? string +--ro enabled? boolean +--ro ifindex? uint32 +--ro admin-status enumeration +--ro oper-status enumeration +--ro last-change? oc-types:timeticks64 +--ro logical? boolean +--ro management? boolean +--ro cpu? boolean +--ro counters +--ro in-octets? oc-yang:counter64 +--ro in-pkts? oc-yang:counter64 +--ro in-unicast-pkts? oc-yang:counter64 +--ro in-broadcast-pkts? oc-yang:counter64 +--ro in-multicast-pkts? oc-yang:counter64 +--ro in-discards? oc-yang:counter64 +--ro in-errors? oc-yang:counter64 +--ro in-unknown-protos? oc-yang:counter64 +--ro in-fcs-errors? oc-yang:counter64 +--ro out-octets? oc-yang:counter64 +--ro out-pkts? oc-yang:counter64 +--ro out-unicast-pkts? oc-yang:counter64 +--ro out-broadcast-pkts? oc-yang:counter64 +--ro out-multicast-pkts? oc-yang:counter64 +--ro out-discards? oc-yang:counter64 +--ro out-errors? oc-yang:counter64 +--ro carrier-transitions? oc-yang:counter64 +--ro last-clear? oc-types:timeticks64 pyang openconfig-interfaces.yang -f tree --tree-depth=4 Reveal output module: openconfig-interfaces +--rw interfaces +--rw interface* [name] +--rw name -> ../config/name +--rw config | +--rw name? string | +--rw type identityref | +--rw mtu? uint16 | +--rw loopback-mode? boolean | +--rw description? string | +--rw enabled? boolean +--ro state | +--ro name? string | +--ro type identityref | +--ro mtu? uint16 | +--ro loopback-mode? boolean | +--ro description? string | +--ro enabled? boolean | +--ro ifindex? uint32 | +--ro admin-status enumeration | +--ro oper-status enumeration | +--ro last-change? oc-types:timeticks64 | +--ro logical? boolean | +--ro management? boolean | +--ro cpu? boolean | +--ro counters | ... +--rw hold-time | +--rw config | | ... | +--ro state | ... +--rw subinterfaces +--rw subinterface* [index] ... pyang openconfig-bgp.yang -f tree --tree-path=/bgp/neighbors --tree-depth=4 Reveal output module: openconfig-bgp +--rw bgp +--rw neighbors +--rw neighbor* [neighbor-address] +--rw neighbor-address -> ../config/neighbor-address +--rw config | ... +--ro state | ... +--rw timers | ... +--rw transport | ... +--rw error-handling | ... +--rw graceful-restart | ... +--rw logging-options | ... +--rw ebgp-multihop | ... +--rw route-reflector | ... +--rw as-path-options | ... +--rw use-multiple-paths | ... +--rw apply-policy | ... +--rw afi-safis | ... +--rw enable-bfd pyang openconfig-bgp.yang -f tree --tree-path=/bgp/neighbors/neighbor/config Reveal output module: openconfig-bgp +--rw bgp +--rw neighbors +--rw neighbor* [neighbor-address] +--rw config +--rw peer-group? -> ../../../../peer-groups/peer-group/peer-group-name +--rw neighbor-address? oc-inet:ip-address +--rw enabled? boolean +--rw peer-as? oc-inet:as-number +--rw local-as? oc-inet:as-number +--rw peer-type? oc-bgp-types:peer-type +--rw auth-password? oc-types:routing-password +--rw remove-private-as? oc-bgp-types:remove-private-as-option +--rw route-flap-damping? boolean +--rw send-community? oc-bgp-types:community-type +--rw description? string pyang openconfig-bgp.yang -f tree --tree-path=/bgp/neighbors/neighbor/state \\ --tree-depth=5 Reveal output module: openconfig-bgp +--rw bgp +--rw neighbors +--rw neighbor* [neighbor-address] +--ro state +--ro peer-group? -> ../../../../peer-groups/peer-group/peer-group-name +--ro neighbor-address? oc-inet:ip-address +--ro enabled? boolean +--ro peer-as? oc-inet:as-number +--ro local-as? oc-inet:as-number +--ro peer-type? oc-bgp-types:peer-type +--ro auth-password? oc-types:routing-password +--ro remove-private-as? oc-bgp-types:remove-private-as-option +--ro route-flap-damping? boolean +--ro send-community? oc-bgp-types:community-type +--ro description? string +--ro session-state? enumeration +--ro last-established? oc-types:timeticks64 +--ro established-transitions? oc-yang:counter64 +--ro supported-capabilities* identityref +--ro messages | ... +--ro queues | ... +--ro dynamically-configured? boolean pyang openconfig-bgp.yang -f tree --tree-path=/bgp/neighbors/neighbor/afi-safis \\ --tree-depth=6 Reveal output module: openconfig-bgp +--rw bgp +--rw neighbors +--rw neighbor* [neighbor-address] +--rw afi-safis +--rw afi-safi* [afi-safi-name] +--rw afi-safi-name -> ../config/afi-safi-name +--rw config | ... +--ro state | ... +--rw graceful-restart | ... +--rw add-paths | ... +--rw apply-policy | ... +--rw ipv4-unicast | ... +--rw ipv6-unicast | ... +--rw ipv4-labeled-unicast | ... +--rw ipv6-labeled-unicast | ... +--rw l3vpn-ipv4-unicast | ... +--rw l3vpn-ipv6-unicast | ... +--rw l3vpn-ipv4-multicast | ... +--rw l3vpn-ipv6-multicast | ... +--rw l2vpn-vpls | ... +--rw l2vpn-evpn | ... +--rw srte-policy-ipv4 | ... +--rw srte-policy-ipv6 | ... +--rw use-multiple-paths","title":"Pyang"},{"location":"examples/pyang/#about-pyang","text":"pyang is a python program. We can use it to: Validate YANG modules against YANG RFCs Convert YANG modules into equivalent YIN module (XML) Generate a tree representation of YANG models for quick visualization","title":"About Pyang"},{"location":"examples/pyang/#install-pyang","text":"pip install pyang pip3 freeze | grep pyang pip3 freeze | grep pyang","title":"Install Pyang"},{"location":"examples/pyang/#get-yang-modules","text":"We need YANG modules so we can use Pyang.","title":"Get YANG modules"},{"location":"examples/pyang/#create-a-directory","text":"mkdir yang_modules","title":"Create a directory"},{"location":"examples/pyang/#clone-the-openconfig-repository","text":"git clone https://github.com/openconfig/public.git ls public","title":"Clone the OpenConfig repository"},{"location":"examples/pyang/#copy-all-the-yang-files-from-openconfig-to-the-yang_modules-directory","text":"cp public/release/models/*.yang yang_modules/. cp -R public/release/models/*/*.yang yang_modules/. cp public/third_party/ietf/*.yang yang_modules/.","title":"Copy all the YANG files from OpenConfig to the yang_modules directory"},{"location":"examples/pyang/#move-to-the-yang_modules-directory","text":"It has all the YANG files published on the OpenConfig repository cd yang_modules/ ls","title":"Move to the yang_modules directory"},{"location":"examples/pyang/#validate-yang-modules","text":"pyang openconfig-bgp.yang pyang openconfig-interfaces.yang","title":"Validate YANG modules"},{"location":"examples/pyang/#convert-a-yang-module-into-an-equivalent-yin-module","text":"A YANG module can be translated into an XML syntax called YIN. The translated module is called a YIN module. The YANG and YIN formats contain equivalent information using different notations: YIN is YANG in XML. A YANG module can be translated into YIN syntax without losing any information. Example (openconfig-bgp.yin is the YIN equivalent of openconfig-bgp.yang) pyang openconfig-bgp.yang -f yin -o openconfig-bgp.yin ls *.yin","title":"Convert a YANG module into an equivalent YIN module"},{"location":"examples/pyang/#generate-a-tree-representation-of-yang-modules-for-quick-visualization","text":"pyang openconfig-interfaces.yang -f tree Reveal output module: openconfig-interfaces +--rw interfaces +--rw interface* [name] +--rw name -> ../config/name +--rw config | +--rw name? string | +--rw type identityref | +--rw mtu? uint16 | +--rw loopback-mode? boolean | +--rw description? string | +--rw enabled? boolean +--ro state | +--ro name? string | +--ro type identityref | +--ro mtu? uint16 | +--ro loopback-mode? boolean | +--ro description? string | +--ro enabled? boolean | +--ro ifindex? uint32 | +--ro admin-status enumeration | +--ro oper-status enumeration | +--ro last-change? oc-types:timeticks64 | +--ro logical? boolean | +--ro management? boolean | +--ro cpu? boolean | +--ro counters | +--ro in-octets? oc-yang:counter64 | +--ro in-pkts? oc-yang:counter64 | +--ro in-unicast-pkts? oc-yang:counter64 | +--ro in-broadcast-pkts? oc-yang:counter64 | +--ro in-multicast-pkts? oc-yang:counter64 | +--ro in-discards? oc-yang:counter64 | +--ro in-errors? oc-yang:counter64 | +--ro in-unknown-protos? oc-yang:counter64 | +--ro in-fcs-errors? oc-yang:counter64 | +--ro out-octets? oc-yang:counter64 | +--ro out-pkts? oc-yang:counter64 | +--ro out-unicast-pkts? oc-yang:counter64 | +--ro out-broadcast-pkts? oc-yang:counter64 | +--ro out-multicast-pkts? oc-yang:counter64 | +--ro out-discards? oc-yang:counter64 | +--ro out-errors? oc-yang:counter64 | +--ro carrier-transitions? oc-yang:counter64 | +--ro last-clear? oc-types:timeticks64 +--rw hold-time | +--rw config | | +--rw up? uint32 | | +--rw down? uint32 | +--ro state | +--ro up? uint32 | +--ro down? uint32 +--rw subinterfaces +--rw subinterface* [index] +--rw index -> ../config/index +--rw config | +--rw index? uint32 | +--rw description? string | +--rw enabled? boolean +--ro state +--ro index? uint32 +--ro description? string +--ro enabled? boolean +--ro name? string +--ro ifindex? uint32 +--ro admin-status enumeration +--ro oper-status enumeration +--ro last-change? oc-types:timeticks64 +--ro logical? boolean +--ro management? boolean +--ro cpu? boolean +--ro counters +--ro in-octets? oc-yang:counter64 +--ro in-pkts? oc-yang:counter64 +--ro in-unicast-pkts? oc-yang:counter64 +--ro in-broadcast-pkts? oc-yang:counter64 +--ro in-multicast-pkts? oc-yang:counter64 +--ro in-discards? oc-yang:counter64 +--ro in-errors? oc-yang:counter64 +--ro in-unknown-protos? oc-yang:counter64 +--ro in-fcs-errors? oc-yang:counter64 +--ro out-octets? oc-yang:counter64 +--ro out-pkts? oc-yang:counter64 +--ro out-unicast-pkts? oc-yang:counter64 +--ro out-broadcast-pkts? oc-yang:counter64 +--ro out-multicast-pkts? oc-yang:counter64 +--ro out-discards? oc-yang:counter64 +--ro out-errors? oc-yang:counter64 +--ro carrier-transitions? oc-yang:counter64 +--ro last-clear? oc-types:timeticks64 pyang openconfig-interfaces.yang -f tree --tree-path=/interfaces/interface/state Reveal output module: openconfig-interfaces +--rw interfaces +--rw interface* [name] +--ro state +--ro name? string +--ro type identityref +--ro mtu? uint16 +--ro loopback-mode? boolean +--ro description? string +--ro enabled? boolean +--ro ifindex? uint32 +--ro admin-status enumeration +--ro oper-status enumeration +--ro last-change? oc-types:timeticks64 +--ro logical? boolean +--ro management? boolean +--ro cpu? boolean +--ro counters +--ro in-octets? oc-yang:counter64 +--ro in-pkts? oc-yang:counter64 +--ro in-unicast-pkts? oc-yang:counter64 +--ro in-broadcast-pkts? oc-yang:counter64 +--ro in-multicast-pkts? oc-yang:counter64 +--ro in-discards? oc-yang:counter64 +--ro in-errors? oc-yang:counter64 +--ro in-unknown-protos? oc-yang:counter64 +--ro in-fcs-errors? oc-yang:counter64 +--ro out-octets? oc-yang:counter64 +--ro out-pkts? oc-yang:counter64 +--ro out-unicast-pkts? oc-yang:counter64 +--ro out-broadcast-pkts? oc-yang:counter64 +--ro out-multicast-pkts? oc-yang:counter64 +--ro out-discards? oc-yang:counter64 +--ro out-errors? oc-yang:counter64 +--ro carrier-transitions? oc-yang:counter64 +--ro last-clear? oc-types:timeticks64 pyang openconfig-interfaces.yang -f tree --tree-depth=4 Reveal output module: openconfig-interfaces +--rw interfaces +--rw interface* [name] +--rw name -> ../config/name +--rw config | +--rw name? string | +--rw type identityref | +--rw mtu? uint16 | +--rw loopback-mode? boolean | +--rw description? string | +--rw enabled? boolean +--ro state | +--ro name? string | +--ro type identityref | +--ro mtu? uint16 | +--ro loopback-mode? boolean | +--ro description? string | +--ro enabled? boolean | +--ro ifindex? uint32 | +--ro admin-status enumeration | +--ro oper-status enumeration | +--ro last-change? oc-types:timeticks64 | +--ro logical? boolean | +--ro management? boolean | +--ro cpu? boolean | +--ro counters | ... +--rw hold-time | +--rw config | | ... | +--ro state | ... +--rw subinterfaces +--rw subinterface* [index] ... pyang openconfig-bgp.yang -f tree --tree-path=/bgp/neighbors --tree-depth=4 Reveal output module: openconfig-bgp +--rw bgp +--rw neighbors +--rw neighbor* [neighbor-address] +--rw neighbor-address -> ../config/neighbor-address +--rw config | ... +--ro state | ... +--rw timers | ... +--rw transport | ... +--rw error-handling | ... +--rw graceful-restart | ... +--rw logging-options | ... +--rw ebgp-multihop | ... +--rw route-reflector | ... +--rw as-path-options | ... +--rw use-multiple-paths | ... +--rw apply-policy | ... +--rw afi-safis | ... +--rw enable-bfd pyang openconfig-bgp.yang -f tree --tree-path=/bgp/neighbors/neighbor/config Reveal output module: openconfig-bgp +--rw bgp +--rw neighbors +--rw neighbor* [neighbor-address] +--rw config +--rw peer-group? -> ../../../../peer-groups/peer-group/peer-group-name +--rw neighbor-address? oc-inet:ip-address +--rw enabled? boolean +--rw peer-as? oc-inet:as-number +--rw local-as? oc-inet:as-number +--rw peer-type? oc-bgp-types:peer-type +--rw auth-password? oc-types:routing-password +--rw remove-private-as? oc-bgp-types:remove-private-as-option +--rw route-flap-damping? boolean +--rw send-community? oc-bgp-types:community-type +--rw description? string pyang openconfig-bgp.yang -f tree --tree-path=/bgp/neighbors/neighbor/state \\ --tree-depth=5 Reveal output module: openconfig-bgp +--rw bgp +--rw neighbors +--rw neighbor* [neighbor-address] +--ro state +--ro peer-group? -> ../../../../peer-groups/peer-group/peer-group-name +--ro neighbor-address? oc-inet:ip-address +--ro enabled? boolean +--ro peer-as? oc-inet:as-number +--ro local-as? oc-inet:as-number +--ro peer-type? oc-bgp-types:peer-type +--ro auth-password? oc-types:routing-password +--ro remove-private-as? oc-bgp-types:remove-private-as-option +--ro route-flap-damping? boolean +--ro send-community? oc-bgp-types:community-type +--ro description? string +--ro session-state? enumeration +--ro last-established? oc-types:timeticks64 +--ro established-transitions? oc-yang:counter64 +--ro supported-capabilities* identityref +--ro messages | ... +--ro queues | ... +--ro dynamically-configured? boolean pyang openconfig-bgp.yang -f tree --tree-path=/bgp/neighbors/neighbor/afi-safis \\ --tree-depth=6 Reveal output module: openconfig-bgp +--rw bgp +--rw neighbors +--rw neighbor* [neighbor-address] +--rw afi-safis +--rw afi-safi* [afi-safi-name] +--rw afi-safi-name -> ../config/afi-safi-name +--rw config | ... +--ro state | ... +--rw graceful-restart | ... +--rw add-paths | ... +--rw apply-policy | ... +--rw ipv4-unicast | ... +--rw ipv6-unicast | ... +--rw ipv4-labeled-unicast | ... +--rw ipv6-labeled-unicast | ... +--rw l3vpn-ipv4-unicast | ... +--rw l3vpn-ipv6-unicast | ... +--rw l3vpn-ipv4-multicast | ... +--rw l3vpn-ipv6-multicast | ... +--rw l2vpn-vpls | ... +--rw l2vpn-evpn | ... +--rw srte-policy-ipv4 | ... +--rw srte-policy-ipv6 | ... +--rw use-multiple-paths","title":"Generate a tree representation of YANG modules for quick visualization"},{"location":"examples/pyangbind/","text":"PyangBind is a pyang plugin. About Pyang Please visit this link if you need help about Pyang. About PyangBind It generates Python classes from a YANG module. It converts YANG module into a Python module. This Python module can be then used to generate data which conforms with the data model defined in YANG. Install Pyang and Pyangbind pip install pyang pip install pyangbind pip3 freeze | grep pyang Get YANG modules We need YANG modules so we can use Pyang and Pyangbind. Create a directory mkdir yang_modules Clone the OpenConfig repository git clone https://github.com/openconfig/public.git Run this command to verify ls public Copy all the YANG files from OpenConfig to the yang_modules directory cp public/release/models/*.yang yang_modules/. cp -R public/release/models/*/*.yang yang_modules/. cp public/third_party/ietf/*.yang yang_modules/. Move to the yang_modules directory cd yang_modules/ Verify it has all the YANG files published on the OpenConfig repository ls Use Pyangbind to generate a Python module from a YANG module pyang --plugindir $HOME/.local/lib/python3.6/site-packages/pyangbind/plugin/ -f pybind -o oc_bgp.py openconfig-bgp.yang The above command generated the python module oc_bgp.py from the openconfig-bgp.yang file. Run this command to verify: ls oc_bgp.py Use the new python module to generate an OpenConfig configuration file The file pyangbind_demo.py uses the new python module oc_bgp.py and generates this OpenConfig configuration file demo.json python3 pyangbind_demo.py Use gNMI SET RPC to configure a device This OpenConfig configuration file demo.json can be loaded on a switch using the gNMI Set RPC Install gNMIc Please visit this link if you need help with gNMIc installation Required device configuration Please visit this link if you need help to configure EOS for gNMI Use gNMIc to configure the swicth Check the device configuration before gnmic -a 192.0.2.117:6030 --insecure -u arista -p arista get \\ --path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp' show run section bgp Use gNMIc to configure the swicth gnmic -a 192.0.2.117:6030 --insecure -u arista -p arista set \\ --replace-path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp' \\ --replace-file demo.json Check the device configuration after gnmic -a 192.0.2.117:6030 --insecure -u arista -p arista get \\ --path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp' show run section bgp","title":"Pyangbind"},{"location":"examples/pyangbind/#about-pyang","text":"Please visit this link if you need help about Pyang.","title":"About Pyang"},{"location":"examples/pyangbind/#about-pyangbind","text":"It generates Python classes from a YANG module. It converts YANG module into a Python module. This Python module can be then used to generate data which conforms with the data model defined in YANG.","title":"About PyangBind"},{"location":"examples/pyangbind/#install-pyang-and-pyangbind","text":"pip install pyang pip install pyangbind pip3 freeze | grep pyang","title":"Install Pyang and Pyangbind"},{"location":"examples/pyangbind/#get-yang-modules","text":"We need YANG modules so we can use Pyang and Pyangbind.","title":"Get YANG modules"},{"location":"examples/pyangbind/#create-a-directory","text":"mkdir yang_modules","title":"Create a directory"},{"location":"examples/pyangbind/#clone-the-openconfig-repository","text":"git clone https://github.com/openconfig/public.git Run this command to verify ls public","title":"Clone the OpenConfig repository"},{"location":"examples/pyangbind/#copy-all-the-yang-files-from-openconfig-to-the-yang_modules-directory","text":"cp public/release/models/*.yang yang_modules/. cp -R public/release/models/*/*.yang yang_modules/. cp public/third_party/ietf/*.yang yang_modules/.","title":"Copy all the YANG files from OpenConfig to the yang_modules directory"},{"location":"examples/pyangbind/#move-to-the-yang_modules-directory","text":"cd yang_modules/ Verify it has all the YANG files published on the OpenConfig repository ls","title":"Move to the yang_modules directory"},{"location":"examples/pyangbind/#use-pyangbind-to-generate-a-python-module-from-a-yang-module","text":"pyang --plugindir $HOME/.local/lib/python3.6/site-packages/pyangbind/plugin/ -f pybind -o oc_bgp.py openconfig-bgp.yang The above command generated the python module oc_bgp.py from the openconfig-bgp.yang file. Run this command to verify: ls oc_bgp.py","title":"Use Pyangbind to generate a Python module from a YANG module"},{"location":"examples/pyangbind/#use-the-new-python-module-to-generate-an-openconfig-configuration-file","text":"The file pyangbind_demo.py uses the new python module oc_bgp.py and generates this OpenConfig configuration file demo.json python3 pyangbind_demo.py","title":"Use the new python module to generate an OpenConfig configuration file"},{"location":"examples/pyangbind/#use-gnmi-set-rpc-to-configure-a-device","text":"This OpenConfig configuration file demo.json can be loaded on a switch using the gNMI Set RPC","title":"Use gNMI SET RPC to configure a device"},{"location":"examples/pyangbind/#install-gnmic","text":"Please visit this link if you need help with gNMIc installation","title":"Install gNMIc"},{"location":"examples/pyangbind/#required-device-configuration","text":"Please visit this link if you need help to configure EOS for gNMI","title":"Required device configuration"},{"location":"examples/pyangbind/#use-gnmic-to-configure-the-swicth","text":"","title":"Use gNMIc to configure the swicth"},{"location":"examples/pyangbind/#check-the-device-configuration-before","text":"gnmic -a 192.0.2.117:6030 --insecure -u arista -p arista get \\ --path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp' show run section bgp","title":"Check the device configuration before"},{"location":"examples/pyangbind/#use-gnmic-to-configure-the-swicth_1","text":"gnmic -a 192.0.2.117:6030 --insecure -u arista -p arista set \\ --replace-path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp' \\ --replace-file demo.json","title":"Use gNMIc to configure the swicth"},{"location":"examples/pyangbind/#check-the-device-configuration-after","text":"gnmic -a 192.0.2.117:6030 --insecure -u arista -p arista get \\ --path '/network-instances/network-instance[name=default]/protocols/protocol[name=BGP]/bgp' show run section bgp","title":"Check the device configuration after"},{"location":"examples/pygnmi/","text":"Overview The following example uses the pygnmi python module to talk to gNMI devices. # Modules from pygnmi.client import gNMIclient import json # Variables host = ('198.51.100.67', '6030') # Body if __name__ == '__main__': with gNMIclient(target=host, username='ansible', password='ansible', insecure=True) as gc: result = gc.get(path=['openconfig:interfaces']) print(json.dumps(result, indent=4)) Assuming that the pygnmi module has been installed, this can be executed via the following command. python3 gnmi_example.py The following will simply run the gnmi_example.py file using python3 to get the openconfig interfaces. Truncated output { \"notification\": [ { \"timestamp\": 0, \"update\": [ { \"path\": \"interfaces\", \"json_ietf_val\": { \"openconfig-interfaces:interface\": [ { \"config\": { \"enabled\": true, \"arista-intf-augments:load-interval\": 300, \"loopback-mode\": false, \"mtu\": 0, \"name\": \"Ethernet1\", \"openconfig-vlan:tpid\": \"openconfig-vlan-types:TPID_0X8100\", \"type\": \"iana-if-type:ethernetCsmacd\" }, gNMI Capabilities RPC The file capabilities.py uses the pygnmi python module to get the gNMI capabilities. python3 capabilities.py Reveal output {'gnmi_version': '0.7.0', 'supported_encodings': ['json', 'json_ietf', 'ascii'], 'supported_models': [{'name': 'arista-exp-eos-varp-net-inst', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'openconfig-acl', 'organization': 'OpenConfig working group', 'version': '1.1.1'}, {'name': 'arista-system-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-system-management', 'organization': 'OpenConfig working group', 'version': '0.2.0'}, {'name': 'arista-isis-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-rib-bgp-types', 'organization': 'OpenConfig working group', 'version': '0.5.0'}, {'name': 'openconfig-platform-types', 'organization': 'OpenConfig working group', 'version': '1.0.0'}, {'name': 'openconfig-network-instance', 'organization': 'OpenConfig working group', 'version': '0.13.2'}, {'name': 'arista-bgp-augments', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-exp-eos-igmpsnooping', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'ietf-netconf', 'organization': 'IETF NETCONF (Network Configuration) ' 'Working Group', 'version': ''}, {'name': 'openconfig-policy-types', 'organization': 'OpenConfig working group', 'version': '3.1.1'}, {'name': 'openconfig-rib-bgp', 'organization': 'OpenConfig working group', 'version': '0.6.0'}, {'name': 'arista-local-routing-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-exp-eos-varp-intf', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'arista-interfaces-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-rpc-netconf', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-platform-psu', 'organization': 'OpenConfig working group', 'version': '0.2.1'}, {'name': 'openconfig-packet-match-types', 'organization': 'OpenConfig working group', 'version': '1.0.2'}, {'name': 'openconfig-platform-fan', 'organization': 'OpenConfig working group', 'version': '0.1.1'}, {'name': 'openconfig-inet-types', 'organization': 'OpenConfig working group', 'version': '0.3.3'}, {'name': 'openconfig-igmp', 'organization': 'OpenConfig working group', 'version': '0.2.0'}, {'name': 'openconfig-aaa-types', 'organization': 'OpenConfig working group', 'version': '0.4.1'}, {'name': 'openconfig-lldp', 'organization': 'OpenConfig working group', 'version': '0.2.1'}, {'name': 'arista-relay-agent-deviations', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'arista-intf-augments', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'arista-qos-augments', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'ietf-yang-types', 'organization': 'IETF NETMOD (NETCONF Data Modeling ' 'Language) Working Group', 'version': ''}, {'name': 'openconfig-openflow', 'organization': 'OpenConfig working group', 'version': '0.1.2'}, {'name': 'iana-if-type', 'organization': 'IANA', 'version': ''}, {'name': 'arista-exp-eos-vxlan-config', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'arista-routing-policy-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-aaa', 'organization': 'OpenConfig working group', 'version': '0.4.3'}, {'name': 'openconfig-if-ip', 'organization': 'OpenConfig working group', 'version': '3.0.0'}, {'name': 'arista-srte-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-local-routing-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-lacp-augments', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'arista-bgp-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-exp-eos-multicast', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'openconfig-interfaces', 'organization': 'OpenConfig working group', 'version': '2.4.3'}, {'name': 'openconfig-extensions', 'organization': 'OpenConfig working group', 'version': ''}, {'name': 'openconfig-system-terminal', 'organization': 'OpenConfig working group', 'version': '0.3.1'}, {'name': 'openconfig-bgp-types', 'organization': 'OpenConfig working group', 'version': '5.0.2'}, {'name': 'arista-netinst-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-system-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-segment-routing', 'organization': 'OpenConfig working group', 'version': '0.0.4'}, {'name': 'openconfig-platform', 'organization': 'OpenConfig working group', 'version': '0.12.2'}, {'name': 'openconfig-pf-srte', 'organization': 'OpenConfig working group', 'version': '0.1.1'}, {'name': 'arista-vlan-deviations', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'openconfig-bfd', 'organization': 'OpenConfig working group', 'version': '0.2.0'}, {'name': 'openconfig-if-tunnel', 'organization': 'OpenConfig working group', 'version': '0.1.1'}, {'name': 'openconfig-alarms', 'organization': 'OpenConfig working group', 'version': '0.3.2'}, {'name': 'openconfig-if-aggregate', 'organization': 'OpenConfig working group', 'version': '2.4.2'}, {'name': 'arista-acl-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-acl-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-messages-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-network-instance-types', 'organization': 'OpenConfig working group', 'version': '0.8.2'}, {'name': 'openconfig-types', 'organization': 'OpenConfig working group', 'version': '0.6.0'}, {'name': 'ietf-interfaces', 'organization': 'IETF NETMOD (Network Modeling) Working ' 'Group', 'version': ''}, {'name': 'openconfig-procmon', 'organization': 'OpenConfig working group', 'version': '0.4.0'}, {'name': 'arista-exp-eos-qos', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'arista-exp-eos', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'arista-qos-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-aft', 'organization': 'OpenConfig working group', 'version': '0.4.0'}, {'name': 'arista-isis-augments', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-packet-match', 'organization': 'OpenConfig working group', 'version': '1.1.1'}, {'name': 'arista-lldp-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-if-ethernet', 'organization': 'OpenConfig working group', 'version': '2.7.2'}, {'name': 'openconfig-mpls-sr', 'organization': 'OpenConfig working group', 'version': '3.0.1'}, {'name': 'openconfig-policy-forwarding', 'organization': 'OpenConfig working group', 'version': '0.2.1'}, {'name': 'arista-intf-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-isis-lsdb-types', 'organization': 'OpenConfig working group', 'version': '0.4.2'}, {'name': 'vlan-translation', 'organization': 'Arista Networks', 'version': ''}, {'name': 'arista-gnoi-cert', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-network-instance-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-bfd-augments', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'arista-vlan-augments', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'openconfig-hercules-interfaces', 'organization': 'OpenConfig Hercules Working Group', 'version': '0.2.0'}, {'name': 'arista-lacp-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-srte-augments', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-igmp-types', 'organization': 'OpenConfig working group', 'version': '0.1.1'}, {'name': 'openconfig-lacp', 'organization': 'OpenConfig working group', 'version': '1.1.1'}, {'name': 'openconfig-routing-policy', 'organization': 'OpenConfig working group', 'version': '3.1.1'}, {'name': 'arista-lacp-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-system-logging', 'organization': 'OpenConfig working group', 'version': '0.3.1'}, {'name': 'openconfig-aft-types', 'organization': 'OpenConfig Working Group', 'version': '0.3.3'}, {'name': 'openconfig-network-instance-l3', 'organization': 'OpenConfig working group', 'version': '0.11.1'}, {'name': 'arista-bgp-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-rpol-augments', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'arista-eos-types', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'openconfig-qos-types', 'organization': 'OpenConfig working group', 'version': '0.2.1'}, {'name': 'arista-openflow-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-mpls-types', 'organization': 'OpenConfig working group', 'version': '3.1.0'}, {'name': 'openconfig-hercules-qos', 'organization': 'OpenConfig Hercules Working Group', 'version': '0.1.0'}, {'name': 'openconfig-bgp', 'organization': 'OpenConfig working group', 'version': '6.0.0'}, {'name': 'arista-platform-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-system-augments', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-exp-eos-mlag', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'openconfig-system', 'organization': 'OpenConfig working group', 'version': '0.8.0'}, {'name': 'openconfig-isis', 'organization': 'OpenConfig working group', 'version': '0.4.2'}, {'name': 'openconfig-lldp-types', 'organization': 'OpenConfig working group', 'version': '0.1.1'}, {'name': 'openconfig-vlan', 'organization': 'OpenConfig working group', 'version': '3.2.0'}, {'name': 'openconfig-if-types', 'organization': 'OpenConfig working group', 'version': '0.2.1'}, {'name': 'openconfig-relay-agent', 'organization': 'OpenConfig working group', 'version': '0.1.1'}, {'name': 'arista-lldp-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-aft-augments', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-vlan-types', 'organization': 'OpenConfig working group', 'version': '3.1.0'}, {'name': 'arista-mpls-augments', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'arista-mpls-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-alarm-types', 'organization': 'OpenConfig working group', 'version': '0.2.1'}, {'name': 'openconfig-hercules-platform', 'organization': 'OpenConfig Hercules Working Group', 'version': '0.2.0'}, {'name': 'openconfig-ospfv2', 'organization': 'OpenConfig working group', 'version': '0.2.2'}, {'name': 'ietf-netconf-monitoring', 'organization': 'IETF NETCONF (Network Configuration) ' 'Working Group', 'version': ''}, {'name': 'arista-exp-eos-evpn', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-exp-eos-vxlan', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'openconfig-platform-port', 'organization': 'OpenConfig working group', 'version': '0.3.2'}, {'name': 'openconfig-messages', 'organization': 'OpenConfig working group', 'version': '0.0.1'}, {'name': 'openconfig-platform-cpu', 'organization': 'OpenConfig working group', 'version': '0.1.1'}, {'name': 'openconfig-if-poe', 'organization': 'OpenConfig working group', 'version': '0.1.1'}, {'name': 'openconfig-pim', 'organization': 'OpenConfig working group', 'version': '0.2.0'}, {'name': 'openconfig-openflow-types', 'organization': 'OpenConfig working group', 'version': '0.1.2'}, {'name': 'openconfig-mpls', 'organization': 'OpenConfig working group', 'version': '3.1.0'}, {'name': 'openconfig-platform-linecard', 'organization': 'OpenConfig working group', 'version': '0.1.1'}, {'name': 'openconfig-mpls-ldp', 'organization': 'OpenConfig working group', 'version': '3.0.2'}, {'name': 'openconfig-bgp-policy', 'organization': 'OpenConfig working group', 'version': '6.0.1'}, {'name': 'openconfig-mpls-rsvp', 'organization': 'OpenConfig working group', 'version': '3.0.1'}, {'name': 'arista-exp-eos-qos-config', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'openconfig-yang-types', 'organization': 'OpenConfig working group', 'version': '0.2.1'}, {'name': 'openconfig-qos', 'organization': 'OpenConfig working group', 'version': '0.2.3'}, {'name': 'openconfig-local-routing', 'organization': 'OpenConfig working group', 'version': '1.0.2'}, {'name': 'ietf-inet-types', 'organization': 'IETF NETMOD (NETCONF Data Modeling ' 'Language) Working Group', 'version': ''}, {'name': 'arista-rpol-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-pim-augments', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'openconfig-pim-types', 'organization': 'OpenConfig working group', 'version': '0.1.1'}, {'name': 'arista-bfd-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-lldp-augments', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-exp-eos-qos-acl-config', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'openconfig-isis-types', 'organization': 'OpenConfig working group', 'version': '0.4.2'}, {'name': 'openconfig-ospf-policy', 'organization': 'OpenConfig working group', 'version': '0.1.3'}, {'name': 'openconfig-ospf-types', 'organization': 'OpenConfig working group', 'version': '0.1.3'}, {'name': 'arista-bfd-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}]} gNMI Get RPC The file get.py uses the pygnmi python module and uses the gNMI GET RPC python3 get.py Reveal output { \"notification\": [ { \"timestamp\": 0, \"update\": [ { \"path\": \"interfaces/interface[name=Ethernet1]/state/counters\", \"val\": { \"openconfig-interfaces:in-broadcast-pkts\": \"2\", \"openconfig-interfaces:in-discards\": \"0\", \"openconfig-interfaces:in-errors\": \"0\", \"openconfig-interfaces:in-fcs-errors\": \"0\", \"openconfig-interfaces:in-multicast-pkts\": \"189439\", \"openconfig-interfaces:in-octets\": \"48284395\", \"openconfig-interfaces:in-unicast-pkts\": \"416884\", \"openconfig-interfaces:out-broadcast-pkts\": \"14\", \"openconfig-interfaces:out-discards\": \"0\", \"openconfig-interfaces:out-errors\": \"0\", \"openconfig-interfaces:out-multicast-pkts\": \"217232\", \"openconfig-interfaces:out-octets\": \"51749355\", \"openconfig-interfaces:out-unicast-pkts\": \"416911\" } } ] }, { \"timestamp\": 0, \"update\": [ { \"path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state\", \"val\": { \"openconfig-network-instance:enabled\": true, \"openconfig-network-instance:established-transitions\": \"0\", \"openconfig-network-instance:last-established\": \"1625684802230601216\", \"openconfig-network-instance:messages\": { \"received\": { \"UPDATE\": \"0\" }, \"sent\": { \"UPDATE\": \"0\" } }, \"openconfig-network-instance:neighbor-address\": \"192.168.255.2\", \"openconfig-network-instance:peer-group\": \"EVPN-OVERLAY-PEERS\", \"openconfig-network-instance:send-community\": \"NONE\", \"openconfig-network-instance:session-state\": \"ACTIVE\" } }, { \"path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state\", \"val\": { \"openconfig-network-instance:enabled\": true, \"openconfig-network-instance:established-transitions\": \"2\", \"openconfig-network-instance:last-established\": \"1625740129181922304\", \"openconfig-network-instance:messages\": { \"received\": { \"UPDATE\": \"2\" }, \"sent\": { \"UPDATE\": \"24\" } }, \"openconfig-network-instance:neighbor-address\": \"192.168.255.1\", \"openconfig-network-instance:peer-group\": \"EVPN-OVERLAY-PEERS\", \"openconfig-network-instance:send-community\": \"NONE\", \"openconfig-network-instance:session-state\": \"ACTIVE\" } } ] } ] } gNMI Subscribe RPC The file sub.py uses the pygnmi python module and uses the gNMI Subscribe RPC python3 sub.py Reveal output {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-broadcast-pkts', 'val': 2}], 'timestamp': 1626462768674581749}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-discards', 'val': 0}], 'timestamp': 1626462768674597259}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-errors', 'val': 0}], 'timestamp': 1626462768674603747}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-fcs-errors', 'val': 0}], 'timestamp': 1626462768672465216}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-multicast-pkts', 'val': 189439}], 'timestamp': 1626462768674588779}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-octets', 'val': 48284395}], 'timestamp': 1626462768674553338}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-unicast-pkts', 'val': 416884}], 'timestamp': 1626462768674571889}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-broadcast-pkts', 'val': 14}], 'timestamp': 1626462768674624983}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-discards', 'val': 0}], 'timestamp': 1626462768674639908}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-errors', 'val': 0}], 'timestamp': 1626462768674645915}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-multicast-pkts', 'val': 217294}], 'timestamp': 1626599894372892660}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-octets', 'val': 51756949}], 'timestamp': 1626599894372858163}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-unicast-pkts', 'val': 416911}], 'timestamp': 1626462768674617475}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/enabled', 'val': True}], 'timestamp': 1626462768440845697}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/established-transitions', 'val': 0}], 'timestamp': 1626462768468632490}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/last-established', 'val': 1625684802230601216}], 'timestamp': 1626462768469284793}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/messages/received/UPDATE', 'val': 0}], 'timestamp': 1626462768421128387}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/messages/sent/UPDATE', 'val': 0}], 'timestamp': 1626462768421184402}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/neighbor-address', 'val': '192.168.255.2'}], 'timestamp': 1626462768421876850}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/peer-group', 'val': 'EVPN-OVERLAY-PEERS'}], 'timestamp': 1626462768439035722}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/send-community', 'val': 'NONE'}], 'timestamp': 1626462768419003214}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/session-state', 'val': 'ACTIVE'}], 'timestamp': 1626462768469145043}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/enabled', 'val': True}], 'timestamp': 1626462768428252812}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/established-transitions', 'val': 2}], 'timestamp': 1626462768470394508}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/last-established', 'val': 1625740129181922304}], 'timestamp': 1626462768469974563}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/messages/received/UPDATE', 'val': 2}], 'timestamp': 1626462768424768147}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/messages/sent/UPDATE', 'val': 24}], 'timestamp': 1626462768424826346}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/neighbor-address', 'val': '192.168.255.1'}], 'timestamp': 1626462768425586744}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/peer-group', 'val': 'EVPN-OVERLAY-PEERS'}], 'timestamp': 1626462768427044044}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/send-community', 'val': 'NONE'}], 'timestamp': 1626462768423035498}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/session-state', 'val': 'ACTIVE'}], 'timestamp': 1626462768469536321}} {'sync_response': True} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-broadcast-pkts', 'val': 2}], 'timestamp': 1626462768674581749}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-discards', 'val': 0}], 'timestamp': 1626462768674597259}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-errors', 'val': 0}], 'timestamp': 1626462768674603747}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-fcs-errors', 'val': 0}], 'timestamp': 1626462768672465216}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-multicast-pkts', 'val': 189439}], 'timestamp': 1626462768674588779}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-octets', 'val': 48284395}], 'timestamp': 1626462768674553338}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-unicast-pkts', 'val': 416884}], 'timestamp': 1626462768674571889}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-broadcast-pkts', 'val': 14}], 'timestamp': 1626462768674624983}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-discards', 'val': 0}], 'timestamp': 1626462768674639908}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-errors', 'val': 0}], 'timestamp': 1626462768674645915}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-multicast-pkts', 'val': 217299}], 'timestamp': 1626599904372340631}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-octets', 'val': 51757564}], 'timestamp': 1626599904372302101}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-unicast-pkts', 'val': 416911}], 'timestamp': 1626462768674617475}} {'sync_response': True} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/enabled', 'val': True}], 'timestamp': 1626462768440845697}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/established-transitions', 'val': 0}], 'timestamp': 1626462768468632490}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/last-established', 'val': 1625684802230601216}], 'timestamp': 1626462768469284793}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/messages/received/UPDATE', 'val': 0}], 'timestamp': 1626462768421128387}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/messages/sent/UPDATE', 'val': 0}], 'timestamp': 1626462768421184402}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/neighbor-address', 'val': '192.168.255.2'}], 'timestamp': 1626462768421876850}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/peer-group', 'val': 'EVPN-OVERLAY-PEERS'}], 'timestamp': 1626462768439035722}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/send-community', 'val': 'NONE'}], 'timestamp': 1626462768419003214}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/session-state', 'val': 'ACTIVE'}], 'timestamp': 1626462768469145043}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/enabled', 'val': True}], 'timestamp': 1626462768428252812}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/established-transitions', 'val': 2}], 'timestamp': 1626462768470394508}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/last-established', 'val': 1625740129181922304}], 'timestamp': 1626462768469974563}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/messages/received/UPDATE', 'val': 2}], 'timestamp': 1626462768424768147}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/messages/sent/UPDATE', 'val': 24}], 'timestamp': 1626462768424826346}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/neighbor-address', 'val': '192.168.255.1'}], 'timestamp': 1626462768425586744}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/peer-group', 'val': 'EVPN-OVERLAY-PEERS'}], 'timestamp': 1626462768427044044}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/send-community', 'val': 'NONE'}], 'timestamp': 1626462768423035498}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/session-state', 'val': 'ACTIVE'}], 'timestamp': 1626462768469536321}} {'sync_response': True} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-broadcast-pkts', 'val': 2}], 'timestamp': 1626462768674581749}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-discards', 'val': 0}], 'timestamp': 1626462768674597259}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-errors', 'val': 0}], 'timestamp': 1626462768674603747}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-fcs-errors', 'val': 0}], 'timestamp': 1626462768672465216}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-multicast-pkts', 'val': 189439}], 'timestamp': 1626462768674588779}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-octets', 'val': 48284395}], 'timestamp': 1626462768674553338}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-unicast-pkts', 'val': 416884}], 'timestamp': 1626462768674571889}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-broadcast-pkts', 'val': 14}], 'timestamp': 1626462768674624983}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-discards', 'val': 0}], 'timestamp': 1626462768674639908}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-errors', 'val': 0}], 'timestamp': 1626462768674645915}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-multicast-pkts', 'val': 217304}], 'timestamp': 1626599914374756337}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-octets', 'val': 51758179}], 'timestamp': 1626599914374727204}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-unicast-pkts', 'val': 416911}], 'timestamp': 1626462768674617475}} {'sync_response': True} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/enabled', 'val': True}], 'timestamp': 1626462768440845697}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/established-transitions', 'val': 0}], 'timestamp': 1626462768468632490}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/last-established', 'val': 1625684802230601216}], 'timestamp': 1626462768469284793}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/messages/received/UPDATE', 'val': 0}], 'timestamp': 1626462768421128387}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/messages/sent/UPDATE', 'val': 0}], 'timestamp': 1626462768421184402}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/neighbor-address', 'val': '192.168.255.2'}], 'timestamp': 1626462768421876850}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/peer-group', 'val': 'EVPN-OVERLAY-PEERS'}], 'timestamp': 1626462768439035722}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/send-community', 'val': 'NONE'}], 'timestamp': 1626462768419003214}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/session-state', 'val': 'ACTIVE'}], 'timestamp': 1626462768469145043}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/enabled', 'val': True}], 'timestamp': 1626462768428252812}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/established-transitions', 'val': 2}], 'timestamp': 1626462768470394508}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/last-established', 'val': 1625740129181922304}], 'timestamp': 1626462768469974563}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/messages/received/UPDATE', 'val': 2}], 'timestamp': 1626462768424768147}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/messages/sent/UPDATE', 'val': 24}], 'timestamp': 1626462768424826346}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/neighbor-address', 'val': '192.168.255.1'}], 'timestamp': 1626462768425586744}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/peer-group', 'val': 'EVPN-OVERLAY-PEERS'}], 'timestamp': 1626462768427044044}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/send-community', 'val': 'NONE'}], 'timestamp': 1626462768423035498}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/session-state', 'val': 'ACTIVE'}], 'timestamp': 1626462768469536321}} gNMI Set RPC Update The file update.py uses the pygnmi python module and uses the gNMI SET RPC (update) python3 update.py output GET RPC, interface Ethernet1 config, before the update { \"notification\": [ { \"timestamp\": 0, \"update\": [ { \"path\": \"interfaces/interface[name=Ethernet1]/config\", \"val\": { \"arista-intf-augments:load-interval\": 300, \"openconfig-interfaces:description\": \"test1234\", \"openconfig-interfaces:enabled\": true, \"openconfig-interfaces:loopback-mode\": false, \"openconfig-interfaces:mtu\": 0, \"openconfig-interfaces:name\": \"Ethernet1\", \"openconfig-interfaces:type\": \"iana-if-type:ethernetCsmacd\", \"openconfig-vlan:tpid\": \"openconfig-vlan-types:TPID_0X8100\" } } ] } ] } SET RPC, update, interface Ethernet1 {'response': [{'path': 'interfaces/interface[name=Ethernet1]', 'op': 'UPDATE'}]} GET RPC, interface Ethernet1 config, after the update { \"notification\": [ { \"timestamp\": 0, \"update\": [ { \"path\": \"interfaces/interface[name=Ethernet1]/config\", \"val\": { \"arista-intf-augments:load-interval\": 300, \"openconfig-interfaces:description\": \"Test\", \"openconfig-interfaces:enabled\": true, \"openconfig-interfaces:loopback-mode\": false, \"openconfig-interfaces:mtu\": 0, \"openconfig-interfaces:name\": \"Ethernet1\", \"openconfig-interfaces:type\": \"iana-if-type:ethernetCsmacd\", \"openconfig-vlan:tpid\": \"openconfig-vlan-types:TPID_0X8100\" } } ] } ] } Delete The file delete.py uses the pygnmi python module and uses the gNMI SET RPC (delete) python3 delete.py output {'response': [{'path': 'interfaces/interface[name=Ethernet1]/config/description', 'op': 'DELETE'}]}","title":"Pygnmi"},{"location":"examples/pygnmi/#overview","text":"The following example uses the pygnmi python module to talk to gNMI devices. # Modules from pygnmi.client import gNMIclient import json # Variables host = ('198.51.100.67', '6030') # Body if __name__ == '__main__': with gNMIclient(target=host, username='ansible', password='ansible', insecure=True) as gc: result = gc.get(path=['openconfig:interfaces']) print(json.dumps(result, indent=4)) Assuming that the pygnmi module has been installed, this can be executed via the following command. python3 gnmi_example.py The following will simply run the gnmi_example.py file using python3 to get the openconfig interfaces. Truncated output { \"notification\": [ { \"timestamp\": 0, \"update\": [ { \"path\": \"interfaces\", \"json_ietf_val\": { \"openconfig-interfaces:interface\": [ { \"config\": { \"enabled\": true, \"arista-intf-augments:load-interval\": 300, \"loopback-mode\": false, \"mtu\": 0, \"name\": \"Ethernet1\", \"openconfig-vlan:tpid\": \"openconfig-vlan-types:TPID_0X8100\", \"type\": \"iana-if-type:ethernetCsmacd\" },","title":"Overview"},{"location":"examples/pygnmi/#gnmi-capabilities-rpc","text":"The file capabilities.py uses the pygnmi python module to get the gNMI capabilities. python3 capabilities.py Reveal output {'gnmi_version': '0.7.0', 'supported_encodings': ['json', 'json_ietf', 'ascii'], 'supported_models': [{'name': 'arista-exp-eos-varp-net-inst', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'openconfig-acl', 'organization': 'OpenConfig working group', 'version': '1.1.1'}, {'name': 'arista-system-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-system-management', 'organization': 'OpenConfig working group', 'version': '0.2.0'}, {'name': 'arista-isis-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-rib-bgp-types', 'organization': 'OpenConfig working group', 'version': '0.5.0'}, {'name': 'openconfig-platform-types', 'organization': 'OpenConfig working group', 'version': '1.0.0'}, {'name': 'openconfig-network-instance', 'organization': 'OpenConfig working group', 'version': '0.13.2'}, {'name': 'arista-bgp-augments', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-exp-eos-igmpsnooping', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'ietf-netconf', 'organization': 'IETF NETCONF (Network Configuration) ' 'Working Group', 'version': ''}, {'name': 'openconfig-policy-types', 'organization': 'OpenConfig working group', 'version': '3.1.1'}, {'name': 'openconfig-rib-bgp', 'organization': 'OpenConfig working group', 'version': '0.6.0'}, {'name': 'arista-local-routing-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-exp-eos-varp-intf', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'arista-interfaces-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-rpc-netconf', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-platform-psu', 'organization': 'OpenConfig working group', 'version': '0.2.1'}, {'name': 'openconfig-packet-match-types', 'organization': 'OpenConfig working group', 'version': '1.0.2'}, {'name': 'openconfig-platform-fan', 'organization': 'OpenConfig working group', 'version': '0.1.1'}, {'name': 'openconfig-inet-types', 'organization': 'OpenConfig working group', 'version': '0.3.3'}, {'name': 'openconfig-igmp', 'organization': 'OpenConfig working group', 'version': '0.2.0'}, {'name': 'openconfig-aaa-types', 'organization': 'OpenConfig working group', 'version': '0.4.1'}, {'name': 'openconfig-lldp', 'organization': 'OpenConfig working group', 'version': '0.2.1'}, {'name': 'arista-relay-agent-deviations', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'arista-intf-augments', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'arista-qos-augments', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'ietf-yang-types', 'organization': 'IETF NETMOD (NETCONF Data Modeling ' 'Language) Working Group', 'version': ''}, {'name': 'openconfig-openflow', 'organization': 'OpenConfig working group', 'version': '0.1.2'}, {'name': 'iana-if-type', 'organization': 'IANA', 'version': ''}, {'name': 'arista-exp-eos-vxlan-config', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'arista-routing-policy-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-aaa', 'organization': 'OpenConfig working group', 'version': '0.4.3'}, {'name': 'openconfig-if-ip', 'organization': 'OpenConfig working group', 'version': '3.0.0'}, {'name': 'arista-srte-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-local-routing-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-lacp-augments', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'arista-bgp-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-exp-eos-multicast', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'openconfig-interfaces', 'organization': 'OpenConfig working group', 'version': '2.4.3'}, {'name': 'openconfig-extensions', 'organization': 'OpenConfig working group', 'version': ''}, {'name': 'openconfig-system-terminal', 'organization': 'OpenConfig working group', 'version': '0.3.1'}, {'name': 'openconfig-bgp-types', 'organization': 'OpenConfig working group', 'version': '5.0.2'}, {'name': 'arista-netinst-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-system-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-segment-routing', 'organization': 'OpenConfig working group', 'version': '0.0.4'}, {'name': 'openconfig-platform', 'organization': 'OpenConfig working group', 'version': '0.12.2'}, {'name': 'openconfig-pf-srte', 'organization': 'OpenConfig working group', 'version': '0.1.1'}, {'name': 'arista-vlan-deviations', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'openconfig-bfd', 'organization': 'OpenConfig working group', 'version': '0.2.0'}, {'name': 'openconfig-if-tunnel', 'organization': 'OpenConfig working group', 'version': '0.1.1'}, {'name': 'openconfig-alarms', 'organization': 'OpenConfig working group', 'version': '0.3.2'}, {'name': 'openconfig-if-aggregate', 'organization': 'OpenConfig working group', 'version': '2.4.2'}, {'name': 'arista-acl-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-acl-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-messages-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-network-instance-types', 'organization': 'OpenConfig working group', 'version': '0.8.2'}, {'name': 'openconfig-types', 'organization': 'OpenConfig working group', 'version': '0.6.0'}, {'name': 'ietf-interfaces', 'organization': 'IETF NETMOD (Network Modeling) Working ' 'Group', 'version': ''}, {'name': 'openconfig-procmon', 'organization': 'OpenConfig working group', 'version': '0.4.0'}, {'name': 'arista-exp-eos-qos', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'arista-exp-eos', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'arista-qos-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-aft', 'organization': 'OpenConfig working group', 'version': '0.4.0'}, {'name': 'arista-isis-augments', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-packet-match', 'organization': 'OpenConfig working group', 'version': '1.1.1'}, {'name': 'arista-lldp-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-if-ethernet', 'organization': 'OpenConfig working group', 'version': '2.7.2'}, {'name': 'openconfig-mpls-sr', 'organization': 'OpenConfig working group', 'version': '3.0.1'}, {'name': 'openconfig-policy-forwarding', 'organization': 'OpenConfig working group', 'version': '0.2.1'}, {'name': 'arista-intf-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-isis-lsdb-types', 'organization': 'OpenConfig working group', 'version': '0.4.2'}, {'name': 'vlan-translation', 'organization': 'Arista Networks', 'version': ''}, {'name': 'arista-gnoi-cert', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-network-instance-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-bfd-augments', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'arista-vlan-augments', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'openconfig-hercules-interfaces', 'organization': 'OpenConfig Hercules Working Group', 'version': '0.2.0'}, {'name': 'arista-lacp-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-srte-augments', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-igmp-types', 'organization': 'OpenConfig working group', 'version': '0.1.1'}, {'name': 'openconfig-lacp', 'organization': 'OpenConfig working group', 'version': '1.1.1'}, {'name': 'openconfig-routing-policy', 'organization': 'OpenConfig working group', 'version': '3.1.1'}, {'name': 'arista-lacp-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-system-logging', 'organization': 'OpenConfig working group', 'version': '0.3.1'}, {'name': 'openconfig-aft-types', 'organization': 'OpenConfig Working Group', 'version': '0.3.3'}, {'name': 'openconfig-network-instance-l3', 'organization': 'OpenConfig working group', 'version': '0.11.1'}, {'name': 'arista-bgp-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-rpol-augments', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'arista-eos-types', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'openconfig-qos-types', 'organization': 'OpenConfig working group', 'version': '0.2.1'}, {'name': 'arista-openflow-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-mpls-types', 'organization': 'OpenConfig working group', 'version': '3.1.0'}, {'name': 'openconfig-hercules-qos', 'organization': 'OpenConfig Hercules Working Group', 'version': '0.1.0'}, {'name': 'openconfig-bgp', 'organization': 'OpenConfig working group', 'version': '6.0.0'}, {'name': 'arista-platform-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-system-augments', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-exp-eos-mlag', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'openconfig-system', 'organization': 'OpenConfig working group', 'version': '0.8.0'}, {'name': 'openconfig-isis', 'organization': 'OpenConfig working group', 'version': '0.4.2'}, {'name': 'openconfig-lldp-types', 'organization': 'OpenConfig working group', 'version': '0.1.1'}, {'name': 'openconfig-vlan', 'organization': 'OpenConfig working group', 'version': '3.2.0'}, {'name': 'openconfig-if-types', 'organization': 'OpenConfig working group', 'version': '0.2.1'}, {'name': 'openconfig-relay-agent', 'organization': 'OpenConfig working group', 'version': '0.1.1'}, {'name': 'arista-lldp-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-aft-augments', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-vlan-types', 'organization': 'OpenConfig working group', 'version': '3.1.0'}, {'name': 'arista-mpls-augments', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'arista-mpls-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'openconfig-alarm-types', 'organization': 'OpenConfig working group', 'version': '0.2.1'}, {'name': 'openconfig-hercules-platform', 'organization': 'OpenConfig Hercules Working Group', 'version': '0.2.0'}, {'name': 'openconfig-ospfv2', 'organization': 'OpenConfig working group', 'version': '0.2.2'}, {'name': 'ietf-netconf-monitoring', 'organization': 'IETF NETCONF (Network Configuration) ' 'Working Group', 'version': ''}, {'name': 'arista-exp-eos-evpn', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-exp-eos-vxlan', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'openconfig-platform-port', 'organization': 'OpenConfig working group', 'version': '0.3.2'}, {'name': 'openconfig-messages', 'organization': 'OpenConfig working group', 'version': '0.0.1'}, {'name': 'openconfig-platform-cpu', 'organization': 'OpenConfig working group', 'version': '0.1.1'}, {'name': 'openconfig-if-poe', 'organization': 'OpenConfig working group', 'version': '0.1.1'}, {'name': 'openconfig-pim', 'organization': 'OpenConfig working group', 'version': '0.2.0'}, {'name': 'openconfig-openflow-types', 'organization': 'OpenConfig working group', 'version': '0.1.2'}, {'name': 'openconfig-mpls', 'organization': 'OpenConfig working group', 'version': '3.1.0'}, {'name': 'openconfig-platform-linecard', 'organization': 'OpenConfig working group', 'version': '0.1.1'}, {'name': 'openconfig-mpls-ldp', 'organization': 'OpenConfig working group', 'version': '3.0.2'}, {'name': 'openconfig-bgp-policy', 'organization': 'OpenConfig working group', 'version': '6.0.1'}, {'name': 'openconfig-mpls-rsvp', 'organization': 'OpenConfig working group', 'version': '3.0.1'}, {'name': 'arista-exp-eos-qos-config', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'openconfig-yang-types', 'organization': 'OpenConfig working group', 'version': '0.2.1'}, {'name': 'openconfig-qos', 'organization': 'OpenConfig working group', 'version': '0.2.3'}, {'name': 'openconfig-local-routing', 'organization': 'OpenConfig working group', 'version': '1.0.2'}, {'name': 'ietf-inet-types', 'organization': 'IETF NETMOD (NETCONF Data Modeling ' 'Language) Working Group', 'version': ''}, {'name': 'arista-rpol-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-pim-augments', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'openconfig-pim-types', 'organization': 'OpenConfig working group', 'version': '0.1.1'}, {'name': 'arista-bfd-notsupported-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-lldp-augments', 'organization': 'Arista Networks, Inc.', 'version': ''}, {'name': 'arista-exp-eos-qos-acl-config', 'organization': 'Arista Networks <http://arista.com/>', 'version': ''}, {'name': 'openconfig-isis-types', 'organization': 'OpenConfig working group', 'version': '0.4.2'}, {'name': 'openconfig-ospf-policy', 'organization': 'OpenConfig working group', 'version': '0.1.3'}, {'name': 'openconfig-ospf-types', 'organization': 'OpenConfig working group', 'version': '0.1.3'}, {'name': 'arista-bfd-deviations', 'organization': 'Arista Networks, Inc.', 'version': ''}]}","title":"gNMI Capabilities RPC"},{"location":"examples/pygnmi/#gnmi-get-rpc","text":"The file get.py uses the pygnmi python module and uses the gNMI GET RPC python3 get.py Reveal output { \"notification\": [ { \"timestamp\": 0, \"update\": [ { \"path\": \"interfaces/interface[name=Ethernet1]/state/counters\", \"val\": { \"openconfig-interfaces:in-broadcast-pkts\": \"2\", \"openconfig-interfaces:in-discards\": \"0\", \"openconfig-interfaces:in-errors\": \"0\", \"openconfig-interfaces:in-fcs-errors\": \"0\", \"openconfig-interfaces:in-multicast-pkts\": \"189439\", \"openconfig-interfaces:in-octets\": \"48284395\", \"openconfig-interfaces:in-unicast-pkts\": \"416884\", \"openconfig-interfaces:out-broadcast-pkts\": \"14\", \"openconfig-interfaces:out-discards\": \"0\", \"openconfig-interfaces:out-errors\": \"0\", \"openconfig-interfaces:out-multicast-pkts\": \"217232\", \"openconfig-interfaces:out-octets\": \"51749355\", \"openconfig-interfaces:out-unicast-pkts\": \"416911\" } } ] }, { \"timestamp\": 0, \"update\": [ { \"path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state\", \"val\": { \"openconfig-network-instance:enabled\": true, \"openconfig-network-instance:established-transitions\": \"0\", \"openconfig-network-instance:last-established\": \"1625684802230601216\", \"openconfig-network-instance:messages\": { \"received\": { \"UPDATE\": \"0\" }, \"sent\": { \"UPDATE\": \"0\" } }, \"openconfig-network-instance:neighbor-address\": \"192.168.255.2\", \"openconfig-network-instance:peer-group\": \"EVPN-OVERLAY-PEERS\", \"openconfig-network-instance:send-community\": \"NONE\", \"openconfig-network-instance:session-state\": \"ACTIVE\" } }, { \"path\": \"network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state\", \"val\": { \"openconfig-network-instance:enabled\": true, \"openconfig-network-instance:established-transitions\": \"2\", \"openconfig-network-instance:last-established\": \"1625740129181922304\", \"openconfig-network-instance:messages\": { \"received\": { \"UPDATE\": \"2\" }, \"sent\": { \"UPDATE\": \"24\" } }, \"openconfig-network-instance:neighbor-address\": \"192.168.255.1\", \"openconfig-network-instance:peer-group\": \"EVPN-OVERLAY-PEERS\", \"openconfig-network-instance:send-community\": \"NONE\", \"openconfig-network-instance:session-state\": \"ACTIVE\" } } ] } ] }","title":"gNMI Get RPC"},{"location":"examples/pygnmi/#gnmi-subscribe-rpc","text":"The file sub.py uses the pygnmi python module and uses the gNMI Subscribe RPC python3 sub.py Reveal output {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-broadcast-pkts', 'val': 2}], 'timestamp': 1626462768674581749}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-discards', 'val': 0}], 'timestamp': 1626462768674597259}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-errors', 'val': 0}], 'timestamp': 1626462768674603747}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-fcs-errors', 'val': 0}], 'timestamp': 1626462768672465216}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-multicast-pkts', 'val': 189439}], 'timestamp': 1626462768674588779}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-octets', 'val': 48284395}], 'timestamp': 1626462768674553338}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-unicast-pkts', 'val': 416884}], 'timestamp': 1626462768674571889}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-broadcast-pkts', 'val': 14}], 'timestamp': 1626462768674624983}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-discards', 'val': 0}], 'timestamp': 1626462768674639908}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-errors', 'val': 0}], 'timestamp': 1626462768674645915}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-multicast-pkts', 'val': 217294}], 'timestamp': 1626599894372892660}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-octets', 'val': 51756949}], 'timestamp': 1626599894372858163}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-unicast-pkts', 'val': 416911}], 'timestamp': 1626462768674617475}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/enabled', 'val': True}], 'timestamp': 1626462768440845697}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/established-transitions', 'val': 0}], 'timestamp': 1626462768468632490}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/last-established', 'val': 1625684802230601216}], 'timestamp': 1626462768469284793}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/messages/received/UPDATE', 'val': 0}], 'timestamp': 1626462768421128387}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/messages/sent/UPDATE', 'val': 0}], 'timestamp': 1626462768421184402}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/neighbor-address', 'val': '192.168.255.2'}], 'timestamp': 1626462768421876850}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/peer-group', 'val': 'EVPN-OVERLAY-PEERS'}], 'timestamp': 1626462768439035722}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/send-community', 'val': 'NONE'}], 'timestamp': 1626462768419003214}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/session-state', 'val': 'ACTIVE'}], 'timestamp': 1626462768469145043}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/enabled', 'val': True}], 'timestamp': 1626462768428252812}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/established-transitions', 'val': 2}], 'timestamp': 1626462768470394508}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/last-established', 'val': 1625740129181922304}], 'timestamp': 1626462768469974563}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/messages/received/UPDATE', 'val': 2}], 'timestamp': 1626462768424768147}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/messages/sent/UPDATE', 'val': 24}], 'timestamp': 1626462768424826346}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/neighbor-address', 'val': '192.168.255.1'}], 'timestamp': 1626462768425586744}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/peer-group', 'val': 'EVPN-OVERLAY-PEERS'}], 'timestamp': 1626462768427044044}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/send-community', 'val': 'NONE'}], 'timestamp': 1626462768423035498}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/session-state', 'val': 'ACTIVE'}], 'timestamp': 1626462768469536321}} {'sync_response': True} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-broadcast-pkts', 'val': 2}], 'timestamp': 1626462768674581749}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-discards', 'val': 0}], 'timestamp': 1626462768674597259}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-errors', 'val': 0}], 'timestamp': 1626462768674603747}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-fcs-errors', 'val': 0}], 'timestamp': 1626462768672465216}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-multicast-pkts', 'val': 189439}], 'timestamp': 1626462768674588779}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-octets', 'val': 48284395}], 'timestamp': 1626462768674553338}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-unicast-pkts', 'val': 416884}], 'timestamp': 1626462768674571889}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-broadcast-pkts', 'val': 14}], 'timestamp': 1626462768674624983}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-discards', 'val': 0}], 'timestamp': 1626462768674639908}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-errors', 'val': 0}], 'timestamp': 1626462768674645915}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-multicast-pkts', 'val': 217299}], 'timestamp': 1626599904372340631}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-octets', 'val': 51757564}], 'timestamp': 1626599904372302101}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-unicast-pkts', 'val': 416911}], 'timestamp': 1626462768674617475}} {'sync_response': True} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/enabled', 'val': True}], 'timestamp': 1626462768440845697}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/established-transitions', 'val': 0}], 'timestamp': 1626462768468632490}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/last-established', 'val': 1625684802230601216}], 'timestamp': 1626462768469284793}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/messages/received/UPDATE', 'val': 0}], 'timestamp': 1626462768421128387}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/messages/sent/UPDATE', 'val': 0}], 'timestamp': 1626462768421184402}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/neighbor-address', 'val': '192.168.255.2'}], 'timestamp': 1626462768421876850}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/peer-group', 'val': 'EVPN-OVERLAY-PEERS'}], 'timestamp': 1626462768439035722}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/send-community', 'val': 'NONE'}], 'timestamp': 1626462768419003214}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/session-state', 'val': 'ACTIVE'}], 'timestamp': 1626462768469145043}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/enabled', 'val': True}], 'timestamp': 1626462768428252812}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/established-transitions', 'val': 2}], 'timestamp': 1626462768470394508}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/last-established', 'val': 1625740129181922304}], 'timestamp': 1626462768469974563}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/messages/received/UPDATE', 'val': 2}], 'timestamp': 1626462768424768147}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/messages/sent/UPDATE', 'val': 24}], 'timestamp': 1626462768424826346}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/neighbor-address', 'val': '192.168.255.1'}], 'timestamp': 1626462768425586744}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/peer-group', 'val': 'EVPN-OVERLAY-PEERS'}], 'timestamp': 1626462768427044044}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/send-community', 'val': 'NONE'}], 'timestamp': 1626462768423035498}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/session-state', 'val': 'ACTIVE'}], 'timestamp': 1626462768469536321}} {'sync_response': True} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-broadcast-pkts', 'val': 2}], 'timestamp': 1626462768674581749}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-discards', 'val': 0}], 'timestamp': 1626462768674597259}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-errors', 'val': 0}], 'timestamp': 1626462768674603747}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-fcs-errors', 'val': 0}], 'timestamp': 1626462768672465216}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-multicast-pkts', 'val': 189439}], 'timestamp': 1626462768674588779}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-octets', 'val': 48284395}], 'timestamp': 1626462768674553338}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/in-unicast-pkts', 'val': 416884}], 'timestamp': 1626462768674571889}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-broadcast-pkts', 'val': 14}], 'timestamp': 1626462768674624983}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-discards', 'val': 0}], 'timestamp': 1626462768674639908}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-errors', 'val': 0}], 'timestamp': 1626462768674645915}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-multicast-pkts', 'val': 217304}], 'timestamp': 1626599914374756337}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-octets', 'val': 51758179}], 'timestamp': 1626599914374727204}} {'update': {'update': [{'path': 'interfaces/interface[name=Ethernet1]/state/counters/out-unicast-pkts', 'val': 416911}], 'timestamp': 1626462768674617475}} {'sync_response': True} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/enabled', 'val': True}], 'timestamp': 1626462768440845697}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/established-transitions', 'val': 0}], 'timestamp': 1626462768468632490}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/last-established', 'val': 1625684802230601216}], 'timestamp': 1626462768469284793}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/messages/received/UPDATE', 'val': 0}], 'timestamp': 1626462768421128387}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/messages/sent/UPDATE', 'val': 0}], 'timestamp': 1626462768421184402}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/neighbor-address', 'val': '192.168.255.2'}], 'timestamp': 1626462768421876850}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/peer-group', 'val': 'EVPN-OVERLAY-PEERS'}], 'timestamp': 1626462768439035722}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/send-community', 'val': 'NONE'}], 'timestamp': 1626462768419003214}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.2]/state/session-state', 'val': 'ACTIVE'}], 'timestamp': 1626462768469145043}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/enabled', 'val': True}], 'timestamp': 1626462768428252812}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/established-transitions', 'val': 2}], 'timestamp': 1626462768470394508}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/last-established', 'val': 1625740129181922304}], 'timestamp': 1626462768469974563}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/messages/received/UPDATE', 'val': 2}], 'timestamp': 1626462768424768147}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/messages/sent/UPDATE', 'val': 24}], 'timestamp': 1626462768424826346}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/neighbor-address', 'val': '192.168.255.1'}], 'timestamp': 1626462768425586744}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/peer-group', 'val': 'EVPN-OVERLAY-PEERS'}], 'timestamp': 1626462768427044044}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[identifier=BGP][name=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/send-community', 'val': 'NONE'}], 'timestamp': 1626462768423035498}} {'update': {'update': [{'path': 'network-instances/network-instance[name=default]/protocols/protocol[name=BGP][identifier=BGP]/bgp/neighbors/neighbor[neighbor-address=192.168.255.1]/state/session-state', 'val': 'ACTIVE'}], 'timestamp': 1626462768469536321}}","title":"gNMI Subscribe RPC"},{"location":"examples/pygnmi/#gnmi-set-rpc","text":"","title":"gNMI Set RPC"},{"location":"examples/pygnmi/#update","text":"The file update.py uses the pygnmi python module and uses the gNMI SET RPC (update) python3 update.py","title":"Update"},{"location":"examples/pygnmi/#output","text":"GET RPC, interface Ethernet1 config, before the update { \"notification\": [ { \"timestamp\": 0, \"update\": [ { \"path\": \"interfaces/interface[name=Ethernet1]/config\", \"val\": { \"arista-intf-augments:load-interval\": 300, \"openconfig-interfaces:description\": \"test1234\", \"openconfig-interfaces:enabled\": true, \"openconfig-interfaces:loopback-mode\": false, \"openconfig-interfaces:mtu\": 0, \"openconfig-interfaces:name\": \"Ethernet1\", \"openconfig-interfaces:type\": \"iana-if-type:ethernetCsmacd\", \"openconfig-vlan:tpid\": \"openconfig-vlan-types:TPID_0X8100\" } } ] } ] } SET RPC, update, interface Ethernet1 {'response': [{'path': 'interfaces/interface[name=Ethernet1]', 'op': 'UPDATE'}]} GET RPC, interface Ethernet1 config, after the update { \"notification\": [ { \"timestamp\": 0, \"update\": [ { \"path\": \"interfaces/interface[name=Ethernet1]/config\", \"val\": { \"arista-intf-augments:load-interval\": 300, \"openconfig-interfaces:description\": \"Test\", \"openconfig-interfaces:enabled\": true, \"openconfig-interfaces:loopback-mode\": false, \"openconfig-interfaces:mtu\": 0, \"openconfig-interfaces:name\": \"Ethernet1\", \"openconfig-interfaces:type\": \"iana-if-type:ethernetCsmacd\", \"openconfig-vlan:tpid\": \"openconfig-vlan-types:TPID_0X8100\" } } ] } ] }","title":"output"},{"location":"examples/pygnmi/#delete","text":"The file delete.py uses the pygnmi python module and uses the gNMI SET RPC (delete) python3 delete.py output {'response': [{'path': 'interfaces/interface[name=Ethernet1]/config/description', 'op': 'DELETE'}]}","title":"Delete"},{"location":"examples/restconf/","text":"About RESTCONF RESTCONF is defined in the RFC 8040 The GET method is sent by the client to retrieve data for a resource. The HEAD method is sent by the client to retrieve just the header fields (which contain the metadata for a resource) that would be returned for the comparable GET method, without the response message-body. It is supported for all resources that support the GET method. The POST method is sent by the client to create a data resource. The PUT method is sent by the client to create or replace the target data resource. The DELETE method is used to delete the target resource. EOS configuration Please refer to this link EOS Control plane ACL The default RESTCONF port on Arista devices is TCP 6020. We need to change the default control-plane ACL on EOS in order to allow TCP 6020 (or the configured RESTCONF TCP port). Please refer to this link","title":"About RESTCONF"},{"location":"examples/restconf/#about-restconf","text":"RESTCONF is defined in the RFC 8040 The GET method is sent by the client to retrieve data for a resource. The HEAD method is sent by the client to retrieve just the header fields (which contain the metadata for a resource) that would be returned for the comparable GET method, without the response message-body. It is supported for all resources that support the GET method. The POST method is sent by the client to create a data resource. The PUT method is sent by the client to create or replace the target data resource. The DELETE method is used to delete the target resource.","title":"About RESTCONF"},{"location":"examples/restconf/#eos-configuration","text":"Please refer to this link","title":"EOS configuration"},{"location":"examples/restconf/#eos-control-plane-acl","text":"The default RESTCONF port on Arista devices is TCP 6020. We need to change the default control-plane ACL on EOS in order to allow TCP 6020 (or the configured RESTCONF TCP port). Please refer to this link","title":"EOS Control plane ACL"},{"location":"examples/restconf/curl/","text":"Requirement on the RESTCONF client sudo apt-get update sudo apt-get -y upgrade sudo apt-get install curl jq -y RESTCONF examples using cURL GET Get interface description for Ethernet1 curl -s GET 'https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet1/config/description' \\ --header 'Accept: application/yang-data+json' -u arista:arista --insecure Output: {\"openconfig-interfaces:description\":\"P2P_LINK_TO_DC1-SPINE1_Ethernet1\"} Get interface stats for Ethernet1 and output the \"in-octets\" using jq curl -s GET 'https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet1' \\ --header 'Accept: application/yang-data+json' -u arista:arista \\ --insecure | jq .'\"openconfig-interfaces:state\".counters.\"in-octets\"' Output: \"48284395\" Get interfaces stats and output the name of the 2nd (3rd index) using jq curl -s GET 'https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces' \\ --header 'Accept: application/yang-data+json' -u arista:arista \\ --insecure | jq .'\"openconfig-interfaces:interface\"[2].name' Output: \"Ethernet1\" Get the system information and parse the hostname using jq curl -X GET https://192.0.2.105:6020/restconf/data/system \\ --header 'Accept: application/yang-data+json' -u arista:arista \\ --insecure | jq .'\"openconfig-system:config\".hostname' Output: % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 66151 0 66151 0 0 284k 0 --:--:-- --:--:-- --:--:-- 284k \"switch1\" Get PfxRcd and PfxAcc stats from a BGP neighbor curl -s GET 'https://192.0.2.100:5900/restconf/data/network-instances/network-instance=default/protocols/protocol=BGP,BGP/bgp/neighbors/neighbor=192.0.2.21/afi-safis/afi-safi=IPV4_UNICAST' \\ --header 'Accept: application/yang-data+json' -u cvpadmin:arastra --insecure | jq Output: { \"openconfig-network-instance:afi-safi-name\": \"openconfig-bgp-types:IPV4_UNICAST\", \"openconfig-network-instance:config\": { \"afi-safi-name\": \"openconfig-bgp-types:IPV4_UNICAST\" }, \"openconfig-network-instance:state\": { \"afi-safi-name\": \"openconfig-bgp-types:IPV4_UNICAST\", \"prefixes\": { \"arista-bgp-augments:best-ecmp-paths\": 0, \"arista-bgp-augments:best-paths\": 0, \"installed\": 7, \"received\": 7, \"sent\": 7 } } } NOTE: The protocol must have multiple keys, i.e.: protocol=BGP,BGP , in this case, it's the identifier and the name of the protocol, if either of these is omitted; on the switch side in the Octa/OpenConfig agent logs an error similar to the following would be generated: handler.go:95] ERROR mismatch between number of keys in [identifier name] and values present [BGP] or if are omitted the error message would be: handler.go:95] ERROR failed to find key values after element \"protocol\" in \"network-instances/network-instance=default/protocols/protocol Tip: pyang can be useful to understand what keys each leaf requires, e.g: pyang openconfig-network-instance.yang -f tree --tree-depth=4 | tail -n 4 | ... +--rw protocols +--rw protocol* [identifier name] ... HEAD curl --head 'https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet1' \\ --header 'Accept: application/yang-data+json' -u arista:arista --insecure output HTTP/1.1 200 OK Content-Type: application/yang.data+json Date: Sun, 04 Jul 2021 14:20:39 GMT PUT Interface configuration example Let's check before the change curl -s GET 'https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet4/config' \\ --header 'Accept: application/yang-data+json' -u arista:arista --insecure output {\"openconfig-interfaces:description\":\"blabla\",\"openconfig-interfaces:enabled\":false,\"arista-intf-augments:load-interval\":300,\"openconfig-interfaces:loopback-mode\":false,\"openconfig-interfaces:mtu\":0,\"openconfig-interfaces:name\":\"Ethernet4\",\"openconfig-vlan:tpid\":\"openconfig-vlan-types:TPID_0X8100\",\"openconfig-interfaces:type\":\"iana-if-type:ethernetCsmacd\"} Let's use the file interface.json more interface.json output {\"enabled\":true,\"name\":\"Ethernet4\", \"description\":\"restconf_test\"} curl -X PUT https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet4/config \\ -H 'Content-Type: application/json' -u arista:arista -d @interface.json --insecure output {\"openconfig-interfaces:description\":\"restconf_test\",\"openconfig-interfaces:enabled\":true,\"openconfig-interfaces:name\":\"Ethernet4\"} Let's verify after the change curl -s GET 'https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet4/config' \\ --header 'Accept: application/yang-data+json' -u arista:arista --insecure output {\"openconfig-interfaces:description\":\"restconf_test\",\"openconfig-interfaces:enabled\":true,\"arista-intf-augments:load-interval\":300,\"openconfig-interfaces:loopback-mode\":false,\"openconfig-interfaces:mtu\":0,\"openconfig-interfaces:name\":\"Ethernet4\",\"openconfig-vlan:tpid\":\"openconfig-vlan-types:TPID_0X8100\",\"openconfig-interfaces:type\":\"iana-if-type:ethernetCsmacd\"} curl -s GET 'https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet4/config' \\ --header 'Accept: application/yang-data+json' -u arista:arista --insecure | jq . output { \"openconfig-interfaces:description\": \"restconf_test\", \"openconfig-interfaces:enabled\": true, \"arista-intf-augments:load-interval\": 300, \"openconfig-interfaces:loopback-mode\": false, \"openconfig-interfaces:mtu\": 0, \"openconfig-interfaces:name\": \"Ethernet4\", \"openconfig-vlan:tpid\": \"openconfig-vlan-types:TPID_0X8100\", \"openconfig-interfaces:type\": \"iana-if-type:ethernetCsmacd\" } Device hostname example Let's check before the change curl -X GET https://192.0.2.105:6020/restconf/data/system/config \\ --header 'Accept: application/yang-data+json' -u arista:arista --insecure output {\"openconfig-system:hostname\":\"DC1-LEAF1A\"} curl -X GET https://192.0.2.105:6020/restconf/data/system \\ --header 'Accept: application/yang-data+json' -u arista:arista \\ --insecure | jq .'\"openconfig-system:config\".hostname' output % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 74748 0 74748 0 0 300k 0 --:--:-- --:--:-- --:--:-- 300k \"DC1-LEAF1A\" curl -X PUT https://192.0.2.105:6020/restconf/data/system/config \\ -H 'Content-Type: application/json' -u arista:arista \\ -d '{\"openconfig-system:hostname\":\"test\"}' --insecure output {\"openconfig-system:hostname\":\"test\"} Let's verify after the change curl -X GET https://192.0.2.105:6020/restconf/data/system/config \\ --header 'Accept: application/yang-data+json' -u arista:arista --insecure output {\"openconfig-system:hostname\":\"test\"} POST Interface configuration example Let's check before the change curl -s GET 'https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet4' \\ --header 'Accept: application/yang-data+json' -u arista:arista \\ --insecure | jq .'\"openconfig-interfaces:config\"' output { \"description\": \"\", \"enabled\": true, \"arista-intf-augments:load-interval\": 300, \"loopback-mode\": false, \"mtu\": 0, \"name\": \"Ethernet4\", \"openconfig-vlan:tpid\": \"openconfig-vlan-types:TPID_0X8100\", \"type\": \"iana-if-type:ethernetCsmacd\" } curl -X POST https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet4/config \\ -H 'Content-Type: application/json' -u arista:arista \\ -d '{\"openconfig-interfaces:description\":\"restconf_test\"}' --insecure output {\"openconfig-interfaces:description\":\"restconf_test\"} curl -X POST https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet4/config \\ -H 'Content-Type: application/json' -u arista:arista \\ -d '{\"openconfig-interfaces:enabled\":false}' --insecure output {\"openconfig-interfaces:enabled\":false} Let's verify after the change curl -s GET 'https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet4' \\ --header 'Accept: application/yang-data+json' -u arista:arista \\ --insecure | jq .'\"openconfig-interfaces:config\".description' output \"restconf_test\" curl -s GET 'https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet4' \\ --header 'Accept: application/yang-data+json' \\ -u arista:arista --insecure | jq .'\"openconfig-interfaces:config\"' output { \"description\": \"restconf_test\", \"enabled\": false, \"arista-intf-augments:load-interval\": 300, \"loopback-mode\": false, \"mtu\": 0, \"name\": \"Ethernet4\", \"openconfig-vlan:tpid\": \"openconfig-vlan-types:TPID_0X8100\", \"type\": \"iana-if-type:ethernetCsmacd\" } DELETE Let's check before the change curl -s GET 'https://192.0.2.105:6020/restconf/data/ietf-interfaces:interfaces/interface=Loopback100' \\ --header 'Accept: application/yang-data+json' -u arista:arista --insecure output {\"openconfig-interfaces:config\":{\"description\":\"test\",\"enabled\":true,\"arista-intf-augments:load-interval\":300,\"loopback-mode\":true,\"name\":\"Loopback100\",\"openconfig-vlan:tpid\":\"openconfig-vlan-types:TPID_0X8100\",\"type\":\"iana-if-type:softwareLoopback\"},\"openconfig-interfaces:hold-time\":{\"config\":{\"down\":0,\"up\":0},\"state\":{\"down\":0,\"up\":0}},\"openconfig-interfaces:name\":\"Loopback100\",\"openconfig-interfaces:state\":{\"enabled\":true,\"loopback-mode\":false,\"openconfig-vlan:tpid\":\"openconfig-vlan-types:TPID_0X8100\"},\"openconfig-interfaces:subinterfaces\":{\"subinterface\":[{\"config\":{\"description\":\"test\",\"enabled\":true,\"index\":0},\"index\":0,\"openconfig-if-ip:ipv4\":{\"config\":{\"dhcp-client\":false,\"enabled\":true,\"mtu\":1500},\"state\":{\"dhcp-client\":false,\"enabled\":true,\"mtu\":1500}},\"openconfig-if-ip:ipv6\":{\"config\":{\"dhcp-client\":false,\"enabled\":false,\"mtu\":1500},\"state\":{\"dhcp-client\":false,\"enabled\":false,\"mtu\":1500}},\"state\":{\"enabled\":true,\"index\":0}}]}} curl -X DELETE https://192.0.2.105:6020/restconf/data/ietf-interfaces:interfaces/interface=Loopback100 \\ -u arista:arista --insecure","title":"cURL"},{"location":"examples/restconf/curl/#requirement-on-the-restconf-client","text":"sudo apt-get update sudo apt-get -y upgrade sudo apt-get install curl jq -y","title":"Requirement on the RESTCONF client"},{"location":"examples/restconf/curl/#restconf-examples-using-curl","text":"","title":"RESTCONF examples using cURL"},{"location":"examples/restconf/curl/#get","text":"","title":"GET"},{"location":"examples/restconf/curl/#get-interface-description-for-ethernet1","text":"curl -s GET 'https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet1/config/description' \\ --header 'Accept: application/yang-data+json' -u arista:arista --insecure Output: {\"openconfig-interfaces:description\":\"P2P_LINK_TO_DC1-SPINE1_Ethernet1\"}","title":"Get interface description for Ethernet1"},{"location":"examples/restconf/curl/#get-interface-stats-for-ethernet1-and-output-the-in-octets-using-jq","text":"curl -s GET 'https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet1' \\ --header 'Accept: application/yang-data+json' -u arista:arista \\ --insecure | jq .'\"openconfig-interfaces:state\".counters.\"in-octets\"' Output: \"48284395\"","title":"Get interface stats for Ethernet1 and output the \"in-octets\" using jq"},{"location":"examples/restconf/curl/#get-interfaces-stats-and-output-the-name-of-the-2nd-3rd-index-using-jq","text":"curl -s GET 'https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces' \\ --header 'Accept: application/yang-data+json' -u arista:arista \\ --insecure | jq .'\"openconfig-interfaces:interface\"[2].name' Output: \"Ethernet1\"","title":"Get interfaces stats and output the name of the 2nd (3rd index) using jq"},{"location":"examples/restconf/curl/#get-the-system-information-and-parse-the-hostname-using-jq","text":"curl -X GET https://192.0.2.105:6020/restconf/data/system \\ --header 'Accept: application/yang-data+json' -u arista:arista \\ --insecure | jq .'\"openconfig-system:config\".hostname' Output: % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 66151 0 66151 0 0 284k 0 --:--:-- --:--:-- --:--:-- 284k \"switch1\"","title":"Get the system information and parse the hostname using jq"},{"location":"examples/restconf/curl/#get-pfxrcd-and-pfxacc-stats-from-a-bgp-neighbor","text":"curl -s GET 'https://192.0.2.100:5900/restconf/data/network-instances/network-instance=default/protocols/protocol=BGP,BGP/bgp/neighbors/neighbor=192.0.2.21/afi-safis/afi-safi=IPV4_UNICAST' \\ --header 'Accept: application/yang-data+json' -u cvpadmin:arastra --insecure | jq Output: { \"openconfig-network-instance:afi-safi-name\": \"openconfig-bgp-types:IPV4_UNICAST\", \"openconfig-network-instance:config\": { \"afi-safi-name\": \"openconfig-bgp-types:IPV4_UNICAST\" }, \"openconfig-network-instance:state\": { \"afi-safi-name\": \"openconfig-bgp-types:IPV4_UNICAST\", \"prefixes\": { \"arista-bgp-augments:best-ecmp-paths\": 0, \"arista-bgp-augments:best-paths\": 0, \"installed\": 7, \"received\": 7, \"sent\": 7 } } } NOTE: The protocol must have multiple keys, i.e.: protocol=BGP,BGP , in this case, it's the identifier and the name of the protocol, if either of these is omitted; on the switch side in the Octa/OpenConfig agent logs an error similar to the following would be generated: handler.go:95] ERROR mismatch between number of keys in [identifier name] and values present [BGP] or if are omitted the error message would be: handler.go:95] ERROR failed to find key values after element \"protocol\" in \"network-instances/network-instance=default/protocols/protocol Tip: pyang can be useful to understand what keys each leaf requires, e.g: pyang openconfig-network-instance.yang -f tree --tree-depth=4 | tail -n 4 | ... +--rw protocols +--rw protocol* [identifier name] ...","title":"Get PfxRcd and PfxAcc stats from a BGP neighbor"},{"location":"examples/restconf/curl/#head","text":"curl --head 'https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet1' \\ --header 'Accept: application/yang-data+json' -u arista:arista --insecure output HTTP/1.1 200 OK Content-Type: application/yang.data+json Date: Sun, 04 Jul 2021 14:20:39 GMT","title":"HEAD"},{"location":"examples/restconf/curl/#put","text":"","title":"PUT"},{"location":"examples/restconf/curl/#interface-configuration-example","text":"Let's check before the change curl -s GET 'https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet4/config' \\ --header 'Accept: application/yang-data+json' -u arista:arista --insecure output {\"openconfig-interfaces:description\":\"blabla\",\"openconfig-interfaces:enabled\":false,\"arista-intf-augments:load-interval\":300,\"openconfig-interfaces:loopback-mode\":false,\"openconfig-interfaces:mtu\":0,\"openconfig-interfaces:name\":\"Ethernet4\",\"openconfig-vlan:tpid\":\"openconfig-vlan-types:TPID_0X8100\",\"openconfig-interfaces:type\":\"iana-if-type:ethernetCsmacd\"} Let's use the file interface.json more interface.json output {\"enabled\":true,\"name\":\"Ethernet4\", \"description\":\"restconf_test\"} curl -X PUT https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet4/config \\ -H 'Content-Type: application/json' -u arista:arista -d @interface.json --insecure output {\"openconfig-interfaces:description\":\"restconf_test\",\"openconfig-interfaces:enabled\":true,\"openconfig-interfaces:name\":\"Ethernet4\"} Let's verify after the change curl -s GET 'https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet4/config' \\ --header 'Accept: application/yang-data+json' -u arista:arista --insecure output {\"openconfig-interfaces:description\":\"restconf_test\",\"openconfig-interfaces:enabled\":true,\"arista-intf-augments:load-interval\":300,\"openconfig-interfaces:loopback-mode\":false,\"openconfig-interfaces:mtu\":0,\"openconfig-interfaces:name\":\"Ethernet4\",\"openconfig-vlan:tpid\":\"openconfig-vlan-types:TPID_0X8100\",\"openconfig-interfaces:type\":\"iana-if-type:ethernetCsmacd\"} curl -s GET 'https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet4/config' \\ --header 'Accept: application/yang-data+json' -u arista:arista --insecure | jq . output { \"openconfig-interfaces:description\": \"restconf_test\", \"openconfig-interfaces:enabled\": true, \"arista-intf-augments:load-interval\": 300, \"openconfig-interfaces:loopback-mode\": false, \"openconfig-interfaces:mtu\": 0, \"openconfig-interfaces:name\": \"Ethernet4\", \"openconfig-vlan:tpid\": \"openconfig-vlan-types:TPID_0X8100\", \"openconfig-interfaces:type\": \"iana-if-type:ethernetCsmacd\" }","title":"Interface configuration example"},{"location":"examples/restconf/curl/#device-hostname-example","text":"Let's check before the change curl -X GET https://192.0.2.105:6020/restconf/data/system/config \\ --header 'Accept: application/yang-data+json' -u arista:arista --insecure output {\"openconfig-system:hostname\":\"DC1-LEAF1A\"} curl -X GET https://192.0.2.105:6020/restconf/data/system \\ --header 'Accept: application/yang-data+json' -u arista:arista \\ --insecure | jq .'\"openconfig-system:config\".hostname' output % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 74748 0 74748 0 0 300k 0 --:--:-- --:--:-- --:--:-- 300k \"DC1-LEAF1A\" curl -X PUT https://192.0.2.105:6020/restconf/data/system/config \\ -H 'Content-Type: application/json' -u arista:arista \\ -d '{\"openconfig-system:hostname\":\"test\"}' --insecure output {\"openconfig-system:hostname\":\"test\"} Let's verify after the change curl -X GET https://192.0.2.105:6020/restconf/data/system/config \\ --header 'Accept: application/yang-data+json' -u arista:arista --insecure output {\"openconfig-system:hostname\":\"test\"}","title":"Device hostname example"},{"location":"examples/restconf/curl/#post","text":"","title":"POST"},{"location":"examples/restconf/curl/#interface-configuration-example_1","text":"Let's check before the change curl -s GET 'https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet4' \\ --header 'Accept: application/yang-data+json' -u arista:arista \\ --insecure | jq .'\"openconfig-interfaces:config\"' output { \"description\": \"\", \"enabled\": true, \"arista-intf-augments:load-interval\": 300, \"loopback-mode\": false, \"mtu\": 0, \"name\": \"Ethernet4\", \"openconfig-vlan:tpid\": \"openconfig-vlan-types:TPID_0X8100\", \"type\": \"iana-if-type:ethernetCsmacd\" } curl -X POST https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet4/config \\ -H 'Content-Type: application/json' -u arista:arista \\ -d '{\"openconfig-interfaces:description\":\"restconf_test\"}' --insecure output {\"openconfig-interfaces:description\":\"restconf_test\"} curl -X POST https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet4/config \\ -H 'Content-Type: application/json' -u arista:arista \\ -d '{\"openconfig-interfaces:enabled\":false}' --insecure output {\"openconfig-interfaces:enabled\":false} Let's verify after the change curl -s GET 'https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet4' \\ --header 'Accept: application/yang-data+json' -u arista:arista \\ --insecure | jq .'\"openconfig-interfaces:config\".description' output \"restconf_test\" curl -s GET 'https://192.0.2.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet4' \\ --header 'Accept: application/yang-data+json' \\ -u arista:arista --insecure | jq .'\"openconfig-interfaces:config\"' output { \"description\": \"restconf_test\", \"enabled\": false, \"arista-intf-augments:load-interval\": 300, \"loopback-mode\": false, \"mtu\": 0, \"name\": \"Ethernet4\", \"openconfig-vlan:tpid\": \"openconfig-vlan-types:TPID_0X8100\", \"type\": \"iana-if-type:ethernetCsmacd\" }","title":"Interface configuration example"},{"location":"examples/restconf/curl/#delete","text":"Let's check before the change curl -s GET 'https://192.0.2.105:6020/restconf/data/ietf-interfaces:interfaces/interface=Loopback100' \\ --header 'Accept: application/yang-data+json' -u arista:arista --insecure output {\"openconfig-interfaces:config\":{\"description\":\"test\",\"enabled\":true,\"arista-intf-augments:load-interval\":300,\"loopback-mode\":true,\"name\":\"Loopback100\",\"openconfig-vlan:tpid\":\"openconfig-vlan-types:TPID_0X8100\",\"type\":\"iana-if-type:softwareLoopback\"},\"openconfig-interfaces:hold-time\":{\"config\":{\"down\":0,\"up\":0},\"state\":{\"down\":0,\"up\":0}},\"openconfig-interfaces:name\":\"Loopback100\",\"openconfig-interfaces:state\":{\"enabled\":true,\"loopback-mode\":false,\"openconfig-vlan:tpid\":\"openconfig-vlan-types:TPID_0X8100\"},\"openconfig-interfaces:subinterfaces\":{\"subinterface\":[{\"config\":{\"description\":\"test\",\"enabled\":true,\"index\":0},\"index\":0,\"openconfig-if-ip:ipv4\":{\"config\":{\"dhcp-client\":false,\"enabled\":true,\"mtu\":1500},\"state\":{\"dhcp-client\":false,\"enabled\":true,\"mtu\":1500}},\"openconfig-if-ip:ipv6\":{\"config\":{\"dhcp-client\":false,\"enabled\":false,\"mtu\":1500},\"state\":{\"dhcp-client\":false,\"enabled\":false,\"mtu\":1500}},\"state\":{\"enabled\":true,\"index\":0}}]}} curl -X DELETE https://192.0.2.105:6020/restconf/data/ietf-interfaces:interfaces/interface=Loopback100 \\ -u arista:arista --insecure","title":"DELETE"},{"location":"examples/restconf/python/","text":"Requirement on the RESTCONF client sudo apt-get update sudo apt-get -y upgrade pip install requests pip3 freeze | grep requests RESTCONF examples with Python GET $ python3 Python 3.6.9 (default, Jan 26 2021, 15:33:00) [GCC 8.4.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import requests >>> from requests.auth import HTTPBasicAuth >>> import json >>> USER = 'arista' >>> PASS = 'arista' >>> requests.packages.urllib3.disable_warnings() >>> headers = {'Content-Type': 'application/yang-data+json', 'Accept': 'application/yang-data+json'} >>> headers = {'Accept': 'application/yang-data+json'} >>> api_call = \"https://10.73.1.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet1/state\" >>> result = requests.get(api_call, auth=HTTPBasicAuth(USER, PASS), headers=headers, verify=False) >>> result.status_code 200 >>> result.ok True >>> result.url 'https://10.73.1.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet1/state' >>> result.content b'{\"openconfig-interfaces:admin-status\":\"UP\",\"openconfig-interfaces:counters\":{\"in-broadcast-pkts\":\"0\",\"in-discards\":\"0\",\"in-errors\":\"0\",\"in-fcs-errors\":\"0\",\"in-multicast-pkts\":\"972\",\"in-octets\":\"116602\",\"in-unicast-pkts\":\"131\",\"out-broadcast-pkts\":\"1\",\"out-discards\":\"0\",\"out-errors\":\"0\",\"out-multicast-pkts\":\"1761\",\"out-octets\":\"199997\",\"out-unicast-pkts\":\"122\"},\"openconfig-interfaces:description\":\"restconf_test\",\"openconfig-interfaces:enabled\":true,\"openconfig-platform-port:hardware-port\":\"Port1\",\"openconfig-interfaces:ifindex\":1,\"arista-intf-augments:inactive\":false,\"openconfig-interfaces:last-change\":\"1624966430515012864\",\"openconfig-interfaces:loopback-mode\":false,\"openconfig-interfaces:mtu\":0,\"openconfig-interfaces:name\":\"Ethernet1\",\"openconfig-interfaces:oper-status\":\"UP\",\"openconfig-vlan:tpid\":\"openconfig-vlan-types:TPID_0X8100\",\"openconfig-interfaces:type\":\"iana-if-type:ethernetCsmacd\"}\\n' >>> result.json() {'openconfig-interfaces:admin-status': 'UP', 'openconfig-interfaces:counters': {'in-broadcast-pkts': '0', 'in-discards': '0', 'in-errors': '0', 'in-fcs-errors': '0', 'in-multicast-pkts': '972', 'in-octets': '116602', 'in-unicast-pkts': '131', 'out-broadcast-pkts': '1', 'out-discards': '0', 'out-errors': '0', 'out-multicast-pkts': '1761', 'out-octets': '199997', 'out-unicast-pkts': '122'}, 'openconfig-interfaces:description': 'restconf_test', 'openconfig-interfaces:enabled': True, 'openconfig-platform-port:hardware-port': 'Port1', 'openconfig-interfaces:ifindex': 1, 'arista-intf-augments:inactive': False, 'openconfig-interfaces:last-change': '1624966430515012864', 'openconfig-interfaces:loopback-mode': False, 'openconfig-interfaces:mtu': 0, 'openconfig-interfaces:name': 'Ethernet1', 'openconfig-interfaces:oper-status': 'UP', 'openconfig-vlan:tpid': 'openconfig-vlan-types:TPID_0X8100', 'openconfig-interfaces:type': 'iana-if-type:ethernetCsmacd'} >>> result.json()['openconfig-interfaces:oper-status'] 'UP' >>> result.json()['openconfig-interfaces:counters']['out-octets'] '199997' >>> exit() Execute the python script get_eth1_status.py python3 get_eth1_status.py output {'arista-intf-augments:inactive': False, 'openconfig-interfaces:admin-status': 'UP', 'openconfig-interfaces:counters': {'in-broadcast-pkts': '0', 'in-discards': '0', 'in-errors': '0', 'in-fcs-errors': '0', 'in-multicast-pkts': '1762', 'in-octets': '202553', 'in-unicast-pkts': '183', 'out-broadcast-pkts': '1', 'out-discards': '0', 'out-errors': '0', 'out-multicast-pkts': '2552', 'out-octets': '284793', 'out-unicast-pkts': '174'}, 'openconfig-interfaces:description': 'restconf_test', 'openconfig-interfaces:enabled': True, 'openconfig-interfaces:ifindex': 1, 'openconfig-interfaces:last-change': '1624966430515012864', 'openconfig-interfaces:loopback-mode': False, 'openconfig-interfaces:mtu': 0, 'openconfig-interfaces:name': 'Ethernet1', 'openconfig-interfaces:oper-status': 'UP', 'openconfig-interfaces:type': 'iana-if-type:ethernetCsmacd', 'openconfig-platform-port:hardware-port': 'Port1', 'openconfig-vlan:tpid': 'openconfig-vlan-types:TPID_0X8100'} HEAD Execute the python script head.py python3 head.py output url is https://10.73.1.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet1/state status_code is 200 headers are {'Content-Type': 'application/yang.data+json', 'Date': 'Sun, 18 Jul 2021 08:49:52 GMT'} content is b'' DELETE Execute the python script delete_lo100.py python3 delete_lo100.py output (note the following has been formatted for readability.) get int lo100 status_code is 200 content is {'openconfig-interfaces:config': {'description': '222', 'enabled': True, 'arista-intf-augments:load-interval': 300, 'loopback-mode': True, 'name': 'Loopback100', 'openconfig-vlan:tpid': 'openconfig-vlan-types:TPID_0X8100', 'type': 'iana-if-type:softwareLoopback'}, 'openconfig-interfaces:hold-time': {'config': {'down': 0, 'up': 0}, 'state': {'down': 0, 'up': 0}}, 'openconfig-interfaces:name': 'Loopback100', 'openconfig-interfaces:state': {'enabled': True, 'loopback-mode': False, 'openconfig-vlan:tpid': 'openconfig-vlan-types:TPID_0X8100'}, 'openconfig-interfaces:subinterfaces': {'subinterface': [{'config': {'description': '222', 'enabled': True, 'index': 0}, 'index': 0, 'openconfig-if-ip:ipv4': {'config': {'dhcp-client': False, 'enabled': True, 'mtu': 1500}, 'state': {'dhcp-client': False, 'enabled': True, 'mtu': 1500}}, 'openconfig-if-ip:ipv6': {'config': {'dhcp-client': False, 'enabled': False, 'mtu': 1500}, 'state': {'dhcp-client': False, 'enabled': False, 'mtu': 1500}}, 'state': {'enabled': True, 'index': 0}}]}} deleting int lo100 status_code is 200","title":"Python"},{"location":"examples/restconf/python/#requirement-on-the-restconf-client","text":"sudo apt-get update sudo apt-get -y upgrade pip install requests pip3 freeze | grep requests","title":"Requirement on the RESTCONF client"},{"location":"examples/restconf/python/#restconf-examples-with-python","text":"","title":"RESTCONF examples with Python"},{"location":"examples/restconf/python/#get","text":"$ python3 Python 3.6.9 (default, Jan 26 2021, 15:33:00) [GCC 8.4.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import requests >>> from requests.auth import HTTPBasicAuth >>> import json >>> USER = 'arista' >>> PASS = 'arista' >>> requests.packages.urllib3.disable_warnings() >>> headers = {'Content-Type': 'application/yang-data+json', 'Accept': 'application/yang-data+json'} >>> headers = {'Accept': 'application/yang-data+json'} >>> api_call = \"https://10.73.1.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet1/state\" >>> result = requests.get(api_call, auth=HTTPBasicAuth(USER, PASS), headers=headers, verify=False) >>> result.status_code 200 >>> result.ok True >>> result.url 'https://10.73.1.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet1/state' >>> result.content b'{\"openconfig-interfaces:admin-status\":\"UP\",\"openconfig-interfaces:counters\":{\"in-broadcast-pkts\":\"0\",\"in-discards\":\"0\",\"in-errors\":\"0\",\"in-fcs-errors\":\"0\",\"in-multicast-pkts\":\"972\",\"in-octets\":\"116602\",\"in-unicast-pkts\":\"131\",\"out-broadcast-pkts\":\"1\",\"out-discards\":\"0\",\"out-errors\":\"0\",\"out-multicast-pkts\":\"1761\",\"out-octets\":\"199997\",\"out-unicast-pkts\":\"122\"},\"openconfig-interfaces:description\":\"restconf_test\",\"openconfig-interfaces:enabled\":true,\"openconfig-platform-port:hardware-port\":\"Port1\",\"openconfig-interfaces:ifindex\":1,\"arista-intf-augments:inactive\":false,\"openconfig-interfaces:last-change\":\"1624966430515012864\",\"openconfig-interfaces:loopback-mode\":false,\"openconfig-interfaces:mtu\":0,\"openconfig-interfaces:name\":\"Ethernet1\",\"openconfig-interfaces:oper-status\":\"UP\",\"openconfig-vlan:tpid\":\"openconfig-vlan-types:TPID_0X8100\",\"openconfig-interfaces:type\":\"iana-if-type:ethernetCsmacd\"}\\n' >>> result.json() {'openconfig-interfaces:admin-status': 'UP', 'openconfig-interfaces:counters': {'in-broadcast-pkts': '0', 'in-discards': '0', 'in-errors': '0', 'in-fcs-errors': '0', 'in-multicast-pkts': '972', 'in-octets': '116602', 'in-unicast-pkts': '131', 'out-broadcast-pkts': '1', 'out-discards': '0', 'out-errors': '0', 'out-multicast-pkts': '1761', 'out-octets': '199997', 'out-unicast-pkts': '122'}, 'openconfig-interfaces:description': 'restconf_test', 'openconfig-interfaces:enabled': True, 'openconfig-platform-port:hardware-port': 'Port1', 'openconfig-interfaces:ifindex': 1, 'arista-intf-augments:inactive': False, 'openconfig-interfaces:last-change': '1624966430515012864', 'openconfig-interfaces:loopback-mode': False, 'openconfig-interfaces:mtu': 0, 'openconfig-interfaces:name': 'Ethernet1', 'openconfig-interfaces:oper-status': 'UP', 'openconfig-vlan:tpid': 'openconfig-vlan-types:TPID_0X8100', 'openconfig-interfaces:type': 'iana-if-type:ethernetCsmacd'} >>> result.json()['openconfig-interfaces:oper-status'] 'UP' >>> result.json()['openconfig-interfaces:counters']['out-octets'] '199997' >>> exit() Execute the python script get_eth1_status.py python3 get_eth1_status.py output {'arista-intf-augments:inactive': False, 'openconfig-interfaces:admin-status': 'UP', 'openconfig-interfaces:counters': {'in-broadcast-pkts': '0', 'in-discards': '0', 'in-errors': '0', 'in-fcs-errors': '0', 'in-multicast-pkts': '1762', 'in-octets': '202553', 'in-unicast-pkts': '183', 'out-broadcast-pkts': '1', 'out-discards': '0', 'out-errors': '0', 'out-multicast-pkts': '2552', 'out-octets': '284793', 'out-unicast-pkts': '174'}, 'openconfig-interfaces:description': 'restconf_test', 'openconfig-interfaces:enabled': True, 'openconfig-interfaces:ifindex': 1, 'openconfig-interfaces:last-change': '1624966430515012864', 'openconfig-interfaces:loopback-mode': False, 'openconfig-interfaces:mtu': 0, 'openconfig-interfaces:name': 'Ethernet1', 'openconfig-interfaces:oper-status': 'UP', 'openconfig-interfaces:type': 'iana-if-type:ethernetCsmacd', 'openconfig-platform-port:hardware-port': 'Port1', 'openconfig-vlan:tpid': 'openconfig-vlan-types:TPID_0X8100'}","title":"GET"},{"location":"examples/restconf/python/#head","text":"Execute the python script head.py python3 head.py output url is https://10.73.1.105:6020/restconf/data/openconfig-interfaces:interfaces/interface=Ethernet1/state status_code is 200 headers are {'Content-Type': 'application/yang.data+json', 'Date': 'Sun, 18 Jul 2021 08:49:52 GMT'} content is b''","title":"HEAD"},{"location":"examples/restconf/python/#delete","text":"Execute the python script delete_lo100.py python3 delete_lo100.py output (note the following has been formatted for readability.) get int lo100 status_code is 200 content is {'openconfig-interfaces:config': {'description': '222', 'enabled': True, 'arista-intf-augments:load-interval': 300, 'loopback-mode': True, 'name': 'Loopback100', 'openconfig-vlan:tpid': 'openconfig-vlan-types:TPID_0X8100', 'type': 'iana-if-type:softwareLoopback'}, 'openconfig-interfaces:hold-time': {'config': {'down': 0, 'up': 0}, 'state': {'down': 0, 'up': 0}}, 'openconfig-interfaces:name': 'Loopback100', 'openconfig-interfaces:state': {'enabled': True, 'loopback-mode': False, 'openconfig-vlan:tpid': 'openconfig-vlan-types:TPID_0X8100'}, 'openconfig-interfaces:subinterfaces': {'subinterface': [{'config': {'description': '222', 'enabled': True, 'index': 0}, 'index': 0, 'openconfig-if-ip:ipv4': {'config': {'dhcp-client': False, 'enabled': True, 'mtu': 1500}, 'state': {'dhcp-client': False, 'enabled': True, 'mtu': 1500}}, 'openconfig-if-ip:ipv6': {'config': {'dhcp-client': False, 'enabled': False, 'mtu': 1500}, 'state': {'dhcp-client': False, 'enabled': False, 'mtu': 1500}}, 'state': {'enabled': True, 'index': 0}}]}} deleting int lo100 status_code is 200","title":"DELETE"},{"location":"examples/ygot/","text":"Overview ygot is a collection of Go utilities that can generate Go structures based off of YANG modules. In the demo we are going to generate go code based off of the openconfig-system model using ygot. Demo Actions Import the necessary YANG files for openconfig-system to create a hostname. The hostname will be printed out and stored within the system.json file. Using the Arista gNMI binary we will configure a device with the ceos1 hostname. Clone this repo git clone https://github.com/aristanetworks/openmgmt && cd openmgmt/src/ygot Install ygot go get github.com/openconfig/ygot Check to see if all of the current YANG files are accurate tree -f yang/ Reveal output \u251c\u2500\u2500 yang/openconfig-aaa-radius.yang \u251c\u2500\u2500 yang/openconfig-aaa-tacacs.yang \u251c\u2500\u2500 yang/openconfig-aaa-types.yang \u251c\u2500\u2500 yang/openconfig-aaa.yang \u251c\u2500\u2500 yang/openconfig-alarms.yang \u251c\u2500\u2500 yang/openconfig-alarm-types.yang \u251c\u2500\u2500 yang/openconfig-extensions.yang \u251c\u2500\u2500 yang/openconfig-inet-types.yang \u251c\u2500\u2500 yang/openconfig-license.yang \u251c\u2500\u2500 yang/openconfig-messages.yang \u251c\u2500\u2500 yang/openconfig-platform-types.yang \u251c\u2500\u2500 yang/openconfig-platform.yang \u251c\u2500\u2500 yang/openconfig-procmon.yang \u251c\u2500\u2500 yang/openconfig-system-logging.yang \u251c\u2500\u2500 yang/openconfig-system-management.yang \u251c\u2500\u2500 yang/openconfig-system-terminal.yang \u251c\u2500\u2500 yang/openconfig-system.yang \u251c\u2500\u2500 yang/openconfig-types.yang \u2514\u2500\u2500 yang/openconfig-yang-types.yang Run ygot go run $GOPATH/src/github.com/openconfig/ygot/generator/generator.go \\ -path=yang -output_file=pkg/oc.go -package_name=oc -generate_fakeroot \\ -fakeroot_name=device -compress_paths=true yang/openconfig-system.yang Check the contents of pkg/oc.go pkg \u2514\u2500\u2500 oc.go oc.go is the necessary go import / package for openconfig-system. Looking at the Device struct within pkg/oc.go type Device struct { Component map[string]*Component `path:\"components/component\" module:\"openconfig-platform\"` Messages *Messages `path:\"messages\" module:\"openconfig-messages\"` System *System `path:\"system\" module:\"openconfig-system\"` } Looking at the System struct we can see the Hostname field. type System struct { Hostname *string `path:\"config/hostname\" module:\"openconfig-system\"` } We need to fill in the Hostname field and pass it through the EmitJSON function so we can render this model with the correct information which can be found in main.go . Run the go code go run main.go Output: Reveal output { \"openconfig-system:system\": { \"config\": { \"hostname\": \"ceos1\" } } } The output is also within `config/hostname.json` which is the same as the printed version. Change the hostname on a device gnmi -addr ${DEVICEIP}:6030 -username admin -password admin update '/' config/hostname.json The device should now have the ceos1 hostname.","title":"ygot"},{"location":"examples/ygot/#overview","text":"ygot is a collection of Go utilities that can generate Go structures based off of YANG modules. In the demo we are going to generate go code based off of the openconfig-system model using ygot.","title":"Overview"},{"location":"examples/ygot/#demo-actions","text":"Import the necessary YANG files for openconfig-system to create a hostname. The hostname will be printed out and stored within the system.json file. Using the Arista gNMI binary we will configure a device with the ceos1 hostname.","title":"Demo Actions"},{"location":"examples/ygot/#clone-this-repo","text":"git clone https://github.com/aristanetworks/openmgmt && cd openmgmt/src/ygot","title":"Clone this repo"},{"location":"examples/ygot/#install-ygot","text":"go get github.com/openconfig/ygot","title":"Install ygot"},{"location":"examples/ygot/#check-to-see-if-all-of-the-current-yang-files-are-accurate","text":"tree -f yang/ Reveal output \u251c\u2500\u2500 yang/openconfig-aaa-radius.yang \u251c\u2500\u2500 yang/openconfig-aaa-tacacs.yang \u251c\u2500\u2500 yang/openconfig-aaa-types.yang \u251c\u2500\u2500 yang/openconfig-aaa.yang \u251c\u2500\u2500 yang/openconfig-alarms.yang \u251c\u2500\u2500 yang/openconfig-alarm-types.yang \u251c\u2500\u2500 yang/openconfig-extensions.yang \u251c\u2500\u2500 yang/openconfig-inet-types.yang \u251c\u2500\u2500 yang/openconfig-license.yang \u251c\u2500\u2500 yang/openconfig-messages.yang \u251c\u2500\u2500 yang/openconfig-platform-types.yang \u251c\u2500\u2500 yang/openconfig-platform.yang \u251c\u2500\u2500 yang/openconfig-procmon.yang \u251c\u2500\u2500 yang/openconfig-system-logging.yang \u251c\u2500\u2500 yang/openconfig-system-management.yang \u251c\u2500\u2500 yang/openconfig-system-terminal.yang \u251c\u2500\u2500 yang/openconfig-system.yang \u251c\u2500\u2500 yang/openconfig-types.yang \u2514\u2500\u2500 yang/openconfig-yang-types.yang","title":"Check to see if all of the current YANG files are accurate"},{"location":"examples/ygot/#run-ygot","text":"go run $GOPATH/src/github.com/openconfig/ygot/generator/generator.go \\ -path=yang -output_file=pkg/oc.go -package_name=oc -generate_fakeroot \\ -fakeroot_name=device -compress_paths=true yang/openconfig-system.yang","title":"Run ygot"},{"location":"examples/ygot/#check-the-contents-of-pkgocgo","text":"pkg \u2514\u2500\u2500 oc.go oc.go is the necessary go import / package for openconfig-system. Looking at the Device struct within pkg/oc.go type Device struct { Component map[string]*Component `path:\"components/component\" module:\"openconfig-platform\"` Messages *Messages `path:\"messages\" module:\"openconfig-messages\"` System *System `path:\"system\" module:\"openconfig-system\"` } Looking at the System struct we can see the Hostname field. type System struct { Hostname *string `path:\"config/hostname\" module:\"openconfig-system\"` } We need to fill in the Hostname field and pass it through the EmitJSON function so we can render this model with the correct information which can be found in main.go .","title":"Check the contents of pkg/oc.go"},{"location":"examples/ygot/#run-the-go-code","text":"go run main.go Output: Reveal output { \"openconfig-system:system\": { \"config\": { \"hostname\": \"ceos1\" } } } The output is also within `config/hostname.json` which is the same as the printed version.","title":"Run the go code"},{"location":"examples/ygot/#change-the-hostname-on-a-device","text":"gnmi -addr ${DEVICEIP}:6030 -username admin -password admin update '/' config/hostname.json The device should now have the ceos1 hostname.","title":"Change the hostname on a device"},{"location":"models/","text":"Overview What are YANG models and why should I care? Models are structured representations of network elements and their associated configured and operational state. YANG (Yet Another Next Generation - RFC6020 ) is a data modeling language. YANG is used to describe the configured and operational state of network elements. This allows for the consistent and structured representation of device and protocol attributes. The model definition typically includes the low level data types used to represent operational attributes as well as constraints that should be enforced in configuration. These modeled representations provide a consistent mechanism for device configuration as well as validating the device state through streaming telemetry or other device interrogation methods. These modeled device representations can also be transformed into data structures that can be used by configuration systems to dynamically control device configuration or state. YANG has been adopted as the official modeling language of the IETF and the OpenConfig group. IETF models The for the past few years the IETF has been providing models for previously standardized technologies as well as protocols and technologies which are under active standardization. These models are commonly used with complementary IETF standardized network management protocols (e.g.: NETCONF and RESTCONF) and have been selectively incorporated into other modeling initiatives. OpenConfig models OpenConfig is an operator led group defining models for network devices. Their models have been widely adopted by a number of vendors including Arista and an ecosystem of open source tooling has emerged to utilize these models for telemetry and configuration applications. In addition to defining device and protocol models the OpenConfig group has defined complementary network management protocols which leverage these models for telemetry (gNMI), configuration (gNMI), operational activities (gNOI) and RIB manipulation (gRIBI). Though it bears noting that OpenConfig models can also be used with NETCONF and RESTCONF protocols as well. Details regarding the OpenConfig model support within Arista's EOS software can be found online. Vendor-Specific Models While standard models provide a wide range of feature coverage there is commonly a need to model vendor-specific device or feature operation. Examples of this may include device specific behaviors (hardware configuration details) or pre-standard functionality that is deployed in operator networks that needs to be managed using the same tooling. Vendors may opt to define all new models which are published independently. Alternately, vendors may choose to leverage an existing standardized model and add vendor-specific elements to the standard models these are known as model augments. These augments are commonly published to allow integration into operator tooling. Arista publishes augments associated with a given EOS release on GitHub . References / Resources YANG RFC Repository of OpenConfig YANG models Arista Networks YANG Repository","title":"Models"},{"location":"models/#overview","text":"What are YANG models and why should I care? Models are structured representations of network elements and their associated configured and operational state. YANG (Yet Another Next Generation - RFC6020 ) is a data modeling language. YANG is used to describe the configured and operational state of network elements. This allows for the consistent and structured representation of device and protocol attributes. The model definition typically includes the low level data types used to represent operational attributes as well as constraints that should be enforced in configuration. These modeled representations provide a consistent mechanism for device configuration as well as validating the device state through streaming telemetry or other device interrogation methods. These modeled device representations can also be transformed into data structures that can be used by configuration systems to dynamically control device configuration or state. YANG has been adopted as the official modeling language of the IETF and the OpenConfig group.","title":"Overview"},{"location":"models/#ietf-models","text":"The for the past few years the IETF has been providing models for previously standardized technologies as well as protocols and technologies which are under active standardization. These models are commonly used with complementary IETF standardized network management protocols (e.g.: NETCONF and RESTCONF) and have been selectively incorporated into other modeling initiatives.","title":"IETF models"},{"location":"models/#openconfig-models","text":"OpenConfig is an operator led group defining models for network devices. Their models have been widely adopted by a number of vendors including Arista and an ecosystem of open source tooling has emerged to utilize these models for telemetry and configuration applications. In addition to defining device and protocol models the OpenConfig group has defined complementary network management protocols which leverage these models for telemetry (gNMI), configuration (gNMI), operational activities (gNOI) and RIB manipulation (gRIBI). Though it bears noting that OpenConfig models can also be used with NETCONF and RESTCONF protocols as well. Details regarding the OpenConfig model support within Arista's EOS software can be found online.","title":"OpenConfig models"},{"location":"models/#vendor-specific-models","text":"While standard models provide a wide range of feature coverage there is commonly a need to model vendor-specific device or feature operation. Examples of this may include device specific behaviors (hardware configuration details) or pre-standard functionality that is deployed in operator networks that needs to be managed using the same tooling. Vendors may opt to define all new models which are published independently. Alternately, vendors may choose to leverage an existing standardized model and add vendor-specific elements to the standard models these are known as model augments. These augments are commonly published to allow integration into operator tooling. Arista publishes augments associated with a given EOS release on GitHub .","title":"Vendor-Specific Models"},{"location":"models/#references-resources","text":"YANG RFC Repository of OpenConfig YANG models Arista Networks YANG Repository","title":"References / Resources"},{"location":"protocols/","text":"Overview ssh (CLI) eAPI gRPC gRPC is a Remote Procedure Call (RPC) framework that OpenConfig utilizes as a transport. Services built with gRPC are defined in .proto files. They describe the RPCs supported by the service and the data types exchanged in those RPCs. The OpenConfig group originally published openconfig.proto , but have since deprecated it in favor of gnmi.proto . The current EOS versions supports gnmi.proto v0.7 and includes support for Get, Subscribe, Set, and Capabilities RPCs. Note: Support for openconfig.proto was dropped in EOS-4.23.0F+. A client application is required to communicate with a gRPC service. A sample application can be found on the Arista GitHub account: gnmi . gnmi is a simple command-line client for gNMI written in Go that can be used for testing and prototyping. Another popular gnmi client is gnmic . NETCONF NETCONF provides mechanisms to install, manipulate and delete the configuration of network devices. It uses eXtensible Markup Language (XML) based data encoding for the configuration data as well as protocol messages. The NETCONF protocol operations are realized as RPCs over ssh transport. RESTCONF References / Resources NETCONF RFC: https://tools.ietf.org/html/rfc6241 RESTCONF RFC: https://tools.ietf.org/html/rfc8040","title":"Management Protocols"},{"location":"protocols/#overview","text":"","title":"Overview"},{"location":"protocols/#ssh-cli","text":"","title":"ssh (CLI)"},{"location":"protocols/#eapi","text":"","title":"eAPI"},{"location":"protocols/#grpc","text":"gRPC is a Remote Procedure Call (RPC) framework that OpenConfig utilizes as a transport. Services built with gRPC are defined in .proto files. They describe the RPCs supported by the service and the data types exchanged in those RPCs. The OpenConfig group originally published openconfig.proto , but have since deprecated it in favor of gnmi.proto . The current EOS versions supports gnmi.proto v0.7 and includes support for Get, Subscribe, Set, and Capabilities RPCs. Note: Support for openconfig.proto was dropped in EOS-4.23.0F+. A client application is required to communicate with a gRPC service. A sample application can be found on the Arista GitHub account: gnmi . gnmi is a simple command-line client for gNMI written in Go that can be used for testing and prototyping. Another popular gnmi client is gnmic .","title":"gRPC"},{"location":"protocols/#netconf","text":"NETCONF provides mechanisms to install, manipulate and delete the configuration of network devices. It uses eXtensible Markup Language (XML) based data encoding for the configuration data as well as protocol messages. The NETCONF protocol operations are realized as RPCs over ssh transport.","title":"NETCONF"},{"location":"protocols/#restconf","text":"","title":"RESTCONF"},{"location":"protocols/#references-resources","text":"NETCONF RFC: https://tools.ietf.org/html/rfc6241 RESTCONF RFC: https://tools.ietf.org/html/rfc8040","title":"References / Resources"},{"location":"telemetry/","text":"overview gNMI EOS native streaming (TerminAttr) OpenConfig OpenConfig + TerminAttr (Octa) RPCs subscription types ONCE STREAM POLL References / Resources","title":"Device Telemetry"},{"location":"telemetry/#overview","text":"","title":"overview"},{"location":"telemetry/#gnmi","text":"","title":"gNMI"},{"location":"telemetry/#eos-native-streaming-terminattr","text":"","title":"EOS native streaming (TerminAttr)"},{"location":"telemetry/#openconfig","text":"","title":"OpenConfig"},{"location":"telemetry/#openconfig-terminattr-octa","text":"","title":"OpenConfig + TerminAttr (Octa)"},{"location":"telemetry/#rpcs","text":"","title":"RPCs"},{"location":"telemetry/#subscription-types","text":"","title":"subscription types"},{"location":"telemetry/#once","text":"","title":"ONCE"},{"location":"telemetry/#stream","text":"","title":"STREAM"},{"location":"telemetry/#poll","text":"","title":"POLL"},{"location":"telemetry/#references-resources","text":"","title":"References / Resources"},{"location":"telemetry/adapters/gnmireverse/","text":"Introduction gNMIReverse is a Dial-Out gRPC service (available on our Github page) that reverses the direction of the dial for gNMI Subscriptions. The gNMIReverse client (running along with gNMI target) on the switch sends data to the gNMIReverse Server. This article contains steps on how to build the gNMIReverse client and server binaries and examples on how to configure, the daemon to run the gNMIReverse client on EOS. Prerequisite The following tools are required to proceed with this setup including cloning the repository and compiling client binary for EOS. Go Git Installing and configuring gNMIReverse client Building the client and server binaries Pull the repository from GitHub (or you can use git clone) go get -u github.com/aristanetworks/goarista/gnmireverse Go to the gNMIReverse directory (or the directory to which you have cloned the repo using git clone) cd $GOPATH/src/github.com/aristanetworks/goarista/gnmireverse/ Compile the package for both server and client cd $GOPATH/src/github.com/aristanetworks/goarista/gnmireverse/client GOOS=linux GOARCH=386 go build cd $GOPATH/src/github.com/aristanetworks/goarista/gnmireverse/server GOOS=linux GOARCH=386 go build NOTE : For EOS with x86_64 architecture, compile the package as follows for the client: cd $GOPATH/src/github.com/aristanetworks/goarista/gnmireverse/client GOOS=linux GOARCH= amd64 go build cd $GOPATH/src/github.com/aristanetworks/goarista/gnmireverse/server GOOS=linux GOARCH= amd64 go build Copy the client binary file to switch /mnt/flash/ directory scp $GOPATH/src/github.com/aristanetworks/goarista/gnmireverse/client/client admin@<switch-MGMT-IP>:/mnt/flash/ gNMIReverse client daemon Configuration First enable gNMI server on the switch ( Octa can be enabled if required, as discussed later in this article) Non-default VRF ! management api gnmi transport grpc def vrf management provider eos-native ! In the above example, we have the gNMI server running on default port 6030 in VRF management on the switch. # show management api gnmi Octa: enabled Enabled: Yes Server: running on port 6030, in management VRF SSL Profile: none QoS DSCP: none Authorization Required:No gNMIReverse client daemon configuration (non-default VRF): Note: The \\ elements have been added to aid readability, these should be removed when entering the configuration. daemon gnmi_reverse_client_1 exec /mnt/flash/client -username cvpadmin -password arista \\ -target_addr=management/127.0.0.1:6030 \\ -collector_addr=management/198.51.100.115:6000 \\ -collector_tls=false \\ -target_value=gb421 \\ -sample /system/processes/process[pid=*]/state@15s no shutdown Default VRF ! management api gnmi transport grpc def provider eos-native ! gNMI server running on default port 6030 in default VRF on the switch. # show management api gnmi Octa: enabled Enabled: Yes Server: running on port 6030, in default VRF SSL Profile: none QoS DSCP: none Authorization Required:No gNMIReverse client daemon configuration (default VRF): Note: The \\ elements have been added to aid readability, these should be removed when entering the configuration. daemon gnmi_reverse_client_1 exec /mnt/flash/client -username cvpadmin -password arista \\ -target_addr=127.0.0.1:6030 \\ -collector_addr=198.51.100.115:6000 -collector_tls=false \\ -target_value=gb421 -sample /system/processes/process[pid=*]/state@15s no shutdown The gNMIReverse client flags are explained below. flag description username Username to authenticate with the target (gNMI server) password Password to authenticate with the target (gNMI server) target_addr Address of the gNMI server running on the switch. [<vrf-name>/]address:port collector_addr Address of the gNMIReverse server. [<vrf-name>/]host:port collector_tls use TLS in connection with collector (default true) target_value To include the device name sample Path to subscribe with SAMPLE subscription mode. <path>@<time-interval> Ex. -sample /interfaces/interface/state/counters@30s subscribe Path to subscribe with TARGET_DEFINED subscription mode if there are any changes on the subscribe path Running the gNMIReverse Server $ ./server -tls=false -addr=198.51.100.115:6000 [2020-12-28T10:52:17.990029143Z] (gb421) /system/processes/process[pid=1919]/state/cpu-usage-system = 89538 [2020-12-28T10:52:27.990635976Z] (gb421) /system/processes/process[pid=1919]/state/cpu-usage-user = 312674 [2020-12-28T10:52:27.990681209Z] (gb421) /system/processes/process[pid=1919]/state/cpu-utilization = 0 [2020-12-28T10:52:07.990565267Z] (gb421) /system/processes/process[pid=1919]/state/memory-usage = 403599360 [2020-12-28T09:28:37.99397Z] (gb421) /system/processes/process[pid=1919]/state/name = ConfigAgent [2020-12-28T09:28:27.975545302Z] (gb421) /system/processes/process[pid=1919]/state/pid = 1919 [2020-12-28T09:28:38.058955133Z] (gb421) /system/processes/process[pid=1919]/state/start-time = 1608564420584540928 We can see samples from switch gb421 (gNMIReverse client) for the path \u201c/system/processes/process[pid=*]/state\u201d which will be updated every 15 seconds based on the client daemon configuration. Subscribing to eos_native paths Enable Octa ! management api gnmi transport grpc def vrf management provider eos-native ! Configure the daemon to subscribe to the eos_native path as in following example: Note: The \\ elements have been added to aid readability, these should be removed when entering the configuration. daemon gnmi_reverse_client_1 exec /mnt/flash/client -username cvpadmin -password arista \\ -target_addr=management/127.0.0.1:6030 \\ -collector_addr=management/198.51.100.115:6000 \\ -collector_tls=false -target_value=gb421 \\ -sample /system/processes/process[pid=*]/state@30s \\ -origin eos_native \\ -subscribe /Kernel/proc/meminfo/ no shutdown On the server side we can see the updates from the same subscription path: $ ./server -tls=false -addr=198.51.100.115:6000 [2020-12-29T06:55:15.29120758Z] (gb421) /Kernel/proc/meminfo/memFree = 2482671616 [2020-12-29T06:55:15.29121703Z] (gb421) /Kernel/proc/meminfo/memAvailable = 6465200128 [2020-12-29T06:55:15.29122834Z] (gb421) /Kernel/proc/meminfo/active = 3750023168 [2020-12-29T06:55:15.291235635Z] (gb421) /Kernel/proc/meminfo/activeAnon = 1048485888 [2020-12-29T06:55:15.291254147Z] (gb421) /Kernel/proc/meminfo/anonPages = 991825920 [2020-12-29T06:55:15.291261051Z] (gb421) /Kernel/proc/meminfo/slab = 398680064 [2020-12-29T06:55:15.291265299Z] (gb421) /Kernel/proc/meminfo/sUnreclaim = 218755072 [2020-12-29T06:55:15.291275563Z] (gb421) /Kernel/proc/meminfo/committedAS = 3991588864 [2020-12-29T06:55:25.290455551Z] (gb421) /Kernel/proc/meminfo/memFree = 2482679808 [2020-12-29T06:55:25.29046483Z] (gb421) /Kernel/proc/meminfo/memAvailable = 6465232896 [2020-12-29T06:55:25.290476436Z] (gb421) /Kernel/proc/meminfo/active = 3750035456 [2020-12-29T06:55:25.290486217Z] (gb421) /Kernel/proc/meminfo/activeAnon = 1048498176 [2020-12-29T06:55:25.290507211Z] (gb421) /Kernel/proc/meminfo/anonPages = 991838208 [2020-12-29T06:55:25.290517806Z] (gb421) /Kernel/proc/meminfo/sReclaimable = 179949568 [2020-12-29T06:55:25.290523744Z] (gb421) /Kernel/proc/meminfo/sUnreclaim = 218730496 Subscribing to Smash paths Enable Smash paths for Octa under management api models as follows: ! management api models provider smash path routing/status ! Configure the gNMIReverse client daemon: Note: The \\ elements have been added to aid readability, these should be removed when entering the configuration. daemon gnmi_reverse_client_1 exec /mnt/flash/client -username cvpadmin -password arista \\ -target_addr=management/127.0.0.1:6030 \\ -collector_addr=management/198.51.100.115:6000 \\ -collector_tls=false -target_value=gb421 \\ -sample /system/processes/process[pid=*]/state@30s \\ -origin eos_native \\ -subscribe /Kernel/proc/meminfo/ \\ -subscribe /Smash/routing/status/ no shutdown On server side we can see updates as follows: $ ./server -tls=false -addr=198.51.100.115:6000 [2020-12-29T07:39:33.857345257Z] (gb421) /Smash/routing/status/route/1.1.1.1\\/32/storage = 4294967240 [2020-12-29T07:39:33.857345257Z] (gb421) /Smash/routing/status/route/1.1.1.1\\/32/routeType = ebgp [2020-12-29T07:39:33.857345257Z] (gb421) /Smash/routing/status/route/1.1.1.1\\/32/fecId = {\"value\":12884901894} [2020-12-29T07:39:33.857345257Z] (gb421) /Smash/routing/status/route/1.1.1.1\\/32/key = \"1.1.1.1/32\" [2020-12-29T07:39:33.857345257Z] (gb421) /Smash/routing/status/route/1.1.1.1\\/32/metric = {\"value\":0} References Github","title":"gNMIReverse"},{"location":"telemetry/adapters/gnmireverse/#introduction","text":"gNMIReverse is a Dial-Out gRPC service (available on our Github page) that reverses the direction of the dial for gNMI Subscriptions. The gNMIReverse client (running along with gNMI target) on the switch sends data to the gNMIReverse Server. This article contains steps on how to build the gNMIReverse client and server binaries and examples on how to configure, the daemon to run the gNMIReverse client on EOS.","title":"Introduction"},{"location":"telemetry/adapters/gnmireverse/#prerequisite","text":"The following tools are required to proceed with this setup including cloning the repository and compiling client binary for EOS. Go Git","title":"Prerequisite"},{"location":"telemetry/adapters/gnmireverse/#installing-and-configuring-gnmireverse-client","text":"","title":"Installing and configuring gNMIReverse client"},{"location":"telemetry/adapters/gnmireverse/#building-the-client-and-server-binaries","text":"Pull the repository from GitHub (or you can use git clone) go get -u github.com/aristanetworks/goarista/gnmireverse Go to the gNMIReverse directory (or the directory to which you have cloned the repo using git clone) cd $GOPATH/src/github.com/aristanetworks/goarista/gnmireverse/ Compile the package for both server and client cd $GOPATH/src/github.com/aristanetworks/goarista/gnmireverse/client GOOS=linux GOARCH=386 go build cd $GOPATH/src/github.com/aristanetworks/goarista/gnmireverse/server GOOS=linux GOARCH=386 go build NOTE : For EOS with x86_64 architecture, compile the package as follows for the client: cd $GOPATH/src/github.com/aristanetworks/goarista/gnmireverse/client GOOS=linux GOARCH= amd64 go build cd $GOPATH/src/github.com/aristanetworks/goarista/gnmireverse/server GOOS=linux GOARCH= amd64 go build Copy the client binary file to switch /mnt/flash/ directory scp $GOPATH/src/github.com/aristanetworks/goarista/gnmireverse/client/client admin@<switch-MGMT-IP>:/mnt/flash/","title":"Building the client and server binaries"},{"location":"telemetry/adapters/gnmireverse/#gnmireverse-client-daemon-configuration","text":"First enable gNMI server on the switch ( Octa can be enabled if required, as discussed later in this article)","title":"gNMIReverse client daemon Configuration"},{"location":"telemetry/adapters/gnmireverse/#non-default-vrf","text":"! management api gnmi transport grpc def vrf management provider eos-native ! In the above example, we have the gNMI server running on default port 6030 in VRF management on the switch. # show management api gnmi Octa: enabled Enabled: Yes Server: running on port 6030, in management VRF SSL Profile: none QoS DSCP: none Authorization Required:No gNMIReverse client daemon configuration (non-default VRF): Note: The \\ elements have been added to aid readability, these should be removed when entering the configuration. daemon gnmi_reverse_client_1 exec /mnt/flash/client -username cvpadmin -password arista \\ -target_addr=management/127.0.0.1:6030 \\ -collector_addr=management/198.51.100.115:6000 \\ -collector_tls=false \\ -target_value=gb421 \\ -sample /system/processes/process[pid=*]/state@15s no shutdown","title":"Non-default VRF"},{"location":"telemetry/adapters/gnmireverse/#default-vrf","text":"! management api gnmi transport grpc def provider eos-native ! gNMI server running on default port 6030 in default VRF on the switch. # show management api gnmi Octa: enabled Enabled: Yes Server: running on port 6030, in default VRF SSL Profile: none QoS DSCP: none Authorization Required:No gNMIReverse client daemon configuration (default VRF): Note: The \\ elements have been added to aid readability, these should be removed when entering the configuration. daemon gnmi_reverse_client_1 exec /mnt/flash/client -username cvpadmin -password arista \\ -target_addr=127.0.0.1:6030 \\ -collector_addr=198.51.100.115:6000 -collector_tls=false \\ -target_value=gb421 -sample /system/processes/process[pid=*]/state@15s no shutdown The gNMIReverse client flags are explained below. flag description username Username to authenticate with the target (gNMI server) password Password to authenticate with the target (gNMI server) target_addr Address of the gNMI server running on the switch. [<vrf-name>/]address:port collector_addr Address of the gNMIReverse server. [<vrf-name>/]host:port collector_tls use TLS in connection with collector (default true) target_value To include the device name sample Path to subscribe with SAMPLE subscription mode. <path>@<time-interval> Ex. -sample /interfaces/interface/state/counters@30s subscribe Path to subscribe with TARGET_DEFINED subscription mode if there are any changes on the subscribe path","title":"Default VRF"},{"location":"telemetry/adapters/gnmireverse/#running-the-gnmireverse-server","text":"$ ./server -tls=false -addr=198.51.100.115:6000 [2020-12-28T10:52:17.990029143Z] (gb421) /system/processes/process[pid=1919]/state/cpu-usage-system = 89538 [2020-12-28T10:52:27.990635976Z] (gb421) /system/processes/process[pid=1919]/state/cpu-usage-user = 312674 [2020-12-28T10:52:27.990681209Z] (gb421) /system/processes/process[pid=1919]/state/cpu-utilization = 0 [2020-12-28T10:52:07.990565267Z] (gb421) /system/processes/process[pid=1919]/state/memory-usage = 403599360 [2020-12-28T09:28:37.99397Z] (gb421) /system/processes/process[pid=1919]/state/name = ConfigAgent [2020-12-28T09:28:27.975545302Z] (gb421) /system/processes/process[pid=1919]/state/pid = 1919 [2020-12-28T09:28:38.058955133Z] (gb421) /system/processes/process[pid=1919]/state/start-time = 1608564420584540928 We can see samples from switch gb421 (gNMIReverse client) for the path \u201c/system/processes/process[pid=*]/state\u201d which will be updated every 15 seconds based on the client daemon configuration.","title":"Running the gNMIReverse Server"},{"location":"telemetry/adapters/gnmireverse/#subscribing-to-eos_native-paths","text":"Enable Octa ! management api gnmi transport grpc def vrf management provider eos-native ! Configure the daemon to subscribe to the eos_native path as in following example: Note: The \\ elements have been added to aid readability, these should be removed when entering the configuration. daemon gnmi_reverse_client_1 exec /mnt/flash/client -username cvpadmin -password arista \\ -target_addr=management/127.0.0.1:6030 \\ -collector_addr=management/198.51.100.115:6000 \\ -collector_tls=false -target_value=gb421 \\ -sample /system/processes/process[pid=*]/state@30s \\ -origin eos_native \\ -subscribe /Kernel/proc/meminfo/ no shutdown On the server side we can see the updates from the same subscription path: $ ./server -tls=false -addr=198.51.100.115:6000 [2020-12-29T06:55:15.29120758Z] (gb421) /Kernel/proc/meminfo/memFree = 2482671616 [2020-12-29T06:55:15.29121703Z] (gb421) /Kernel/proc/meminfo/memAvailable = 6465200128 [2020-12-29T06:55:15.29122834Z] (gb421) /Kernel/proc/meminfo/active = 3750023168 [2020-12-29T06:55:15.291235635Z] (gb421) /Kernel/proc/meminfo/activeAnon = 1048485888 [2020-12-29T06:55:15.291254147Z] (gb421) /Kernel/proc/meminfo/anonPages = 991825920 [2020-12-29T06:55:15.291261051Z] (gb421) /Kernel/proc/meminfo/slab = 398680064 [2020-12-29T06:55:15.291265299Z] (gb421) /Kernel/proc/meminfo/sUnreclaim = 218755072 [2020-12-29T06:55:15.291275563Z] (gb421) /Kernel/proc/meminfo/committedAS = 3991588864 [2020-12-29T06:55:25.290455551Z] (gb421) /Kernel/proc/meminfo/memFree = 2482679808 [2020-12-29T06:55:25.29046483Z] (gb421) /Kernel/proc/meminfo/memAvailable = 6465232896 [2020-12-29T06:55:25.290476436Z] (gb421) /Kernel/proc/meminfo/active = 3750035456 [2020-12-29T06:55:25.290486217Z] (gb421) /Kernel/proc/meminfo/activeAnon = 1048498176 [2020-12-29T06:55:25.290507211Z] (gb421) /Kernel/proc/meminfo/anonPages = 991838208 [2020-12-29T06:55:25.290517806Z] (gb421) /Kernel/proc/meminfo/sReclaimable = 179949568 [2020-12-29T06:55:25.290523744Z] (gb421) /Kernel/proc/meminfo/sUnreclaim = 218730496","title":"Subscribing to eos_native paths"},{"location":"telemetry/adapters/gnmireverse/#subscribing-to-smash-paths","text":"Enable Smash paths for Octa under management api models as follows: ! management api models provider smash path routing/status ! Configure the gNMIReverse client daemon: Note: The \\ elements have been added to aid readability, these should be removed when entering the configuration. daemon gnmi_reverse_client_1 exec /mnt/flash/client -username cvpadmin -password arista \\ -target_addr=management/127.0.0.1:6030 \\ -collector_addr=management/198.51.100.115:6000 \\ -collector_tls=false -target_value=gb421 \\ -sample /system/processes/process[pid=*]/state@30s \\ -origin eos_native \\ -subscribe /Kernel/proc/meminfo/ \\ -subscribe /Smash/routing/status/ no shutdown On server side we can see updates as follows: $ ./server -tls=false -addr=198.51.100.115:6000 [2020-12-29T07:39:33.857345257Z] (gb421) /Smash/routing/status/route/1.1.1.1\\/32/storage = 4294967240 [2020-12-29T07:39:33.857345257Z] (gb421) /Smash/routing/status/route/1.1.1.1\\/32/routeType = ebgp [2020-12-29T07:39:33.857345257Z] (gb421) /Smash/routing/status/route/1.1.1.1\\/32/fecId = {\"value\":12884901894} [2020-12-29T07:39:33.857345257Z] (gb421) /Smash/routing/status/route/1.1.1.1\\/32/key = \"1.1.1.1/32\" [2020-12-29T07:39:33.857345257Z] (gb421) /Smash/routing/status/route/1.1.1.1\\/32/metric = {\"value\":0}","title":"Subscribing to Smash paths"},{"location":"telemetry/adapters/gnmireverse/#references","text":"Github","title":"References"},{"location":"telemetry/adapters/ocprometheus/","text":"Introduction Prometheus is one of the most popular open-source monitoring and alerting systems, which scrapes and stores numeric time series data over HTTP. It has a very flexible query language, can send alerts via alertmanager to various platform and can be integrated easily with many open-source tools. For more details and use cases, please visit https://prometheus.io/docs/introduction/overview/ . The purpose of this article is to show how easy it is to deploy and configure Prometheus and Grafana and configure Arista switches to send telemetry states to Prometheus using TerminAttr ( EOS streaming telemetry agent ) and one of the OpenConfig connectors that you can find on our official github page. Please note, that these apps were written as proof-of-concept and are supported on a best-effort basis. The projects can be forked and modified to suit your needs. Feedbacks are always welcomed and issues can be filed like for any other projects on github. Prerequisites The following tools will be necessary to be able to install Prometheus and Grafana, clone our project from github and compile ocprometheus. Homebrew (for macOS users) Go Git docker Installing Prometheus and Grafana There are several ways to install Prometheus and Grafana, the docker approach being the most popular and easiest. Installing Prometheus First, create a minimal Prometheus configuration file on the host filesystem at ~/prometheus.yml : vi ~/prometheus.yml Add your targets (network devices IP/hostname + port number) to the \u2018scrape configs\u2019 session Example prometheus.yml # my global config global: scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute. evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute. # scrape_timeout is set to the global default (10s). # Alertmanager configuration alerting: alertmanagers: - static_configs: - targets: # - alertmanager:9093 # Load rules once and periodically evaluate them according to the global 'evaluation_interval'. rule_files: # - \"first_rules.yml\" # - \"second_rules.yml\" # A scrape configuration containing exactly one endpoint to scrape: # Here it's Prometheus itself. scrape_configs: # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config. - job_name: 'prometheus' # metrics_path defaults to '/metrics' # scheme defaults to 'http'. static_configs: - targets: ['localhost:9090'] - job_name: 'arista' static_configs: - targets: ['192.0.2.139:8080'] Start the Prometheus Docker container with an external configuration file: docker run -d \\ -p 9090:9090 -v ~/prometheus.yml:/etc/prometheus/prometheus.yml \\ prom/prometheus \\ -config.file=/etc/prometheus/prometheus.yml If the above doesn\u2019t work, check the latest docker command on the official Prometheus website . docker run \\ -p 9090:9090 \\ -v /tmp/prometheus.yml:/etc/prometheus/prometheus.yml \\ prom/prometheus Add new targets In our case, targets are switches, but a target can be any type of device. By default if you are adding new targets by editing the prometheus.yml file on the host, it won\u2019t update the config file in the Docker VM, that is because every time you insert new characters with VIM and save the file, the inode will change. Option 1 Change the file permission to 664 ( rw-rw-r\u2013 ) chmod 664 prometheus.yml Check if the permissions have been changed ls -l prometheus.yml -rw-rw-r-- 1 root root 1076 May 14 12:25 prometheus.yml This will modify the file in your docker VM as well, but the configuration won\u2019t be updated until you restart the service, which you can do with a one-liner: sudo docker exec -i -t eager_kapitsa kill -HUP 1 Where eager_kapitsa is the name of the container, which you can find out with the docker ps command: root@tac-prometheus-ire:~# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 47f52778b492 prom/prometheus \"/bin/prometheus --c\u2026\" 13 days ago Up 6 minutes 0.0.0.0:9090->9090/tcp eager_kapitsa 3e880f9a951e grafana/grafana \"/run.sh\" 3 weeks ago Up 3 weeks 0.0.0.0:3000->3000/tcp grafana You can always check if the configuration has been updated with the following curl command: root@tac-prometheus-ire:~# curl localhost:9090/config <ommited> static_configs: - targets: - 192.0.2.132:8080 - 192.0.2.139:8080 - 10.83.12.109:8080 - 192.0.2.138:8080 <ommited> Forum that explains this behavior . Option 2 NOTE If you don\u2019t want to change the file permission, you can use the :set backupcopy=yes option in VIM, which will make sure to not change the inode of the file when saving it. And restart the service again: sudo docker exec -i -t eager_kapitsa kill -HUP 1 Option 3 Use the \u2013web.enable-lifecycle flag when running the container. Installing Grafana You can use the following docker command to deploy Grafana in couple of seconds: $ docker run \\ -d \\ -p 3000:3000 \\ --name=grafana \\ -e \"GF_SERVER_ROOT_URL=http://grafana.server.name\" \\ -e \"GF_SECURITY_ADMIN_PASSWORD=secret\" \\ grafana/grafana Note: In newer versions of Grafana there are no more implicit volumes for /var/lib/grafana /var/log/grafana /etc/grafana For more details see what\u2019s new in Grafana 5.1 and later and recommended steps to migrate from older releases. There\u2019s also a ready-to-go combo of Prometheus/Grafana/docker-stack which you can find at https://github.com/vegasbrianc/prometheus (credit to Brian Christner) Now that we have Prometheus and Grafana running, we\u2019re ready to configure our switches and start drawing nice graphs from the queried data. Installing and configuring ocprometheus There are a couple of ways to install ocprometheus, and all require for you to compile it with GO. Git Clone the Arista GO library First you\u2019ll need to git clone the goarista repository. tamas:~ tamas$ git clone https://github.com/aristanetworks/goarista.git Cloning into 'goarista'... remote: Counting objects: 2584, done. remote: Compressing objects: 100% (10/10), done. remote: Total 2584 (delta 1), reused 2 (delta 0), pack-reused 2574 Receiving objects: 100% (2584/2584), 945.38 KiB | 767.00 KiB/s, done. Resolving deltas: 100% (1529/1529), done. Checking connectivity... done. This will download all the files from that github page and we can then go ahead and compile ocprometheus. LPT In case the project you\u2019ve cloned has dependencies on other git project you can use the \u2013recurse-submodules flag while cloning which will also clone the submodules. E.g.: git clone --recurse-submodules -j8 git://github.com/foo/bar.git Compile ocprometheus in GO 1. Go to your ocprometheus folder on your PC/laptop/server cd git/goarista/cmd/ocprometheus 2. Compile ocprometheus with the following paramethers: GOOS=linux GOARCH=386 go build 3. Copy the binary with SCP to the switch scp ocprometheus admin@192.0.2.139://mnt/flash Since EOS has a linux kernel, the OS has to be set to linux and the architecture to 32 bit (386) with GOOS and GOARCH variables respectively. Starting 4.22.0 we\u2019ve introduced a 64-bit EOS () and you can also compile ocprometheus for 64-bit architecture with the following command: GOOS=linux GOARCH=amd64 go build Option 1) Using the binary From this point you can just SCP the binary to a persistent storage on the switch (e.g. /mnt/flash/ ) and just configure the daemon and point it to /mnt/flash/ocprometheus Option 2) Install it as a swix You can also install it as a swix, which requires a bit more effort, however it\u2019s easier to manage swix packages, and you\u2019ll be able to see the ocprometheus extension in the show extensions output. In order to create a swix file, we first have to compile this binary as an RPM. Building RPMs can be tedious, especially for networking guys, who are not used to doing things like this. There are various tutorials online on how to use rpmbuild, but instead of wasting half an hour to create all the necessary folders and your spec file, etc we can create RPMs with just one line, using FPM (Effing Package Management). You can download FPM from the following github page: https://github.com/jordansissel/fpm ( credit to Jordan and all the people who contributed to this project \u2013 you\u2019ve made our lives easier! Thanks!) The following was done on a Devuan VM ( which is basically a lightweight Debian without systemd ) using the following steps: 1. Create a new folder: mkdir fpmbuild 2. Copy the compiled ocprometheus and the sampleconfig.yml (in this example it was renamed to ocprometheus.yml ) downloaded from github: cp ~/git/goarista/cmd/ocprometheus/ocprometheus /backup/fpmbuild/ cp ~/git/goarista/cmd/ocprometheus/sampleconfig_above_4.20.yml /backup/fpmbuild/ocprometheus.yml 3. Compile it with fpm: This one liner will create the RPM package without the need to create all the folders and specs that you\u2019d need to do with the usual rpmbuild: sudo fpm -s dir -t rpm -a all -n \"ocprometheus-$(date +%m_%d.%H%M)\" \\ -v1.5.6 --prefix /usr/bin/ \\ -C /backup/fpmbuild/ ocprometheus ocprometheus.yml Flags cheat sheet Flag Description -s dir Source is a directory -t rpm Target is an RPM file -a all User noarch instead of x86_64 -n \u201cocprometheus-$(date +%m_%d.%H%M)\u201c the name of the RPM -v 1.5.5 the version of the RPM will be 1.0 \u2013prefix /usr/bin/ The files will be installed in this directory -C /backup/fpmbuild/ ocprometheus ocprometheus.yml Change directory to here before searching for files 4. Copy the generated file to the switch and install it as a swix: root@devuan:/backup# ls -al ocpr* -rw-r--r-- 1 root root 6462872 Jun 17 22:55 oocprometheus-06_17.2255-1.5.6-1.noarch.rpm root@devuan:/backup# scp ocprom* admin@ats323://mnt/flash/ 4.1. SSH to the switch and create the swix, e.g.: ssh admin@ats323 ats323...16:13:36# bash Arista Networks EOS shell [admin@ats323 ~]$ cd /mnt/flash [admin@ats323 flash]$ swix create ocprometheus-1.5.6.swix ocprometheus-06_17.2255-1.5.6-1.noarch.rpm adding: manifest.txt (stored 0%) adding: ocprometheus-06_17.2255-1.5.6-1.noarch.rpm (stored 0%) 4.2. Install it as a swix extension copy flash:ocprometheus-1.5.6.swix extension: extension ocprometheus-1.5.6.swix 4.3. Make it persistent across reloads copy installed-extensions boot-extensions 4.4. Check your extensions show extensions Name Version/Release Status Extension ------------------------------- -------------------- ----------- --------- TerminAttr-1.5.5-1.swix v1.5.5/1 A, I 25 ocprometheus-1.5.6.swix 1.5.6/1 A, I 1 A: available | NA: not available | I: installed | NI: not installed | F: forced Finally you\u2019ll need to copy the configuration file, which contains the subscription paths. You\u2019ll find the yaml file on our github page. You can find more details about subscriptions/metrics and how they are constructed in https://eos.arista.com/understanding-subscription-paths-for-open-source-telemetry-streaming For macOS it\u2019ll be similar with few modifications (tested on macOS Mojave and newer): 1. Install FPM and RPM brew install gnu-tar gem install --no-ri --no-rdoc fpm brew install rpm Note: on macOS Catalina you might need to use \u2013user-install when installing gem packages, and instead of \u2013no-rdoc use \u2013no-document . Xcode might need to be reinstalled if you\u2019ve upgraded from Mojave. e.g. gem install --no-document fpm --user-install 2. Similarly as before, create a folder from where you\u2019ll build your package and copy the compiled binary there mkdir fpmbuild cp ~/git/goarista/cmd/ocprometheus/ocprometheus ~/backup/fpmbuild/ cp ~/git/goarista/cmd/ocprometheus/sampleconfig_above_4.20.yml ~/backup/fpmbuild/ocprometheus.yml 3. Build the rpm with fpm using the following command sudo fpm -s dir -t rpm -a noarch --rpm-os linux \\ -n \"ocprometheus-$(date +%m_%d.%H%M)\" -v1.5.6 \\ --prefix /usr/bin/ -C ~/backup/fpmbuild/ ocprometheus ocprometheus.yml The only difference when using macOS to build your rpm using fpm is that you\u2019ll need to add the \u2013rpm-os linux flag, otherwise it\u2019ll build the rpm for OSX. Note: If you are using CVP and maintain your images and extensions with Image bundles, you\u2019ll have to add your ocprometheus.swix to Image bundles, otherwise they\u2019ll get removed during an image push operation. Now it\u2019s time to configure TerminAttr and ocprometheus. Sample EOS Configuration Here\u2019s a sample config for pre EOS-4.19 and post EOS-4.20.7M (CP-ACL) when using VRF MGMT ! vrf instance MGMT ! interface Management1 vrf forwarding MGMT ip address 192.168.58.16/24 ! system control-plane ip access-group def2 in ip access-group def2 vrf MGMT in ! daemon TerminAttr exec /usr/bin/TerminAttr -disableaaa -grpcaddr MGMT/0.0.0.0:6042 no shutdown ! daemon ocprometheus exec /sbin/ip netns exec ns-MGMT /usr/bin/ocprometheus -config /usr/bin/ocprometheus.yml -addr localhost:6042 no shutdown ! You\u2019ll need at least 3 things to configure ocprometheus: Location of the binary Location of the config file, configured by the -config flag gNMI socket of TerminAttr, which can be specified by the -addr flag TerminAttr is running a gRPC server locally on TCP 6042 , which you can check by looking at the logs: bash cat /var/log/agents/TerminAttr-`pidof TerminAttr` NOTE: when installing ocprometheus as a swix file, the binary will be put in /usr/bin directory by default (you can change that in the RPM making process). If you compile it in go and copy it to flash you can just change that daemon config to refer to that path (this way it won\u2019t be installed as a swix). e.g. daemon ocprometheus exec /sbin/ip netns exec ns-MGMT /usr/bin/ocprometheus -config /usr/bin/ocprometheus.yml -addr localhost:6042 no shutdown By default in EOS versions that have control-plane ACL we need to permit TCP port 8080 (default), or whichever port you decide to use to send data to the Prometheus server (defined in the targets list in prometheus.yml ) ip access-list def2 9 permit tcp any any eq 8080 10 permit icmp any any 20 permit ip any any tracked 30 permit udp any any eq bfd ttl eq 255 40 permit udp any any eq bfd-echo ttl eq 254 50 permit udp any any eq multihop-bfd 60 permit udp any any eq micro-bfd 70 permit ospf any any 80 permit tcp any any eq ssh telnet www snmp bgp https msdp ldp netconf-ssh gnmi 90 permit udp any any eq bootps bootpc snmp rip ntp ldp 100 permit tcp any any eq mlag ttl eq 255 110 permit udp any any eq mlag ttl eq 255 120 permit vrrp any any 130 permit ahp any any 140 permit pim any any 150 permit igmp any any 160 permit tcp any any range 5900 5910 170 permit tcp any any range 50000 50100 180 permit udp any any range 51000 51100 190 permit tcp any any eq 3333 200 permit tcp any any eq nat ttl eq 255 210 permit tcp any eq bgp any 220 permit rsvp any any To check if the port is open you can use netstat , e.g.: netstat -an | grep :8080 Or the network namespace command if VRF is used sudo ip netns exec ns-MGMT netstat -an | grep :8080 You should see a similar output as below: $ sudo netstat -tulnap | grep :8080 tcp6 0 0 :::8080 :::* LISTEN 17200/ocprometheus tcp6 0 0 172.28.160.232:8080 192.0.2.78:48956 ESTABLISHED 17200/ocprometheus Or in case of using a VRF: $ sudo ip netns exec ns-management netstat -tulnap | grep :8080 tcp6 0 0 :::8080 :::* LISTEN 12344/ocprometheus tcp6 0 0 192.0.2.139:8080 192.0.2.78:40820 ESTABLISHED 12344/ocprometheus Don\u2019t be confused if you see tcp6 in the output, that\u2019s expected, as AF_INET6 works for both IPv4 and IPv6 as per RFC 3493 . Note: The same configuration is used but no control-plane ACL for 4.20.7M > EOS >4.19 or in newer releases where EOS-PDP.swi is used, and you\u2019ll need to allow the Prometheus server IP using -allowed_ips=<IP/subnet> Here are some of the configuration combinations that you might have: No VRF and streaming to both CVP and Prometheus ! daemon TerminAttr exec /usr/bin/TerminAttr -ingestgrpcurl=192.0.2.33:9910 -cvcompression=gzip -taillogs -ingestauth=key,mysecretkey -smashexcludes=ale,flexCounter,hardware,kni,pulse,strata -ingestexclude=/Sysdb/cell/1/agent,/Sysdb/cell/2/agent -disableaaa no shutdown ! daemon ocprometheus exec /usr/bin/ocprometheus -config /usr/bin/ocprometheus.yml -addr localhost:6042 no shutdown ! No VRF and only Prometheus ! daemon TerminAttr exec /usr/bin/TerminAttr -disableaaa no shutdown ! daemon ocprometheus exec /usr/bin/ocprometheus -config /usr/bin/ocprometheus.yml -addr localhost:6042 no shutdown ! VRF management and streaming to both CVP and Prometheus ! daemon TerminAttr exec /usr/bin/TerminAttr -ingestgrpcurl=192.0.2.79:9910 -cvcompression=gzip -taillogs -ingestvrf=management -ingestauth=key,mysecretkey -smashexcludes=ale,flexCounter,hardware,kni,pulse,strata -ingestexclude=/Sysdb/cell/1/agent,/Sysdb/cell/2/agent -disableaaa -grpcaddr management/0.0.0.0:6042 no shutdown ! daemon ocprometheus exec /sbin/ip netns exec ns-management /usr/bin/ocprometheus -config /usr/bin/ocprometheus.yml -addr localhost:6042 no shutdown ! VRF and only Prometheus ! daemon TerminAttr exec /usr/bin/TerminAttr -disableaaa -grpcaddr management/0.0.0.0:6042 no shutdown ! daemon ocprometheus exec /sbin/ip netns exec ns-management /usr/bin/ocprometheus -config /usr/bin/ocprometheus.yml -addr localhost:6042 no shutdown ! VRF and only Prometheus using authentication ! daemon TerminAttr exec /usr/bin/TerminAttr -grpcaddr management/0.0.0.0:6042 no shutdown ! daemon ocprometheus exec /sbin/ip netns exec ns-management /usr/bin/ocprometheus -config /usr/bin/ocprometheus.yml -addr localhost:6042 -username=cvpadmin -password=arista no shutdown ! PDP: VRF and only Prometheus ! daemon TerminAttr exec /usr/bin/TerminAttr -disableaaa -grpcaddr management/0.0.0.0:6042 -allowed_ips=192.0.2.78/32 no shutdown ! daemon ocprometheus exec /sbin/ip netns exec ns-management /usr/bin/ocprometheus -config /usr/bin/ocprometheus.yml -addr localhost:6042 no shutdown ! The minimum required flags for TerminAttr are: disableaaa : Disable AAA checking \u2013 all AAA requests pass (in case username/password is not used in ocprometheus) grpcaddr string VRF and address to listen on to serve data using the gNMI interface. The expected form is [<vrf-name>/]address:port (default 127.0.0.1:6042 ) After configuring our switches we can head over to Grafana and start drawing our graphs! Creating dashboards in Grafana First you\u2019ll need to add Prometheus as a data source, to be able to graph streamed data to Prometheus. You can do this by using the following steps: 1. Go to Configuration (gear icon) / Data Sources 2. Add data source and select Prometheus 3. Fill out the form (add the URL for the Prometheus server e.g.: http://myprometheus.com:9090/ It should look like this: 4. Save & Test 5. Now we can create our dashboard ( + button on the left) 6. Add query 7. Make sure you have \u2018Prometheus\u2019 selected as Data Source After selecting \u2018prometheus\u2019 you will be able to add expressions like \u2018intfCounter\u2019 , \u2018tempSensor\u2019, etc. defined in the ocprometheus config yaml file. 8. After adding \u2018intfCounter\u2019 to the query, it\u2019ll start plotting the counters for all the interfaces and all the devices that Prometheus is polling 9. Save the dashboard Finally: you can add as many dashboards you want you can add more expression on a single graph you can choose one line on the graph and it will show the graph for only that line (e.g. in interface counters you can choose a specific interface to look at the counters for) How to graph data only for specific interface? We can add filters to the queries in both Prometheus console or in grafana, e.g. if I want to see data for interface Ethernet24 I\u2019d use the following filter: intfCounter{intf=\u201dEthernet24\u2033} You can filter based on any of the labels defined in the config file (some of them are unnamed, but you can add a name to those capturing/non-capturing groups inside the config file on EOS). Some of the paths contains capturing groups that are not named, and Prometheus will give them a name in the following format: unnamedLabelX For example, for interface counters on a 7160 device I have the following path: /Smash/counters/ethIntf/XpCounters/current/(counter)/(?P<intf>.+)/statistics/(?P<direction>(?:in|out))(Octets|Errors|Discards) From the above path you can see for example that the direction of the packets is captured in a named capturing group that also contains a non-capturing group: (?P<direction>(?:in|out)) Named capturing groups can be created with ?P<name> . We don\u2019t need to capture a separate group for in|out as we already do it with the named capturing group of direction, so we can use a non-capturing group with ?: Explanation: Named Capture Group: direction (?P<direction>(?:in|out)) Non-capturing group (?:in|out) 1st Alternative in in matches the characters in literally (case sensitive) 2nd Alternative out out matches the characters out literally (case sensitive) Match for inOctets will be divided like this: Match 1 Full match 0-8 inOctets Group `direction` 0-2 in Group 2. 2-8 Octets If we wouldn\u2019t use non-capturing group for in|out the result will be the following Match 1 Full match 0-8 inOctets Group `direction` 0-2 in Group 2. 0-2 in Group 3. 2-8 Octets Notice the extra group for matching in . Now for (Octets|Errors|Discards) there is no name defined, so the result will be Match 1 Full match 2-8 Octets Group 1. 2-8 Octets In this case since we used a capturing group by putting our strings/expression in a parenthesis, Prometheus will know that it needs to treat it as a separate label, so it gives it a name. If you don\u2019t want to see unnamedLabels you can add a group name similarly to the direction group. E.g. you can use the following expression: (?P<packetType>(?:Octets|Errors|Discards)) Result: Match 1 Full match 2-8 Octets Group `packetType` 2-8 Octets Pre-defined dashboard The open-source community is really helpful and thanks to Be Smart Be Open and Vista Technology we have a pre-defined grafana dashboard for Arista devices which you can find here: https://grafana.com/dashboards/10222 You can download the dashboard as a JSON file and then import it in Grafana. Some of the graphs that you\u2019ll find in this dashboard: Aggregated traffic Traffic by interface CPU & Temperature Power levels Voltage levels Interface counters for individual interfaces Beware of https://github.com/grafana/grafana/issues/6888 In case you have modular devices or multilane interfaces, you cannot use a variable to match those interfaces for example with intf=\"$interface\" because Grafana will escape special characters, even if they were already escaped by Prometheus (it\u2019ll escape it again). So instead of Ethernet3\\\\/2 you\u2019ll have Ethernet3\\\\\\\\/2 and no data will be plotted. The workaround is to use regex matching by putting the tilda ( ~ ) character after the equal sign. rate(intfCounter{job=\"$deviceType\",instance=\"$device\",intf=~\"$interface\",type=\"Octets\"}[1m])*8 You can also use regex matching like below rate(intfCounter{job=\"$deviceType\",instance=\"$device\",intf=~\"Ethernet(.*\\\\/.*)?(.*)?\",type=\"Octets\"}[1m])*8 Using rule records in Prometheus for EOS paths Rule records allow you to precompute frequently needed expressions and save the result as a new set of time series. Querying this result will be much faster then executing the original expression and very useful for dashboards, which need to query the same expression repeatedly. One example would be to use the /Kernel/proc/stat/<pid>/comm as a value label and store the metrics in a new time series for the other items under that path. For more details on rule records, please visit the best practices and the configuration section on the official Prometheus website. In my example I\u2019ve recorded a rule for the rss key under /Kernel/proc/stat/<pid>/ Here\u2019s what TerminAttr is streaming under /Kernel/proc/stat curl localhost:6060/rest/Kernel/proc/stat/1 Output: { \"cguestTime\": 0, \"cmajflt\": 4399, \"cmdline\": \"/sbin/init\", \"cminflt\": 511393, \"comm\": \"systemd\", \"cstime\": 3802, \"cutime\": 10380, \"delayacctBlkioTicks\": 0, \"endcode\": 135520894, \"exitSignal\": 17, \"flags\": 4219136, \"guestTime\": 0, \"kstkeip\": 4151638626, \"kstkesp\": 4292454672, \"majflt\": 31, \"minflt\": 10592, \"name\": \"1\", \"nice\": 0, \"numThreads\": 1, \"pgrp\": 1, \"policy\": 0, \"ppid\": 0, \"priority\": 20, \"processor\": 3, \"rlim\": 18446744073709551615, \"rss\": 1553, \"rtPriority\": 0, \"session\": 1, \"startcode\": 134512640, \"startstack\": 4292456144, \"starttime\": 2, \"state\": 83, \"stime\": 374, \"tpgid\": -1, \"ttyNr\": 0, \"utime\": 601, \"vsize\": 8925184, \"wchan\": 18446744071580351996 } In my example I\u2019ve used the \u2018rss\u2019 key and similarly you can create a record for each key. Here\u2019s how the sample config looks like: Ocprometheus.yml on EOS On the switch, the yml file should look like this (note that I\u2019ve deleted the other paths just for testing purposes). # Subscriptions to OpenConfig paths. subscriptions: - /Kernel/proc # Prometheus metrics configuration. # If you use named capture groups in the path, they will be extracted into labels with the same name. # All fields are mandatory. metrics: - name: kernelprocrss path: /Kernel/proc/stat/(?P<pid>.+)/rss help: KernelProcRSS - name: kernelproc path: /Kernel/proc/stat/(?P<pid>.+)/comm help: KernelProcStat valuelabel: command defaultvalue: 1 On the Prometheus server, you\u2019ll need to add a rules file and edit your prometheus.yml to specify the path to that file. Prometheus.yml on the server You\u2019ll need to create another yml file for the rules and mention it in the prometheus.yml file under the rule_files key. cat prometheus.yml Output: # my global config global: scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute. evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute. # scrape_timeout is set to the global default (10s). # Alertmanager configuration alerting: alertmanagers: - static_configs: - targets: # - alertmanager:9093 # Load rules once and periodically evaluate them according to the # global 'evaluation_interval'. rule_files: # - \"first_rules.yml\" # - \"second_rules.yml\" - \"kernel_rules.yml\" # A scrape configuration containing exactly one endpoint to scrape: # Here it's Prometheus itself. scrape_configs: # The job name is added as a label `job=<job_name>` to any # timeseries scraped from this config. - job_name: 'prometheus' # metrics_path defaults to '/metrics' # scheme defaults to 'http'. static_configs: - targets: ['localhost:9090'] - job_name: 'arista' static_configs: - targets: ['192.0.2.140:8080','198.51.100.21:8080','192.0.2.132:8080','192.0.2.139:8080','192.0.2.138:8080'] Kernel_rules.yml on the server groups: - name: test rules: - record: kernelprocrsswithcommand expr: kernelprocrss * on(pid) group_right kernelproc Note, if you did not mount the kernel_rules.yml file when creating your docker container (as I did) you\u2019ll need to copy the file over to your container with the following command docker cp kernel_rules.yml eager_kapitsa:/etc/prometheus/ Checking on the GUI, it will give you the following results You can also use the expression from the kernel_rules.yml directly on the GUI After you create the records and update the yml files on the server, make sure you can see the rule created in the Status \u2013 Rules submenu Using ocprometheus with the OpenConfig/OCTA agent (management api gnmi) While ocprometheus can subscribe to EOS native paths provided by TerminAttr\u2019s gNMI server on TCP 6042 (default, can be changed), it can also subscribe to OpenConfig paths provided by the OpenConfig/OCTA agent\u2019s gnmi server on TCP 6030 (default, can be changed). For example to subscribe to interface counters the subscription and the metric path would look like below: subscriptions: - /interfaces/interface metrics: - name: intfCounter path: /interfaces/interface\\[name=(?P<intf>[^\\]]+)\\]/state/counters/(?P<countertype>.+) OpenConfig and EOS native paths can be mixed when using OCTA and in that case the origin must be specified. Since the default origin is openconfig, the origin has to be only specified for EOS native paths under the subscriptions key, e.g.: subscriptions: - /interfaces/interface - eos_native:/Kernel/proc Note On EOS 4.23+ it's highly recommended to use OCTA with ocprometheus and only use eos-native paths where an openconfig model does not exist. Example configurations No VRF - gnmi/OCTA + ocprometheus management api gnmi transport grpc def provider eos-native ! daemon ocprometheus exec /mnt/flash/ocprometheus -config /mnt/flash/ocprometheus.yml -addr localhost:6030 -username admin no shutdown VRF - gnmi/OCTA + ocprometheus management api gnmi transport grpc def vrf management provider eos-native ! daemon ocprometheus exec /sbin/ip netns exec ns-management /mnt/flash/ocprometheus -config /mnt/flash/ocprometheus.yml -addr localhost:6030 -username admin no shutdown Cert-based authentification with ocprometheus Follow the steps mentioned in Certificate Authentification Configuration page . Copy the client certificate and client key to the /persist/secure/ssl and /persist/secure/keys directory respectively. The EOS configuration should look like the following: management api gnmi transport grpc def ssl profile test-arista vrf MGMT provider eos-native ! management security ssl profile server certificate v1.crt key v1.key trust certificate demo-ca.crt ! daemon ocprometheus exec /sbin/ip netns exec ns-MGMT /usr/bin/ocprometheus -config /usr/bin/ocprometheus.yml -addr localhost:6030 -certfile /persist/secure/ssl/certs/gnmi-client.crt -keyfile /persist/secure/ssl/keys/gnmi-client.key -cafile /persist/secure/ssl/certs/demo-ca.crt no shutdown ! Troubleshooting tips Checking Logs and troubleshooting As any daemon/agent, logs are saved in /var/log/agents/ so we can either read those in bash with cat/more/less/vi/nano or from the CLI using the show agent logs command. Common issues Context_deadline_exceeded Seeing context_deadline_exceeded in the Targets section of the Prometheus GUI. This means connectivity is not established between the switch and the Prometheus server, which can be due to several reasons: TerminAttr and/or ocprometheus is not running TerminAttr and/or prometheus are not configured in the correct namespace/vrf Port 8080, which is used by default is not open on the switch (please check with netstat -an | grep 8080 or sudo ip netns exec ns-<vrf_name> netstat -an | grep 8080 if using a vrf; make sure the control plane ACL is updated and applied to vrf default or the specific vrf when using EOS version with CoPP Make sure TerminAttr is communicating with ocprometheus TerminAttr should have the -disableaaa flag added Not seeing any streams on Prometheus Check TerminAttr version (After TerminAttr 1.5.1 we replaced the deprecated gnmi.Value with gnmi.TypedValue ). This was only changed on our OpenConfig connectors (ockafka, ocprometheus, octsdb, ocredis, etc.) after March, 2019, thus older ocprometheus versions will ignore the updates. The version of ocprometheus that uses TypedValue as well was pushed to github on March 19th. A newer commit was done in the beginning of June to deal with coalesced deletes , and it\u2019s recommended to use the latest version. The best way to check if you are hitting any issues is to enable verbosity for ocprometheus with -v 9 ! daemon ocprometheus exec /sbin/ip netns exec ns-management /mnt/flash/ocprometheus -config /mnt/flash/ocprometheus20190319.yml -addr localhost:6042 -v 9 no shutdown ! In /var/log/agents/ocprometheus-<pid> you\u2019ll see error messages like below ( Ignoring incompatible update value ) : I0319 13:41:11.899488 5386 collector.go:77] Ignoring incompatible update value in path:<elem:<name:\"vsize\" > > val:<json_val:\"4505600\" > I0319 13:41:11.899518 5386 collector.go:77] Ignoring incompatible update value in path:<elem:<name:\"startstack\" > > val:<json_val:\"4289154048\" > I0319 13:41:11.899548 5386 collector.go:77] Ignoring incompatible update value in path:<elem:<name:\"kstkesp\" > > val:<json_val:\"0\" > I0319 13:41:11.899578 5386 collector.go:77] Ignoring incompatible update value in path:<elem:<name:\"exitSignal\" > > val:<json_val:\"17\" > I0319 13:41:11.899608 5386 collector.go:77] Ignoring incompatible update value in path:<elem:<name:\"state\" > > val:<json_val:\"83\" > I0319 13:41:11.899638 5386 collector.go:77] Ignoring incompatible update value in path:<elem:<name:\"cmajflt\" > > val:<json_val:\"0\" > I0319 13:41:11.899668 5386 collector.go:77] Ignoring incompatible update value in path:<elem:<name:\"priority\" > > val:<json_val:\"20\" > I0319 13:41:11.899698 5386 collector.go:77] Ignoring incompatible update value in path:<elem:<name:\"delayacctBlkioTicks\" > > val:<json_val:\"0\" > Make sure you\u2019re running the latest ocprometheus and TerminAttr versions. Broken paths due to incorrect regex Some of the subscription paths in the sample config file might not work on all type of devices. In case of broken paths, unfortunately we won\u2019t stream anything, and you might encounter a similar error as below when checking the metrics URL (http://x.x.x.x:8080/metrics) of a modular device: An error has occurred during metrics gathering: 17 error(s) occurred: * collected metric voltageSensor label:<name:\"sensor\" value:\"21\" > label:<name:\"unnamedLabel2\" value:\"voltage\" > gauge:<value:1.040771484375 > was collected before with the same name and label values * collected metric voltageSensor label:<name:\"sensor\" value:\"22\" > label:<name:\"unnamedLabel2\" value:\"voltage\" > gauge:<value:0.996826171875 > was collected before with the same name and label values * collected metric voltageSensor label:<name:\"sensor\" value:\"12\" > label:<name:\"unnamedLabel2\" value:\"voltage\" > gauge:<value:11.93359375 > was collected before with the same name and label values This can happen if the regexp matching is incorrect. The regexp path in question is: /Sysdb/environment/archer/power/status/voltageSensor/(?:cell/.+|system)/(?P<sensor>.+)/(voltage) This would match on VoltageSensorX , however if you check the list of voltage sensors using curl, you\u2019ll see that the sensors have the following format: VoltageSensorX/Y $ curl localhost:6060/rest/Sysdb/environment/archer/power/status/voltageSensor/cell/1/ { \"VoltageSensor1/12\": { \"_ptr\": \"/Sysdb/environment/archer/power/status/voltageSensor/cell/1/VoltageSensor1/12\" }, \"VoltageSensor1/13\": { \"_ptr\": \"/Sysdb/environment/archer/power/status/voltageSensor/cell/1/VoltageSensor1/13\" }, \"VoltageSensor1/14\": { \"_ptr\": \"/Sysdb/environment/archer/power/status/voltageSensor/cell/1/VoltageSensor1/14\" }, You can validate your regular expression using a regexp app (e.g www.regex101.com ): As you can see we are only matching VoltageSensorX To correct the issue, we can use the following path instead: /Sysdb/environment/archer/power/status/voltageSensor/(?:cell/.+|system)/(?P<sensor>VoltageSensor.+)/(voltage) As you can see, we are able to match on both VoltageSensorX and VoltageSensorX/Y . Authentication failed When you see the following message, it means that ocprometheus is not able to connect to the gRPC server that TerminAttr/OpenConfig/OCTA is serving, either because the disableaaa flag is not specified in the TerminAttr config (in case of using TerminAttr) or the username and password strings are incorrect in the ocprometheus config. cat ocprometheus-11069 ===== Output from /sbin/ip ['netns', 'exec', 'ns-management', '/mnt/flash/ocprometheus', '-config', '/mnt/flash/ocprometheus.yml', '-addr', 'localhost:6042'] (PID=11069) started Jun 17 11:27:35.313690 === F0617 11:27:35.449652 11069 main.go:90] rpc error: code = Unauthenticated desc = Authentication failed Connection refused You might see the following error: cat ocprometheus-10314 ===== Output from /sbin/ip ['netns', 'exec', 'ns-management', '/mnt/flash/ocprometheus', '-config', '/mnt/flash/ocprometheus.yml', '-addr', 'localhost:6042'] (PID=10314) started Jun 17 11:21:05.494319 === F0617 11:21:05.533516 10314 main.go:90] rpc error: code = Unavailable desc = all SubConns are in TransientFailure, latest connection error: connection error: desc = \"transport: Error while dialing dial tcp 127.0.0.1:6042: connect: connection refused\" When you get connection refused, it means that the gRPC server is not reachable. In this case ocprometheus is executed in the management VRF, however TerminAttr is running in the default VRF and the gRPC server by default is running in the default VRF too. To fix it you can configure the gRPC server in the correct VRF: in case of TerminAttr using -grpcaddr <vrf>/<IP>:<port> : -grpcaddr management/0.0.0.0:6042 in case of using OpenConfig/OCTA: management api gnmi transport grpc management vrf management provider eos-native Subscription paths You can find sample configuration files on our github page in the sample_configs directory, which contains per-platform EOS-native path examples but also OpenConfig path examples which are standard across all platforms in the ocprometheus_gnmi_4.23.yaml In this file, which is referred with the -config /mnt/flash/ocprometheus.yml flag and config file in the daemon ocprometheus configuration, you can add your desired Sysdb paths More examples (per platform + gnmi paths) can be found in the sample_configs folder. Commonly used paths: MAC table: /Smash/bridging/status/smashFdbStatus ARP table: /Smash/arp/status/arpEntry Neighbor table: /Smash/arp/status/neighborEntry IPv4 RIB: /Smash/routing/status/route IPv6 RIB: /Smash/routing6/status/route IPv4 next-hop table: /Smash/routing/status/nexthop IPv6 next-hop table: /Smash/routing6/status/nexthop CPU info: /Kernel/proc/cpu Process statistics: /Kernel/proc/stat System info: /Kernel/sysinfo Interface counters: /Smash/counters/ethIntf/<agent>/current/counter For details about subscription paths and metric path structures please visit: https://eos.arista.com/understanding-subscription-paths-for-open-source-telemetry-streaming Useful links https://prometheus.io/docs/prometheus/ https://grafana.com/docs/ http://docs.grafana.org/installation/docker/ https://grafana.com/dashboards https://fpm.readthedocs.io/en/latest/installing.html https://regex101.com/","title":"ocprometheus"},{"location":"telemetry/adapters/ocprometheus/#introduction","text":"Prometheus is one of the most popular open-source monitoring and alerting systems, which scrapes and stores numeric time series data over HTTP. It has a very flexible query language, can send alerts via alertmanager to various platform and can be integrated easily with many open-source tools. For more details and use cases, please visit https://prometheus.io/docs/introduction/overview/ . The purpose of this article is to show how easy it is to deploy and configure Prometheus and Grafana and configure Arista switches to send telemetry states to Prometheus using TerminAttr ( EOS streaming telemetry agent ) and one of the OpenConfig connectors that you can find on our official github page. Please note, that these apps were written as proof-of-concept and are supported on a best-effort basis. The projects can be forked and modified to suit your needs. Feedbacks are always welcomed and issues can be filed like for any other projects on github.","title":"Introduction"},{"location":"telemetry/adapters/ocprometheus/#prerequisites","text":"The following tools will be necessary to be able to install Prometheus and Grafana, clone our project from github and compile ocprometheus. Homebrew (for macOS users) Go Git docker","title":"Prerequisites"},{"location":"telemetry/adapters/ocprometheus/#installing-prometheus-and-grafana","text":"There are several ways to install Prometheus and Grafana, the docker approach being the most popular and easiest.","title":"Installing Prometheus and Grafana"},{"location":"telemetry/adapters/ocprometheus/#installing-prometheus","text":"First, create a minimal Prometheus configuration file on the host filesystem at ~/prometheus.yml : vi ~/prometheus.yml Add your targets (network devices IP/hostname + port number) to the \u2018scrape configs\u2019 session Example prometheus.yml # my global config global: scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute. evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute. # scrape_timeout is set to the global default (10s). # Alertmanager configuration alerting: alertmanagers: - static_configs: - targets: # - alertmanager:9093 # Load rules once and periodically evaluate them according to the global 'evaluation_interval'. rule_files: # - \"first_rules.yml\" # - \"second_rules.yml\" # A scrape configuration containing exactly one endpoint to scrape: # Here it's Prometheus itself. scrape_configs: # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config. - job_name: 'prometheus' # metrics_path defaults to '/metrics' # scheme defaults to 'http'. static_configs: - targets: ['localhost:9090'] - job_name: 'arista' static_configs: - targets: ['192.0.2.139:8080'] Start the Prometheus Docker container with an external configuration file: docker run -d \\ -p 9090:9090 -v ~/prometheus.yml:/etc/prometheus/prometheus.yml \\ prom/prometheus \\ -config.file=/etc/prometheus/prometheus.yml If the above doesn\u2019t work, check the latest docker command on the official Prometheus website . docker run \\ -p 9090:9090 \\ -v /tmp/prometheus.yml:/etc/prometheus/prometheus.yml \\ prom/prometheus","title":"Installing Prometheus"},{"location":"telemetry/adapters/ocprometheus/#add-new-targets","text":"In our case, targets are switches, but a target can be any type of device. By default if you are adding new targets by editing the prometheus.yml file on the host, it won\u2019t update the config file in the Docker VM, that is because every time you insert new characters with VIM and save the file, the inode will change.","title":"Add new targets"},{"location":"telemetry/adapters/ocprometheus/#option-1","text":"Change the file permission to 664 ( rw-rw-r\u2013 ) chmod 664 prometheus.yml Check if the permissions have been changed ls -l prometheus.yml -rw-rw-r-- 1 root root 1076 May 14 12:25 prometheus.yml This will modify the file in your docker VM as well, but the configuration won\u2019t be updated until you restart the service, which you can do with a one-liner: sudo docker exec -i -t eager_kapitsa kill -HUP 1 Where eager_kapitsa is the name of the container, which you can find out with the docker ps command: root@tac-prometheus-ire:~# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 47f52778b492 prom/prometheus \"/bin/prometheus --c\u2026\" 13 days ago Up 6 minutes 0.0.0.0:9090->9090/tcp eager_kapitsa 3e880f9a951e grafana/grafana \"/run.sh\" 3 weeks ago Up 3 weeks 0.0.0.0:3000->3000/tcp grafana You can always check if the configuration has been updated with the following curl command: root@tac-prometheus-ire:~# curl localhost:9090/config <ommited> static_configs: - targets: - 192.0.2.132:8080 - 192.0.2.139:8080 - 10.83.12.109:8080 - 192.0.2.138:8080 <ommited> Forum that explains this behavior .","title":"Option 1"},{"location":"telemetry/adapters/ocprometheus/#option-2","text":"NOTE If you don\u2019t want to change the file permission, you can use the :set backupcopy=yes option in VIM, which will make sure to not change the inode of the file when saving it. And restart the service again: sudo docker exec -i -t eager_kapitsa kill -HUP 1","title":"Option 2"},{"location":"telemetry/adapters/ocprometheus/#option-3","text":"Use the \u2013web.enable-lifecycle flag when running the container.","title":"Option 3"},{"location":"telemetry/adapters/ocprometheus/#installing-grafana","text":"You can use the following docker command to deploy Grafana in couple of seconds: $ docker run \\ -d \\ -p 3000:3000 \\ --name=grafana \\ -e \"GF_SERVER_ROOT_URL=http://grafana.server.name\" \\ -e \"GF_SECURITY_ADMIN_PASSWORD=secret\" \\ grafana/grafana Note: In newer versions of Grafana there are no more implicit volumes for /var/lib/grafana /var/log/grafana /etc/grafana For more details see what\u2019s new in Grafana 5.1 and later and recommended steps to migrate from older releases. There\u2019s also a ready-to-go combo of Prometheus/Grafana/docker-stack which you can find at https://github.com/vegasbrianc/prometheus (credit to Brian Christner) Now that we have Prometheus and Grafana running, we\u2019re ready to configure our switches and start drawing nice graphs from the queried data.","title":"Installing Grafana"},{"location":"telemetry/adapters/ocprometheus/#installing-and-configuring-ocprometheus","text":"There are a couple of ways to install ocprometheus, and all require for you to compile it with GO.","title":"Installing and configuring ocprometheus"},{"location":"telemetry/adapters/ocprometheus/#git-clone-the-arista-go-library","text":"First you\u2019ll need to git clone the goarista repository. tamas:~ tamas$ git clone https://github.com/aristanetworks/goarista.git Cloning into 'goarista'... remote: Counting objects: 2584, done. remote: Compressing objects: 100% (10/10), done. remote: Total 2584 (delta 1), reused 2 (delta 0), pack-reused 2574 Receiving objects: 100% (2584/2584), 945.38 KiB | 767.00 KiB/s, done. Resolving deltas: 100% (1529/1529), done. Checking connectivity... done. This will download all the files from that github page and we can then go ahead and compile ocprometheus. LPT In case the project you\u2019ve cloned has dependencies on other git project you can use the \u2013recurse-submodules flag while cloning which will also clone the submodules. E.g.: git clone --recurse-submodules -j8 git://github.com/foo/bar.git","title":"Git Clone the Arista GO library"},{"location":"telemetry/adapters/ocprometheus/#compile-ocprometheus-in-go","text":"1. Go to your ocprometheus folder on your PC/laptop/server cd git/goarista/cmd/ocprometheus 2. Compile ocprometheus with the following paramethers: GOOS=linux GOARCH=386 go build 3. Copy the binary with SCP to the switch scp ocprometheus admin@192.0.2.139://mnt/flash Since EOS has a linux kernel, the OS has to be set to linux and the architecture to 32 bit (386) with GOOS and GOARCH variables respectively. Starting 4.22.0 we\u2019ve introduced a 64-bit EOS () and you can also compile ocprometheus for 64-bit architecture with the following command: GOOS=linux GOARCH=amd64 go build","title":"Compile ocprometheus in GO"},{"location":"telemetry/adapters/ocprometheus/#option-1-using-the-binary","text":"From this point you can just SCP the binary to a persistent storage on the switch (e.g. /mnt/flash/ ) and just configure the daemon and point it to /mnt/flash/ocprometheus","title":"Option 1) Using the binary"},{"location":"telemetry/adapters/ocprometheus/#option-2-install-it-as-a-swix","text":"You can also install it as a swix, which requires a bit more effort, however it\u2019s easier to manage swix packages, and you\u2019ll be able to see the ocprometheus extension in the show extensions output. In order to create a swix file, we first have to compile this binary as an RPM. Building RPMs can be tedious, especially for networking guys, who are not used to doing things like this. There are various tutorials online on how to use rpmbuild, but instead of wasting half an hour to create all the necessary folders and your spec file, etc we can create RPMs with just one line, using FPM (Effing Package Management). You can download FPM from the following github page: https://github.com/jordansissel/fpm ( credit to Jordan and all the people who contributed to this project \u2013 you\u2019ve made our lives easier! Thanks!) The following was done on a Devuan VM ( which is basically a lightweight Debian without systemd ) using the following steps: 1. Create a new folder: mkdir fpmbuild 2. Copy the compiled ocprometheus and the sampleconfig.yml (in this example it was renamed to ocprometheus.yml ) downloaded from github: cp ~/git/goarista/cmd/ocprometheus/ocprometheus /backup/fpmbuild/ cp ~/git/goarista/cmd/ocprometheus/sampleconfig_above_4.20.yml /backup/fpmbuild/ocprometheus.yml 3. Compile it with fpm: This one liner will create the RPM package without the need to create all the folders and specs that you\u2019d need to do with the usual rpmbuild: sudo fpm -s dir -t rpm -a all -n \"ocprometheus-$(date +%m_%d.%H%M)\" \\ -v1.5.6 --prefix /usr/bin/ \\ -C /backup/fpmbuild/ ocprometheus ocprometheus.yml","title":"Option 2) Install it as a swix"},{"location":"telemetry/adapters/ocprometheus/#flags-cheat-sheet","text":"Flag Description -s dir Source is a directory -t rpm Target is an RPM file -a all User noarch instead of x86_64 -n \u201cocprometheus-$(date +%m_%d.%H%M)\u201c the name of the RPM -v 1.5.5 the version of the RPM will be 1.0 \u2013prefix /usr/bin/ The files will be installed in this directory -C /backup/fpmbuild/ ocprometheus ocprometheus.yml Change directory to here before searching for files 4. Copy the generated file to the switch and install it as a swix: root@devuan:/backup# ls -al ocpr* -rw-r--r-- 1 root root 6462872 Jun 17 22:55 oocprometheus-06_17.2255-1.5.6-1.noarch.rpm root@devuan:/backup# scp ocprom* admin@ats323://mnt/flash/ 4.1. SSH to the switch and create the swix, e.g.: ssh admin@ats323 ats323...16:13:36# bash Arista Networks EOS shell [admin@ats323 ~]$ cd /mnt/flash [admin@ats323 flash]$ swix create ocprometheus-1.5.6.swix ocprometheus-06_17.2255-1.5.6-1.noarch.rpm adding: manifest.txt (stored 0%) adding: ocprometheus-06_17.2255-1.5.6-1.noarch.rpm (stored 0%) 4.2. Install it as a swix extension copy flash:ocprometheus-1.5.6.swix extension: extension ocprometheus-1.5.6.swix 4.3. Make it persistent across reloads copy installed-extensions boot-extensions 4.4. Check your extensions show extensions Name Version/Release Status Extension ------------------------------- -------------------- ----------- --------- TerminAttr-1.5.5-1.swix v1.5.5/1 A, I 25 ocprometheus-1.5.6.swix 1.5.6/1 A, I 1 A: available | NA: not available | I: installed | NI: not installed | F: forced Finally you\u2019ll need to copy the configuration file, which contains the subscription paths. You\u2019ll find the yaml file on our github page. You can find more details about subscriptions/metrics and how they are constructed in https://eos.arista.com/understanding-subscription-paths-for-open-source-telemetry-streaming For macOS it\u2019ll be similar with few modifications (tested on macOS Mojave and newer): 1. Install FPM and RPM brew install gnu-tar gem install --no-ri --no-rdoc fpm brew install rpm Note: on macOS Catalina you might need to use \u2013user-install when installing gem packages, and instead of \u2013no-rdoc use \u2013no-document . Xcode might need to be reinstalled if you\u2019ve upgraded from Mojave. e.g. gem install --no-document fpm --user-install 2. Similarly as before, create a folder from where you\u2019ll build your package and copy the compiled binary there mkdir fpmbuild cp ~/git/goarista/cmd/ocprometheus/ocprometheus ~/backup/fpmbuild/ cp ~/git/goarista/cmd/ocprometheus/sampleconfig_above_4.20.yml ~/backup/fpmbuild/ocprometheus.yml 3. Build the rpm with fpm using the following command sudo fpm -s dir -t rpm -a noarch --rpm-os linux \\ -n \"ocprometheus-$(date +%m_%d.%H%M)\" -v1.5.6 \\ --prefix /usr/bin/ -C ~/backup/fpmbuild/ ocprometheus ocprometheus.yml The only difference when using macOS to build your rpm using fpm is that you\u2019ll need to add the \u2013rpm-os linux flag, otherwise it\u2019ll build the rpm for OSX. Note: If you are using CVP and maintain your images and extensions with Image bundles, you\u2019ll have to add your ocprometheus.swix to Image bundles, otherwise they\u2019ll get removed during an image push operation. Now it\u2019s time to configure TerminAttr and ocprometheus.","title":"Flags cheat sheet"},{"location":"telemetry/adapters/ocprometheus/#sample-eos-configuration","text":"Here\u2019s a sample config for pre EOS-4.19 and post EOS-4.20.7M (CP-ACL) when using VRF MGMT ! vrf instance MGMT ! interface Management1 vrf forwarding MGMT ip address 192.168.58.16/24 ! system control-plane ip access-group def2 in ip access-group def2 vrf MGMT in ! daemon TerminAttr exec /usr/bin/TerminAttr -disableaaa -grpcaddr MGMT/0.0.0.0:6042 no shutdown ! daemon ocprometheus exec /sbin/ip netns exec ns-MGMT /usr/bin/ocprometheus -config /usr/bin/ocprometheus.yml -addr localhost:6042 no shutdown ! You\u2019ll need at least 3 things to configure ocprometheus: Location of the binary Location of the config file, configured by the -config flag gNMI socket of TerminAttr, which can be specified by the -addr flag TerminAttr is running a gRPC server locally on TCP 6042 , which you can check by looking at the logs: bash cat /var/log/agents/TerminAttr-`pidof TerminAttr` NOTE: when installing ocprometheus as a swix file, the binary will be put in /usr/bin directory by default (you can change that in the RPM making process). If you compile it in go and copy it to flash you can just change that daemon config to refer to that path (this way it won\u2019t be installed as a swix). e.g. daemon ocprometheus exec /sbin/ip netns exec ns-MGMT /usr/bin/ocprometheus -config /usr/bin/ocprometheus.yml -addr localhost:6042 no shutdown By default in EOS versions that have control-plane ACL we need to permit TCP port 8080 (default), or whichever port you decide to use to send data to the Prometheus server (defined in the targets list in prometheus.yml ) ip access-list def2 9 permit tcp any any eq 8080 10 permit icmp any any 20 permit ip any any tracked 30 permit udp any any eq bfd ttl eq 255 40 permit udp any any eq bfd-echo ttl eq 254 50 permit udp any any eq multihop-bfd 60 permit udp any any eq micro-bfd 70 permit ospf any any 80 permit tcp any any eq ssh telnet www snmp bgp https msdp ldp netconf-ssh gnmi 90 permit udp any any eq bootps bootpc snmp rip ntp ldp 100 permit tcp any any eq mlag ttl eq 255 110 permit udp any any eq mlag ttl eq 255 120 permit vrrp any any 130 permit ahp any any 140 permit pim any any 150 permit igmp any any 160 permit tcp any any range 5900 5910 170 permit tcp any any range 50000 50100 180 permit udp any any range 51000 51100 190 permit tcp any any eq 3333 200 permit tcp any any eq nat ttl eq 255 210 permit tcp any eq bgp any 220 permit rsvp any any To check if the port is open you can use netstat , e.g.: netstat -an | grep :8080 Or the network namespace command if VRF is used sudo ip netns exec ns-MGMT netstat -an | grep :8080 You should see a similar output as below: $ sudo netstat -tulnap | grep :8080 tcp6 0 0 :::8080 :::* LISTEN 17200/ocprometheus tcp6 0 0 172.28.160.232:8080 192.0.2.78:48956 ESTABLISHED 17200/ocprometheus Or in case of using a VRF: $ sudo ip netns exec ns-management netstat -tulnap | grep :8080 tcp6 0 0 :::8080 :::* LISTEN 12344/ocprometheus tcp6 0 0 192.0.2.139:8080 192.0.2.78:40820 ESTABLISHED 12344/ocprometheus Don\u2019t be confused if you see tcp6 in the output, that\u2019s expected, as AF_INET6 works for both IPv4 and IPv6 as per RFC 3493 . Note: The same configuration is used but no control-plane ACL for 4.20.7M > EOS >4.19 or in newer releases where EOS-PDP.swi is used, and you\u2019ll need to allow the Prometheus server IP using -allowed_ips=<IP/subnet> Here are some of the configuration combinations that you might have:","title":"Sample EOS Configuration"},{"location":"telemetry/adapters/ocprometheus/#no-vrf-and-streaming-to-both-cvp-and-prometheus","text":"! daemon TerminAttr exec /usr/bin/TerminAttr -ingestgrpcurl=192.0.2.33:9910 -cvcompression=gzip -taillogs -ingestauth=key,mysecretkey -smashexcludes=ale,flexCounter,hardware,kni,pulse,strata -ingestexclude=/Sysdb/cell/1/agent,/Sysdb/cell/2/agent -disableaaa no shutdown ! daemon ocprometheus exec /usr/bin/ocprometheus -config /usr/bin/ocprometheus.yml -addr localhost:6042 no shutdown !","title":"No VRF and streaming to both CVP and Prometheus"},{"location":"telemetry/adapters/ocprometheus/#no-vrf-and-only-prometheus","text":"! daemon TerminAttr exec /usr/bin/TerminAttr -disableaaa no shutdown ! daemon ocprometheus exec /usr/bin/ocprometheus -config /usr/bin/ocprometheus.yml -addr localhost:6042 no shutdown !","title":"No VRF and only Prometheus"},{"location":"telemetry/adapters/ocprometheus/#vrf-management-and-streaming-to-both-cvp-and-prometheus","text":"! daemon TerminAttr exec /usr/bin/TerminAttr -ingestgrpcurl=192.0.2.79:9910 -cvcompression=gzip -taillogs -ingestvrf=management -ingestauth=key,mysecretkey -smashexcludes=ale,flexCounter,hardware,kni,pulse,strata -ingestexclude=/Sysdb/cell/1/agent,/Sysdb/cell/2/agent -disableaaa -grpcaddr management/0.0.0.0:6042 no shutdown ! daemon ocprometheus exec /sbin/ip netns exec ns-management /usr/bin/ocprometheus -config /usr/bin/ocprometheus.yml -addr localhost:6042 no shutdown !","title":"VRF management and streaming to both CVP and Prometheus"},{"location":"telemetry/adapters/ocprometheus/#vrf-and-only-prometheus","text":"! daemon TerminAttr exec /usr/bin/TerminAttr -disableaaa -grpcaddr management/0.0.0.0:6042 no shutdown ! daemon ocprometheus exec /sbin/ip netns exec ns-management /usr/bin/ocprometheus -config /usr/bin/ocprometheus.yml -addr localhost:6042 no shutdown !","title":"VRF and only Prometheus"},{"location":"telemetry/adapters/ocprometheus/#vrf-and-only-prometheus-using-authentication","text":"! daemon TerminAttr exec /usr/bin/TerminAttr -grpcaddr management/0.0.0.0:6042 no shutdown ! daemon ocprometheus exec /sbin/ip netns exec ns-management /usr/bin/ocprometheus -config /usr/bin/ocprometheus.yml -addr localhost:6042 -username=cvpadmin -password=arista no shutdown !","title":"VRF and only Prometheus using authentication"},{"location":"telemetry/adapters/ocprometheus/#pdp-vrf-and-only-prometheus","text":"! daemon TerminAttr exec /usr/bin/TerminAttr -disableaaa -grpcaddr management/0.0.0.0:6042 -allowed_ips=192.0.2.78/32 no shutdown ! daemon ocprometheus exec /sbin/ip netns exec ns-management /usr/bin/ocprometheus -config /usr/bin/ocprometheus.yml -addr localhost:6042 no shutdown ! The minimum required flags for TerminAttr are: disableaaa : Disable AAA checking \u2013 all AAA requests pass (in case username/password is not used in ocprometheus) grpcaddr string VRF and address to listen on to serve data using the gNMI interface. The expected form is [<vrf-name>/]address:port (default 127.0.0.1:6042 ) After configuring our switches we can head over to Grafana and start drawing our graphs!","title":"PDP: VRF and only Prometheus"},{"location":"telemetry/adapters/ocprometheus/#creating-dashboards-in-grafana","text":"First you\u2019ll need to add Prometheus as a data source, to be able to graph streamed data to Prometheus. You can do this by using the following steps: 1. Go to Configuration (gear icon) / Data Sources 2. Add data source and select Prometheus 3. Fill out the form (add the URL for the Prometheus server e.g.: http://myprometheus.com:9090/ It should look like this: 4. Save & Test 5. Now we can create our dashboard ( + button on the left) 6. Add query 7. Make sure you have \u2018Prometheus\u2019 selected as Data Source After selecting \u2018prometheus\u2019 you will be able to add expressions like \u2018intfCounter\u2019 , \u2018tempSensor\u2019, etc. defined in the ocprometheus config yaml file. 8. After adding \u2018intfCounter\u2019 to the query, it\u2019ll start plotting the counters for all the interfaces and all the devices that Prometheus is polling 9. Save the dashboard Finally: you can add as many dashboards you want you can add more expression on a single graph you can choose one line on the graph and it will show the graph for only that line (e.g. in interface counters you can choose a specific interface to look at the counters for)","title":"Creating dashboards in Grafana"},{"location":"telemetry/adapters/ocprometheus/#how-to-graph-data-only-for-specific-interface","text":"We can add filters to the queries in both Prometheus console or in grafana, e.g. if I want to see data for interface Ethernet24 I\u2019d use the following filter: intfCounter{intf=\u201dEthernet24\u2033} You can filter based on any of the labels defined in the config file (some of them are unnamed, but you can add a name to those capturing/non-capturing groups inside the config file on EOS). Some of the paths contains capturing groups that are not named, and Prometheus will give them a name in the following format: unnamedLabelX For example, for interface counters on a 7160 device I have the following path: /Smash/counters/ethIntf/XpCounters/current/(counter)/(?P<intf>.+)/statistics/(?P<direction>(?:in|out))(Octets|Errors|Discards) From the above path you can see for example that the direction of the packets is captured in a named capturing group that also contains a non-capturing group: (?P<direction>(?:in|out)) Named capturing groups can be created with ?P<name> . We don\u2019t need to capture a separate group for in|out as we already do it with the named capturing group of direction, so we can use a non-capturing group with ?: Explanation: Named Capture Group: direction (?P<direction>(?:in|out)) Non-capturing group (?:in|out) 1st Alternative in in matches the characters in literally (case sensitive) 2nd Alternative out out matches the characters out literally (case sensitive) Match for inOctets will be divided like this: Match 1 Full match 0-8 inOctets Group `direction` 0-2 in Group 2. 2-8 Octets If we wouldn\u2019t use non-capturing group for in|out the result will be the following Match 1 Full match 0-8 inOctets Group `direction` 0-2 in Group 2. 0-2 in Group 3. 2-8 Octets Notice the extra group for matching in . Now for (Octets|Errors|Discards) there is no name defined, so the result will be Match 1 Full match 2-8 Octets Group 1. 2-8 Octets In this case since we used a capturing group by putting our strings/expression in a parenthesis, Prometheus will know that it needs to treat it as a separate label, so it gives it a name. If you don\u2019t want to see unnamedLabels you can add a group name similarly to the direction group. E.g. you can use the following expression: (?P<packetType>(?:Octets|Errors|Discards)) Result: Match 1 Full match 2-8 Octets Group `packetType` 2-8 Octets","title":"How to graph data only for specific interface?"},{"location":"telemetry/adapters/ocprometheus/#pre-defined-dashboard","text":"The open-source community is really helpful and thanks to Be Smart Be Open and Vista Technology we have a pre-defined grafana dashboard for Arista devices which you can find here: https://grafana.com/dashboards/10222 You can download the dashboard as a JSON file and then import it in Grafana. Some of the graphs that you\u2019ll find in this dashboard: Aggregated traffic Traffic by interface CPU & Temperature Power levels Voltage levels Interface counters for individual interfaces Beware of https://github.com/grafana/grafana/issues/6888 In case you have modular devices or multilane interfaces, you cannot use a variable to match those interfaces for example with intf=\"$interface\" because Grafana will escape special characters, even if they were already escaped by Prometheus (it\u2019ll escape it again). So instead of Ethernet3\\\\/2 you\u2019ll have Ethernet3\\\\\\\\/2 and no data will be plotted. The workaround is to use regex matching by putting the tilda ( ~ ) character after the equal sign. rate(intfCounter{job=\"$deviceType\",instance=\"$device\",intf=~\"$interface\",type=\"Octets\"}[1m])*8 You can also use regex matching like below rate(intfCounter{job=\"$deviceType\",instance=\"$device\",intf=~\"Ethernet(.*\\\\/.*)?(.*)?\",type=\"Octets\"}[1m])*8","title":"Pre-defined dashboard"},{"location":"telemetry/adapters/ocprometheus/#using-rule-records-in-prometheus-for-eos-paths","text":"Rule records allow you to precompute frequently needed expressions and save the result as a new set of time series. Querying this result will be much faster then executing the original expression and very useful for dashboards, which need to query the same expression repeatedly. One example would be to use the /Kernel/proc/stat/<pid>/comm as a value label and store the metrics in a new time series for the other items under that path. For more details on rule records, please visit the best practices and the configuration section on the official Prometheus website. In my example I\u2019ve recorded a rule for the rss key under /Kernel/proc/stat/<pid>/ Here\u2019s what TerminAttr is streaming under /Kernel/proc/stat curl localhost:6060/rest/Kernel/proc/stat/1 Output: { \"cguestTime\": 0, \"cmajflt\": 4399, \"cmdline\": \"/sbin/init\", \"cminflt\": 511393, \"comm\": \"systemd\", \"cstime\": 3802, \"cutime\": 10380, \"delayacctBlkioTicks\": 0, \"endcode\": 135520894, \"exitSignal\": 17, \"flags\": 4219136, \"guestTime\": 0, \"kstkeip\": 4151638626, \"kstkesp\": 4292454672, \"majflt\": 31, \"minflt\": 10592, \"name\": \"1\", \"nice\": 0, \"numThreads\": 1, \"pgrp\": 1, \"policy\": 0, \"ppid\": 0, \"priority\": 20, \"processor\": 3, \"rlim\": 18446744073709551615, \"rss\": 1553, \"rtPriority\": 0, \"session\": 1, \"startcode\": 134512640, \"startstack\": 4292456144, \"starttime\": 2, \"state\": 83, \"stime\": 374, \"tpgid\": -1, \"ttyNr\": 0, \"utime\": 601, \"vsize\": 8925184, \"wchan\": 18446744071580351996 } In my example I\u2019ve used the \u2018rss\u2019 key and similarly you can create a record for each key. Here\u2019s how the sample config looks like:","title":"Using rule records in Prometheus for EOS paths"},{"location":"telemetry/adapters/ocprometheus/#ocprometheusyml-on-eos","text":"On the switch, the yml file should look like this (note that I\u2019ve deleted the other paths just for testing purposes). # Subscriptions to OpenConfig paths. subscriptions: - /Kernel/proc # Prometheus metrics configuration. # If you use named capture groups in the path, they will be extracted into labels with the same name. # All fields are mandatory. metrics: - name: kernelprocrss path: /Kernel/proc/stat/(?P<pid>.+)/rss help: KernelProcRSS - name: kernelproc path: /Kernel/proc/stat/(?P<pid>.+)/comm help: KernelProcStat valuelabel: command defaultvalue: 1 On the Prometheus server, you\u2019ll need to add a rules file and edit your prometheus.yml to specify the path to that file.","title":"Ocprometheus.yml on EOS"},{"location":"telemetry/adapters/ocprometheus/#prometheusyml-on-the-server","text":"You\u2019ll need to create another yml file for the rules and mention it in the prometheus.yml file under the rule_files key. cat prometheus.yml Output: # my global config global: scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute. evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute. # scrape_timeout is set to the global default (10s). # Alertmanager configuration alerting: alertmanagers: - static_configs: - targets: # - alertmanager:9093 # Load rules once and periodically evaluate them according to the # global 'evaluation_interval'. rule_files: # - \"first_rules.yml\" # - \"second_rules.yml\" - \"kernel_rules.yml\" # A scrape configuration containing exactly one endpoint to scrape: # Here it's Prometheus itself. scrape_configs: # The job name is added as a label `job=<job_name>` to any # timeseries scraped from this config. - job_name: 'prometheus' # metrics_path defaults to '/metrics' # scheme defaults to 'http'. static_configs: - targets: ['localhost:9090'] - job_name: 'arista' static_configs: - targets: ['192.0.2.140:8080','198.51.100.21:8080','192.0.2.132:8080','192.0.2.139:8080','192.0.2.138:8080']","title":"Prometheus.yml on the server"},{"location":"telemetry/adapters/ocprometheus/#kernel_rulesyml-on-the-server","text":"groups: - name: test rules: - record: kernelprocrsswithcommand expr: kernelprocrss * on(pid) group_right kernelproc Note, if you did not mount the kernel_rules.yml file when creating your docker container (as I did) you\u2019ll need to copy the file over to your container with the following command docker cp kernel_rules.yml eager_kapitsa:/etc/prometheus/ Checking on the GUI, it will give you the following results You can also use the expression from the kernel_rules.yml directly on the GUI After you create the records and update the yml files on the server, make sure you can see the rule created in the Status \u2013 Rules submenu","title":"Kernel_rules.yml on the server"},{"location":"telemetry/adapters/ocprometheus/#using-ocprometheus-with-the-openconfigocta-agent-management-api-gnmi","text":"While ocprometheus can subscribe to EOS native paths provided by TerminAttr\u2019s gNMI server on TCP 6042 (default, can be changed), it can also subscribe to OpenConfig paths provided by the OpenConfig/OCTA agent\u2019s gnmi server on TCP 6030 (default, can be changed). For example to subscribe to interface counters the subscription and the metric path would look like below: subscriptions: - /interfaces/interface metrics: - name: intfCounter path: /interfaces/interface\\[name=(?P<intf>[^\\]]+)\\]/state/counters/(?P<countertype>.+) OpenConfig and EOS native paths can be mixed when using OCTA and in that case the origin must be specified. Since the default origin is openconfig, the origin has to be only specified for EOS native paths under the subscriptions key, e.g.: subscriptions: - /interfaces/interface - eos_native:/Kernel/proc Note On EOS 4.23+ it's highly recommended to use OCTA with ocprometheus and only use eos-native paths where an openconfig model does not exist.","title":"Using ocprometheus with the OpenConfig/OCTA agent (management api gnmi)"},{"location":"telemetry/adapters/ocprometheus/#example-configurations","text":"","title":"Example configurations"},{"location":"telemetry/adapters/ocprometheus/#no-vrf-gnmiocta-ocprometheus","text":"management api gnmi transport grpc def provider eos-native ! daemon ocprometheus exec /mnt/flash/ocprometheus -config /mnt/flash/ocprometheus.yml -addr localhost:6030 -username admin no shutdown","title":"No VRF - gnmi/OCTA + ocprometheus"},{"location":"telemetry/adapters/ocprometheus/#vrf-gnmiocta-ocprometheus","text":"management api gnmi transport grpc def vrf management provider eos-native ! daemon ocprometheus exec /sbin/ip netns exec ns-management /mnt/flash/ocprometheus -config /mnt/flash/ocprometheus.yml -addr localhost:6030 -username admin no shutdown","title":"VRF - gnmi/OCTA + ocprometheus"},{"location":"telemetry/adapters/ocprometheus/#cert-based-authentification-with-ocprometheus","text":"Follow the steps mentioned in Certificate Authentification Configuration page . Copy the client certificate and client key to the /persist/secure/ssl and /persist/secure/keys directory respectively. The EOS configuration should look like the following: management api gnmi transport grpc def ssl profile test-arista vrf MGMT provider eos-native ! management security ssl profile server certificate v1.crt key v1.key trust certificate demo-ca.crt ! daemon ocprometheus exec /sbin/ip netns exec ns-MGMT /usr/bin/ocprometheus -config /usr/bin/ocprometheus.yml -addr localhost:6030 -certfile /persist/secure/ssl/certs/gnmi-client.crt -keyfile /persist/secure/ssl/keys/gnmi-client.key -cafile /persist/secure/ssl/certs/demo-ca.crt no shutdown !","title":"Cert-based authentification with ocprometheus"},{"location":"telemetry/adapters/ocprometheus/#troubleshooting-tips","text":"","title":"Troubleshooting tips"},{"location":"telemetry/adapters/ocprometheus/#checking-logs-and-troubleshooting","text":"As any daemon/agent, logs are saved in /var/log/agents/ so we can either read those in bash with cat/more/less/vi/nano or from the CLI using the show agent logs command.","title":"Checking Logs and troubleshooting"},{"location":"telemetry/adapters/ocprometheus/#common-issues","text":"","title":"Common issues"},{"location":"telemetry/adapters/ocprometheus/#context_deadline_exceeded","text":"Seeing context_deadline_exceeded in the Targets section of the Prometheus GUI. This means connectivity is not established between the switch and the Prometheus server, which can be due to several reasons: TerminAttr and/or ocprometheus is not running TerminAttr and/or prometheus are not configured in the correct namespace/vrf Port 8080, which is used by default is not open on the switch (please check with netstat -an | grep 8080 or sudo ip netns exec ns-<vrf_name> netstat -an | grep 8080 if using a vrf; make sure the control plane ACL is updated and applied to vrf default or the specific vrf when using EOS version with CoPP Make sure TerminAttr is communicating with ocprometheus TerminAttr should have the -disableaaa flag added","title":"Context_deadline_exceeded"},{"location":"telemetry/adapters/ocprometheus/#not-seeing-any-streams-on-prometheus","text":"Check TerminAttr version (After TerminAttr 1.5.1 we replaced the deprecated gnmi.Value with gnmi.TypedValue ). This was only changed on our OpenConfig connectors (ockafka, ocprometheus, octsdb, ocredis, etc.) after March, 2019, thus older ocprometheus versions will ignore the updates. The version of ocprometheus that uses TypedValue as well was pushed to github on March 19th. A newer commit was done in the beginning of June to deal with coalesced deletes , and it\u2019s recommended to use the latest version. The best way to check if you are hitting any issues is to enable verbosity for ocprometheus with -v 9 ! daemon ocprometheus exec /sbin/ip netns exec ns-management /mnt/flash/ocprometheus -config /mnt/flash/ocprometheus20190319.yml -addr localhost:6042 -v 9 no shutdown ! In /var/log/agents/ocprometheus-<pid> you\u2019ll see error messages like below ( Ignoring incompatible update value ) : I0319 13:41:11.899488 5386 collector.go:77] Ignoring incompatible update value in path:<elem:<name:\"vsize\" > > val:<json_val:\"4505600\" > I0319 13:41:11.899518 5386 collector.go:77] Ignoring incompatible update value in path:<elem:<name:\"startstack\" > > val:<json_val:\"4289154048\" > I0319 13:41:11.899548 5386 collector.go:77] Ignoring incompatible update value in path:<elem:<name:\"kstkesp\" > > val:<json_val:\"0\" > I0319 13:41:11.899578 5386 collector.go:77] Ignoring incompatible update value in path:<elem:<name:\"exitSignal\" > > val:<json_val:\"17\" > I0319 13:41:11.899608 5386 collector.go:77] Ignoring incompatible update value in path:<elem:<name:\"state\" > > val:<json_val:\"83\" > I0319 13:41:11.899638 5386 collector.go:77] Ignoring incompatible update value in path:<elem:<name:\"cmajflt\" > > val:<json_val:\"0\" > I0319 13:41:11.899668 5386 collector.go:77] Ignoring incompatible update value in path:<elem:<name:\"priority\" > > val:<json_val:\"20\" > I0319 13:41:11.899698 5386 collector.go:77] Ignoring incompatible update value in path:<elem:<name:\"delayacctBlkioTicks\" > > val:<json_val:\"0\" > Make sure you\u2019re running the latest ocprometheus and TerminAttr versions.","title":"Not seeing any streams on Prometheus"},{"location":"telemetry/adapters/ocprometheus/#broken-paths-due-to-incorrect-regex","text":"Some of the subscription paths in the sample config file might not work on all type of devices. In case of broken paths, unfortunately we won\u2019t stream anything, and you might encounter a similar error as below when checking the metrics URL (http://x.x.x.x:8080/metrics) of a modular device: An error has occurred during metrics gathering: 17 error(s) occurred: * collected metric voltageSensor label:<name:\"sensor\" value:\"21\" > label:<name:\"unnamedLabel2\" value:\"voltage\" > gauge:<value:1.040771484375 > was collected before with the same name and label values * collected metric voltageSensor label:<name:\"sensor\" value:\"22\" > label:<name:\"unnamedLabel2\" value:\"voltage\" > gauge:<value:0.996826171875 > was collected before with the same name and label values * collected metric voltageSensor label:<name:\"sensor\" value:\"12\" > label:<name:\"unnamedLabel2\" value:\"voltage\" > gauge:<value:11.93359375 > was collected before with the same name and label values This can happen if the regexp matching is incorrect. The regexp path in question is: /Sysdb/environment/archer/power/status/voltageSensor/(?:cell/.+|system)/(?P<sensor>.+)/(voltage) This would match on VoltageSensorX , however if you check the list of voltage sensors using curl, you\u2019ll see that the sensors have the following format: VoltageSensorX/Y $ curl localhost:6060/rest/Sysdb/environment/archer/power/status/voltageSensor/cell/1/ { \"VoltageSensor1/12\": { \"_ptr\": \"/Sysdb/environment/archer/power/status/voltageSensor/cell/1/VoltageSensor1/12\" }, \"VoltageSensor1/13\": { \"_ptr\": \"/Sysdb/environment/archer/power/status/voltageSensor/cell/1/VoltageSensor1/13\" }, \"VoltageSensor1/14\": { \"_ptr\": \"/Sysdb/environment/archer/power/status/voltageSensor/cell/1/VoltageSensor1/14\" }, You can validate your regular expression using a regexp app (e.g www.regex101.com ): As you can see we are only matching VoltageSensorX To correct the issue, we can use the following path instead: /Sysdb/environment/archer/power/status/voltageSensor/(?:cell/.+|system)/(?P<sensor>VoltageSensor.+)/(voltage) As you can see, we are able to match on both VoltageSensorX and VoltageSensorX/Y .","title":"Broken paths due to incorrect regex"},{"location":"telemetry/adapters/ocprometheus/#authentication-failed","text":"When you see the following message, it means that ocprometheus is not able to connect to the gRPC server that TerminAttr/OpenConfig/OCTA is serving, either because the disableaaa flag is not specified in the TerminAttr config (in case of using TerminAttr) or the username and password strings are incorrect in the ocprometheus config. cat ocprometheus-11069 ===== Output from /sbin/ip ['netns', 'exec', 'ns-management', '/mnt/flash/ocprometheus', '-config', '/mnt/flash/ocprometheus.yml', '-addr', 'localhost:6042'] (PID=11069) started Jun 17 11:27:35.313690 === F0617 11:27:35.449652 11069 main.go:90] rpc error: code = Unauthenticated desc = Authentication failed","title":"Authentication failed"},{"location":"telemetry/adapters/ocprometheus/#connection-refused","text":"You might see the following error: cat ocprometheus-10314 ===== Output from /sbin/ip ['netns', 'exec', 'ns-management', '/mnt/flash/ocprometheus', '-config', '/mnt/flash/ocprometheus.yml', '-addr', 'localhost:6042'] (PID=10314) started Jun 17 11:21:05.494319 === F0617 11:21:05.533516 10314 main.go:90] rpc error: code = Unavailable desc = all SubConns are in TransientFailure, latest connection error: connection error: desc = \"transport: Error while dialing dial tcp 127.0.0.1:6042: connect: connection refused\" When you get connection refused, it means that the gRPC server is not reachable. In this case ocprometheus is executed in the management VRF, however TerminAttr is running in the default VRF and the gRPC server by default is running in the default VRF too. To fix it you can configure the gRPC server in the correct VRF: in case of TerminAttr using -grpcaddr <vrf>/<IP>:<port> : -grpcaddr management/0.0.0.0:6042 in case of using OpenConfig/OCTA: management api gnmi transport grpc management vrf management provider eos-native","title":"Connection refused"},{"location":"telemetry/adapters/ocprometheus/#subscription-paths","text":"You can find sample configuration files on our github page in the sample_configs directory, which contains per-platform EOS-native path examples but also OpenConfig path examples which are standard across all platforms in the ocprometheus_gnmi_4.23.yaml In this file, which is referred with the -config /mnt/flash/ocprometheus.yml flag and config file in the daemon ocprometheus configuration, you can add your desired Sysdb paths More examples (per platform + gnmi paths) can be found in the sample_configs folder. Commonly used paths: MAC table: /Smash/bridging/status/smashFdbStatus ARP table: /Smash/arp/status/arpEntry Neighbor table: /Smash/arp/status/neighborEntry IPv4 RIB: /Smash/routing/status/route IPv6 RIB: /Smash/routing6/status/route IPv4 next-hop table: /Smash/routing/status/nexthop IPv6 next-hop table: /Smash/routing6/status/nexthop CPU info: /Kernel/proc/cpu Process statistics: /Kernel/proc/stat System info: /Kernel/sysinfo Interface counters: /Smash/counters/ethIntf/<agent>/current/counter For details about subscription paths and metric path structures please visit: https://eos.arista.com/understanding-subscription-paths-for-open-source-telemetry-streaming","title":"Subscription paths"},{"location":"telemetry/adapters/ocprometheus/#useful-links","text":"https://prometheus.io/docs/prometheus/ https://grafana.com/docs/ http://docs.grafana.org/installation/docker/ https://grafana.com/dashboards https://fpm.readthedocs.io/en/latest/installing.html https://regex101.com/","title":"Useful links"},{"location":"videos/","text":"Overview For folks that enjoy videos, you will likely find the following videos informative. OpenConfig video series follow the playlist . Introduction to OpenConfig and gNMI Introduction to the YANG modeling language Introduction to YANG part 2 NETCONF and RESTCONF gRPC Automating Peering with OpenConfig","title":"Videos"},{"location":"videos/#overview","text":"For folks that enjoy videos, you will likely find the following videos informative.","title":"Overview"},{"location":"videos/#openconfig-video-series","text":"follow the playlist .","title":"OpenConfig video series"},{"location":"videos/#introduction-to-openconfig-and-gnmi","text":"","title":"Introduction to OpenConfig and gNMI"},{"location":"videos/#introduction-to-the-yang-modeling-language","text":"","title":"Introduction to the YANG modeling language"},{"location":"videos/#introduction-to-yang-part-2","text":"","title":"Introduction to YANG part 2"},{"location":"videos/#netconf-and-restconf","text":"","title":"NETCONF and RESTCONF"},{"location":"videos/#grpc","text":"","title":"gRPC"},{"location":"videos/#automating-peering-with-openconfig","text":"","title":"Automating Peering with OpenConfig"}]}